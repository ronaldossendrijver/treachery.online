@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

@if (State is LoginComponentState.Loading)
{
    <img src="./art/worm.gif" width="256" style="filter: drop-shadow(1px 1px 1px black)" alt="loading..."/>
}
else
{
    <div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 3s;">
        <div class="card-header">
            Welcome to treachery.online!
        </div>
        <div class="card-body">

            <ul class="nav nav-tabs mb-2">
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.Login)" aria-current="page" @onclick="@(_ => State = LoginComponentState.Login)">Login</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.NewAccount)" @onclick="@(_ => State = LoginComponentState.NewAccount)">Create account</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.RequestPasswordReset)" @onclick="@(_ => State = LoginComponentState.RequestPasswordReset)">Forgot password?</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.EnterNewPassword)" @onclick="@(_ => State = LoginComponentState.EnterNewPassword)">Set new password</button>
                </li>
            </ul>

            @switch (State)
            {
                case LoginComponentState.Login:
                    <div>Please enter your user name and password</div>
                    <input @ref="@_focusField" class="form-control mt-1 mt-1" @bind-value="@_username" @bind-value:event="oninput" maxlength="40" placeholder="User name" @onkeyup="@(e => KeyUp(e, Login))"/>
                    <input type="password" class="form-control mt-1" @bind-value="@_password" @bind-value:event="oninput" maxlength="80" placeholder="Password" @onkeyup="@(e => KeyUp(e, Login))"/>
                    <div class="text-danger small">@LoginMessage</div>
                    <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@Login">Log in</button>
                    break;
                case LoginComponentState.NewAccount:
                    <input @ref="@_focusField" class="form-control mt-1" @bind-value="@_newUsername" @bind-value:event="oninput" @onchange="@OnUserNameChanged" maxlength="40" placeholder="User name (used to log in)" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                    <input type="password" class="form-control mt-1" @bind-value="@_newPassword" @bind-value:event="oninput" maxlength="80" placeholder="Password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                    <input type="password" class="form-control mt-1" @bind-value="@_newPasswordConfirm" @bind-value:event="oninput" maxlength="80" placeholder="Repeat password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                    <input class="form-control mt-1" @bind-value="@_newEmail" @bind-value:event="oninput" maxlength="80" placeholder="E-mail address (in case you ever need to reset your password)" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                    <input class="form-control mt-1" @bind-value="@_newPlayerName" @bind-value:event="oninput" maxlength="80" placeholder="Player name (visible to other players)" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                    <div class="text-danger small">@NewAccountMessage</div>
                    <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@NewAccount">Create account</button>
                    break;
                case LoginComponentState.RequestPasswordReset:
                    <div>Enter the username or e-mail address associated to your account to receive a password reset token</div>
                    <input @ref="@_focusField" class="form-control mt-1" @bind-value="@_passwordResetUsernameOrEmail" @bind-value:event="oninput" maxlength="80" placeholder="Username or e-mail address" @onkeyup="@(e => KeyUp(e, PasswordReset))"/>
                    <div class="text-danger small">@PasswordResetMessage</div>
                    <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@PasswordReset">Request password reset</button>
                    break;
                case LoginComponentState.EnterNewPassword:
                    <div>Enter the password reset token you received by email, your username and your new password</div>
                    <input @ref="@_focusField" class="form-control mt-1" @bind-value="@_resetToken" @bind-value:event="oninput" maxlength="80" placeholder="Reset token" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                    <input class="form-control mt-1" @bind-value="@_resetUsername" @bind-value:event="oninput" maxlength="40" placeholder="User name" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                    <input type="password" class="form-control mt-1" @bind-value="@_resetPassword" @bind-value:event="oninput" maxlength="80" placeholder="Password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                    <input type="password" class="form-control mt-1" @bind-value="@_resetPasswordConfirm" @bind-value:event="oninput" maxlength="80" placeholder="Repeat password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                    <div class="text-danger small">@ResetPasswordMessage</div>
                    <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@NewPassword">Set new password</button>
                    break;
            }
        </div>
        <div class="card-footer">
            <div class="row">
                <span class="col">Version @Game.LatestVersion (February 2025)</span>
                <span class="col" @onclick=@(_ => ShowWhatsNew = true) style="text-align: right; cursor: pointer; color: red; font-weight: bolder; text-shadow: 0 0 2px gold;">Click here to see what's new!</span>
            </div>
        </div>
    </div>
}
@if (ShowWhatsNew)
{
    <img src='./art/whatsnew.png' alt='New features' style="z-index:1000; position: absolute; width: 80%; left: 10%; top:  10%; border:  0.25rem solid white; cursor: pointer;" @onclick=@(_ => ShowWhatsNew = false)/>
}

@code {

    private LoginComponentState State { get; set; } = LoginComponentState.Login;
    
    private ElementReference _focusField;
    
    private string _username;
    private string _password;
    private string LoginMessage { get; set; }
    
    private string _newUsername;
    private string _newPlayerName;
    private string _newPassword;
    private string _newPasswordConfirm;
    private string _newEmail;
    private string NewAccountMessage { get; set; }
    
    private string _passwordResetUsernameOrEmail;
    private string PasswordResetMessage { get; set; }
    
    private string _resetToken;
    private string _resetUsername;
    private string _resetPassword;
    private string _resetPasswordConfirm;
    private string ResetPasswordMessage { get; set; }
    
    private bool ShowWhatsNew { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _focusField.FocusAsync();
            StateHasChanged();
        }
    }

    private async Task KeyUp(KeyboardEventArgs e, Func<Task> action)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await action();
        }
    }

    private bool ValidateLogin()
    {
        return !(string.IsNullOrEmpty(_username) || string.IsNullOrEmpty(_password));
    }
    
    private bool ValidateNewAccount()
    {
        var result = PlayerJoined.ValidName(_newUsername);
        if (!string.IsNullOrEmpty(result)) NewAccountMessage = result;
        if (_newUsername == null || _newUsername.Trim().Length <= 3) NewAccountMessage = "Username must be more than 3 characters";
        if (_newUsername == null || _newUsername.Trim().Length > 40) NewAccountMessage = "Username must be 40 characters or less";
        if (_newPlayerName == null || _newPlayerName.Trim().Length <= 3) NewAccountMessage = "Player name must be more than 3 characters";
        if (_newPlayerName == null || _newPlayerName.Trim().Length > 40) NewAccountMessage = "Player name must be 40 characters or less";
        else if (string.IsNullOrEmpty(_newPassword) || _newPassword.Length < 6) NewAccountMessage = "Password must be at least 6 characters";
        else if (!_newPassword.Equals(_newPasswordConfirm)) NewAccountMessage = "Passwords do not not match";
        else if (string.IsNullOrEmpty(_newEmail) || !_newEmail.Contains('@') || !_newEmail.Contains('.')) NewAccountMessage = "Enter a valid e-mail address";
        else NewAccountMessage = null;

        return NewAccountMessage == null;
    }
    
    private bool ValidatePasswordReset()
    {
        if (string.IsNullOrEmpty(_passwordResetUsernameOrEmail)) PasswordResetMessage = "Enter your username or e-mail address";
        else PasswordResetMessage = null;

        return PasswordResetMessage == null;
    }
    
    private bool ValidateNewPassword()
    {
        if (string.IsNullOrEmpty(_resetToken)) ResetPasswordMessage = "Enter the reset token sent to your e-mail address";
        else if (string.IsNullOrEmpty(_resetPassword) || _resetPassword.Length < 6) ResetPasswordMessage = "Password must be at least 6 characters";
        else if (!_resetPassword.Equals(_resetPasswordConfirm)) ResetPasswordMessage = "Passwords do not match";
        else ResetPasswordMessage = null;

        return ResetPasswordMessage == null;
    }

    private async Task Login()
    {
        if (ValidateLogin())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            
            var result = await Client.RequestLogin(_username, Support.GetHash(_password));
            if (result.Success)
            {
                ClearAllInputs();
            }
            else
            {
                LoginMessage = Client.CurrentSkin.Describe(result.Error);
                State = LoginComponentState.Login;
            }
        }
    }
    
    private async Task NewAccount()
    {
        if (ValidateNewAccount())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            
            var result = await Client.RequestCreateUser(_newUsername, Support.GetHash(_newPassword), _newEmail, _newPlayerName);
            if (result.Success)
            {
                ClearAllInputs();
                State = LoginComponentState.Login;
            }
            else
            {
                NewAccountMessage = Client.CurrentSkin.Describe(result.Error);
                State = LoginComponentState.NewAccount;
            }
        }
    }
    
    private async Task PasswordReset()
    {
        if (ValidatePasswordReset())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            
            var result = await Client.RequestPasswordReset(_passwordResetUsernameOrEmail);
            if (result.Success)
            {
                ClearAllInputs();
                State = LoginComponentState.EnterNewPassword;
            }
            else
            {
                PasswordResetMessage = Client.CurrentSkin.Describe(result.Error);
                State = LoginComponentState.RequestPasswordReset;
            }
        }
    }
    
    private async Task NewPassword()
    {
        if (ValidateNewPassword())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            
            var result = await Client.RequestSetPassword(_resetUsername, _resetToken, Support.GetHash(_resetPassword));
            if (result.Success)
            {
                ClearAllInputs();
                State = LoginComponentState.Login;
            }
            else
            {
                ResetPasswordMessage = Client.CurrentSkin.Describe(result.Error);
                State = LoginComponentState.EnterNewPassword;
            }
        }
    }

    private enum LoginComponentState
    {
        Login, NewAccount, RequestPasswordReset, EnterNewPassword, Loading
    }

    private string GetActive(LoginComponentState toCheck) => toCheck == State ? "active" : "";

    private void ClearAllInputs()
    {
        _username = null;
        _password = null;
        LoginMessage = null;
        
        _newUsername = null;
        _newPassword = null;
        _newPasswordConfirm = null;
        _newEmail = null;
        NewAccountMessage = null;
        
        _passwordResetUsernameOrEmail = null;
        PasswordResetMessage = null;
        
        _resetToken = null;
        _resetUsername = null;
        _resetPassword = null;
        _resetPasswordConfirm = null;
        ResetPasswordMessage = null;
    }

    private void OnUserNameChanged()
    {
        if (string.IsNullOrEmpty(_newPlayerName))
        {
            _newPlayerName = _newUsername;
        }
    }
}


