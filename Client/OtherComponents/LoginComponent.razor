@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 3s;">
    <div class="card-header">Welcome to treachery.online!</div>
    <div class="card-body">

        @if (State is not LoginComponentState.Loading)
        {
            <ul class="nav nav-pills mb-2">
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.Login)" aria-current="page" @onclick="@(_ => State = LoginComponentState.Login)">Login</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.NewAccount)" @onclick="@(_ => State = LoginComponentState.NewAccount)">Create Account</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @GetActive(LoginComponentState.RequestPasswordReset) @GetActive(LoginComponentState.EnterNewPassword)" @onclick="@(_ => State = LoginComponentState.RequestPasswordReset)">Forgot Password?</button>
                </li>
            </ul>
        }
        
        @switch (State)
        {
            case LoginComponentState.Login:
                <div>Please enter your user name and password</div>
                <input @ref="@focusField" class="form-control mt-1 mt-1" @bind-value="@username" @bind-value:event="oninput" maxlength="80" placeholder="User name" @onkeyup="@(e => KeyUp(e, Login))"/>
                <input type="password" class="form-control mt-1" @bind-value="@password" @bind-value:event="oninput" maxlength="80" placeholder="Password" @onkeyup="@(e => KeyUp(e, Login))"/>
                <div class="text-danger small">@LoginMessage</div>
                <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@Login">Log in</button>
                break;
            case LoginComponentState.NewAccount:
                <input @ref="@focusField" class="form-control mt-1" @bind-value="@newUsername" @bind-value:event="oninput" maxlength="80" placeholder="User name" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                <input type="password" class="form-control mt-1" @bind-value="@newPassword" @bind-value:event="oninput" maxlength="80" placeholder="Password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                <input type="password" class="form-control mt-1" @bind-value="@newPasswordConfirm" @bind-value:event="oninput" maxlength="80" placeholder="Repeat password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                <input class="form-control mt-1" @bind-value="@newEmail" @bind-value:event="oninput" maxlength="80" placeholder="E-mail address (in case you ever need to reset your password)" @onkeyup="@(e => KeyUp(e, NewAccount))"/>
                <div class="text-danger small">@NewAccountMessage</div>
                <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@NewAccount">Create account</button>
                break;
            case LoginComponentState.RequestPasswordReset:
                <div>Enter the e-mail address associated to your account to receive a password reset token.</div>
                <input @ref="@focusField" class="form-control mt-1" @bind-value="@passwordResetEmail" @bind-value:event="oninput" maxlength="80" placeholder="E-mail address (entered when you created an account)" @onkeyup="@(e => KeyUp(e, PasswordReset))"/>
                <div class="text-danger small">@PasswordResetMessage</div>
                <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@PasswordReset">Request password reset</button>
                break;
            case LoginComponentState.EnterNewPassword:
                <div>Enter the username and password reset token you receive by e-mail and your new password below:</div>
                <input @ref="@focusField" class="form-control mt-1" @bind-value="@resetToken" @bind-value:event="oninput" maxlength="80" placeholder="Reset token" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                <input class="form-control mt-1" @bind-value="@resetUsername" @bind-value:event="oninput" maxlength="80" placeholder="User name" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                <input type="password" class="form-control mt-1" @bind-value="@resetPassword" @bind-value:event="oninput" maxlength="80" placeholder="Password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                <input type="password" class="form-control mt-1" @bind-value="@resetPasswordConfirm" @bind-value:event="oninput" maxlength="80" placeholder="Repeat password" autocomplete="new-password" @onkeyup="@(e => KeyUp(e, NewPassword))"/>
                <div class="text-danger small">@ResetPasswordMessage</div>
                <button class="btn btn-primary mt-1" disabled="@(State is LoginComponentState.Loading)" @onclick="@NewPassword">Set new password</button>
                break;
        }
    </div>
    <div class="card-footer">Version @Game.LatestVersion (August 2024)</div>
</div>

@code {

    private LoginComponentState State { get; set; } = LoginComponentState.Login;
    
    private ElementReference focusField;
    
    private string username;
    private string password;
    private string LoginMessage { get; set; }
    
    private string newUsername;
    private string newPassword;
    private string newPasswordConfirm;
    private string newEmail;
    private string NewAccountMessage { get; set; }
    
    private string passwordResetEmail;
    private string PasswordResetMessage { get; set; }
    
    private string resetToken;
    private string resetUsername;
    private string resetPassword;
    private string resetPasswordConfirm;
    private string ResetPasswordMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await focusField.FocusAsync();
            StateHasChanged();
        }
    }

    private async Task KeyUp(KeyboardEventArgs e, Func<Task> action)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await action();
        }
    }

    private bool ValidateLogin()
    {
        return !(string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password));
    }
    
    private bool ValidateNewAccount()
    {
        var result = PlayerJoined.ValidName(newUsername);
        if (!string.IsNullOrEmpty(result)) NewAccountMessage = result;
        if (newUsername == null || newUsername.Trim().Length <= 3) NewAccountMessage = "Username must be more than 3 characters";
        else if (string.IsNullOrEmpty(newPassword) || newPassword.Length < 6) NewAccountMessage = "Password must be at least 6 characters";
        else if (!newPassword.Equals(newPasswordConfirm)) NewAccountMessage = "Passwords do not not match";
        else if (string.IsNullOrEmpty(newEmail) || !newEmail.Contains('@') || !newEmail.Contains('.')) NewAccountMessage = "Enter a valid e-mail address";
        else NewAccountMessage = null;

        return NewAccountMessage == null;
    }
    
    private bool ValidatePasswordReset()
    {
        if (string.IsNullOrEmpty(passwordResetEmail) || !passwordResetEmail.Contains('@') || !passwordResetEmail.Contains('.')) PasswordResetMessage = "Enter a valid e-mail address";
        else PasswordResetMessage = null;

        return PasswordResetMessage == null;
    }
    
    private bool ValidateNewPassword()
    {
        var result = PlayerJoined.ValidName(resetUsername);
        
        if (string.IsNullOrEmpty(resetToken)) ResetPasswordMessage = "Enter the reset token sent to your e-mail address";
        else if (!string.IsNullOrEmpty(result)) ResetPasswordMessage = result;
        else if (string.IsNullOrEmpty(resetPassword) || resetPassword.Length < 6) ResetPasswordMessage = "Password must be at least 6 characters";
        else if (!resetPassword.Equals(resetPasswordConfirm)) ResetPasswordMessage = "Passwords do not match";
        else ResetPasswordMessage = null;

        return ResetPasswordMessage == null;
    }

    private async Task Login()
    {
        if (ValidateLogin())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            LoginMessage = await Client.RequestLogin(username, Support.GetHash(password));
            State = LoginComponentState.Login;
        }
    }
    
    private async Task NewAccount()
    {
        if (ValidateNewAccount())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            NewAccountMessage = await Client.RequestCreateUser(newUsername, Support.GetHash(newPassword), newEmail, newUsername);
            State = string.IsNullOrEmpty(PasswordResetMessage) ? LoginComponentState.Login : LoginComponentState.NewAccount;
            if (State is not LoginComponentState.NewAccount) ClearAllInputs();
        }
    }
    
    private async Task PasswordReset()
    {
        if (ValidatePasswordReset())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            PasswordResetMessage = await Client.RequestPasswordReset(passwordResetEmail);
            State = string.IsNullOrEmpty(PasswordResetMessage) ? LoginComponentState.EnterNewPassword : LoginComponentState.RequestPasswordReset;
            if (State is not LoginComponentState.RequestPasswordReset) ClearAllInputs();
        }
    }
    
    private async Task NewPassword()
    {
        if (ValidateNewPassword())
        {
            State = LoginComponentState.Loading;
            StateHasChanged();
            ResetPasswordMessage = await Client.RequestSetPassword(resetUsername, resetToken, Support.GetHash(resetPassword));
            State = string.IsNullOrEmpty(PasswordResetMessage) ? LoginComponentState.Login : LoginComponentState.EnterNewPassword;
            if (State is not LoginComponentState.EnterNewPassword) ClearAllInputs();
        }
    }

    private enum LoginComponentState
    {
        Login, NewAccount, RequestPasswordReset, EnterNewPassword, Loading
    }

    private string GetActive(LoginComponentState toCheck) => toCheck == State ? "active" : "";

    private void ClearAllInputs()
    {
        username = null;
        password = null;
        LoginMessage = null;
        
        newUsername = null;
        newPassword = null;
        newPasswordConfirm = null;
        newEmail = null;
        NewAccountMessage = null;
        
        passwordResetEmail = null;
        PasswordResetMessage = null;
        
        resetToken = null;
        resetUsername = null;
        resetPassword = null;
        resetPasswordConfirm = null;
        ResetPasswordMessage = null;
    }
}


