@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

@if (Player != null && Client.CurrentPhase >= Phase.TradingFactions)
{
    <div class="card p-1 border-light mb-1" style="animation:fadeIn 3s;">

        @if (ShowHeader)
        {
            <div class="card-header" @onclick=@(_ => _collapsed = !_collapsed) style="cursor:pointer">
                @Name(ShownPlayer.Faction)
                <CollapseButton Collapsed=@_collapsed />
            </div>
        }

        @if (!_collapsed || !ShowHeader) {
            <div class="card-body p-0 bg-transparent text-center" style="background-image: url('@Client.CurrentSkin.GetImageUrl(ShownPlayer.Faction)'); background-position:center; background-size:300px 300px; background-clip:content-box; background-repeat: no-repeat">

                <div class="card-text h-100 text-white" style="background-color:rgba(0,0,0,0.6);">

                    @if (Client.CurrentPhase >= Phase.BlackMulligan)
                    {
                        <div class="row m-0 bg-dark justify-content-center">

                            <!-- Resources -->
                            <div class="col p-0">
                                <img class="img-fluid m-0 p-0" width="24" height="24" 
                                     src="@Client.CurrentSkin.Harvester_URL" 
                                     title="@Name(Concept.Resource)" 
                                     alt="@Name(Concept.Resource)"/><strong>&nbsp;@ResourcesText</strong>
                            </div>

                            <!-- Forces -->
                            <div class="col p-0">
                                <img class="img-fluid m-0 p-0" width="24" height="24" 
                                     src="@Client.CurrentSkin.GetFactionForceImageUrl(ShownPlayer.Faction)" 
                                     title="@Name(ShownPlayer.Force)" 
                                     alt="@Name(ShownPlayer.Force)" /><strong>&nbsp;@ShownPlayer.ForcesInReserve</strong>
                            </div>

                            <!-- Special Forces -->
                            @if (ShownPlayer.HasSpecialForces)
                            {
                                <div class="col p-0">
                                    <img class="img-fluid m-0 p-0" width="24" height="24" 
                                         src="@Client.CurrentSkin.GetFactionSpecialForceImageUrl(ShownPlayer.Faction)" 
                                         title="@Name(ShownPlayer.SpecialForce)" 
                                         alt="@Name(ShownPlayer.SpecialForce)"/><strong>&nbsp;@ShownPlayer.SpecialForcesInReserve</strong>
                                </div>
                            }

                        </div>

                        <!-- Leaders -->
                        @foreach (var v in ShownPlayer.Leaders.Where(l => Client.Game.IsAlive(l)))
                        {
                            <Image Src=@Client.CurrentSkin.GetImageUrl(v) Highlighted="@Game.IsSkilled(v)" Class="img-fluid p-1" Width=60 Popover=@Client.CurrentSkin.GetPopup(v, Client.Game)/>
                        }

                        @foreach (var v in ShownPlayer.Leaders.Where(l => !Client.Game.IsAlive(l)))
                        {
                            <Image Src=@Client.CurrentSkin.GetImageUrl(v) Darkened Class="img-fluid p-1" Width=60 Popover=@Client.CurrentSkin.GetPopup(v, Client.Game)/>
                        }

                        <!-- Traitors and Face Dancers -->
                        @if (ShownPlayer.FaceDancers.Count > 0)
                        {
                            <h5 class="mt-1 mb-0">Face Dancers</h5>
                            @foreach (var v in ShownPlayer.FaceDancers)
                            {
                                <Image Src=@Client.CurrentSkin.GetImageUrl(v) Blurred="@ShownPlayer.RevealedFaceDancers.Contains(v)" Class="img-fluid p-1" Width=60 Popover=@Client.CurrentSkin.GetPopup(v, Client.Game)/>
                            }
                        }
                        else if (!Client.Game.AssistedNotekeepingEnabled(Player) && ShownPlayer.Traitors.Count == 1)
                        {
                            <div>
                                <Image Src="@Client.CurrentSkin.GetImageUrl(ShownPlayer.Traitors.First())" 
                                       Class="img-fluid p-1" 
                                       Width=60 
                                       Popover=@Client.CurrentSkin.GetPopup(ShownPlayer.Traitors.First(), Client.Game)/> is your traitor.
                            </div>
                        }
                        else if (ShownPlayer.Traitors.Count > 0)
                        {
                            @if (ShownPlayer.Traitors.Count > 1)
                            {
                                <h5 class="mt-1 mb-0">Traitors</h5>
                            }
                            else
                            {
                                <h5 class="mt-1 mb-0">Traitor</h5>
                            }

                            @foreach (var v in ShownPlayer.Traitors)
                            {
                                <Image Src=@Client.CurrentSkin.GetImageUrl(v) Blurred="@ShownPlayer.RevealedTraitors.Contains(v)" Class="img-fluid p-1" Width=60 Popover=@Client.CurrentSkin.GetPopup(v, Client.Game)/>
                            }

                            @foreach (var v in ShownPlayer.DiscardedTraitors)
                            {
                                <Image Src=@Client.CurrentSkin.GetImageUrl(v) GreyedOut Class="img-fluid p-1" Width=60 Popover=@Client.CurrentSkin.GetPopup(v, Client.Game)/>
                            }
                        }

                        @if (Client.CurrentPhase > Phase.DiallingStorm && Client.Game.HasStormPrescience(Player))
                        {
                            <div>The next storm will move <SimpleNumberComponent>@(Client.Game.NextStormMoves)</SimpleNumberComponent> sectors.</div>
                        }

                        @if (ShownPlayer.Faction == Faction.Blue && Client.CurrentPhase > Phase.BluePredicting)
                        {
                            <div>Prediction: <FactionComponent Diameter=30 Faction=@ShownPlayer.PredictedFaction/><SimpleNumberComponent Size=30>@ShownPlayer.PredictedTurn</SimpleNumberComponent></div>
                        }

                        @if (ShownPlayer.Faction == Faction.Green)
                        {
                            if (Client.Game.Applicable(Rule.GreenMessiah))
                            {
                                <div>
                                    <img class="img-fluid m-0 p-0" width="32" height="32"
                                         src="@Client.CurrentSkin.Messiah_URL"
                                         title="@Client.CurrentSkin.Describe(Concept.Messiah)"
                                         alt="@Client.CurrentSkin.Describe(Concept.Messiah)"/>
                                    @if (ShownPlayer.TotalForcesKilledInBattle >= 7)
                                    {
                                        if (ShownPlayer.MessiahAvailable)
                                        {
                                            <span> is available.</span>
                                        }
                                        else
                                        {
                                            <span>has been killed.</span>
                                        }
                                    }
                                    else
                                    {
                                        <span> will be available after <SimpleNumberComponent>@(7 - ShownPlayer.TotalForcesKilledInBattle)</SimpleNumberComponent> more forces are killed in battle.</span>
                                    }
                                </div>
                            }
                        }

                        @if (ShownPlayer.Faction == Faction.Pink && Client.CurrentPhase > Phase.BluePredicting)
                        {
                            <div>
                                Ambassadors:
                                @foreach (var ambassador in ShownPlayer.Ambassadors)
                                {
                                    <Image Shown=@ambassador Width="30"/>
                                }
                            </div>
                        }

                        @if (ShownPlayer.Faction == Faction.Cyan && Client.CurrentPhase > Phase.BluePredicting)
                        {
                            var style = $"color:white;{Support.TextBorder(1, "#289caa")}";

                            <div>
                            Available Terror:
                            <ExpressionComponent Game="Game" Size="30" Expression=@Expression.Express(Game.UnplacedTerrorTokens) TextBorder=@style />
                            </div>
                        }

                        @if (Client.Game.CurrentMainPhase == MainPhase.ShipmentAndMove && Client.Game.HasResourceDeckPrescience(Player) && !Client.Game.ResourceCardDeck.IsEmpty)
                        {
                            <Hoverable Popover=@Client.CurrentSkin.GetPopup(Client.Game.ResourceCardDeck.Top)>Top card of @Name(Concept.Resource) Deck: <strong>@Name(Client.Game.ResourceCardDeck.Top)</strong></Hoverable>
                        }

                        <!-- Cards -->
                        @if (ShownPlayer.TreacheryCards.Count == 0 && Client.Game.GetCardSetAsideForBid(Player) == null)
                        {
                            <div>You don't own any treachery cards.</div>
                        }
                        else
                        {
                            <div class="row row-cols-2 row-cols-xl-4 ms-0 me-0 mt-1 justify-content-center">

                                @foreach (var v in ShownPlayer.TreacheryCards)
                                {
                                    <Image Shown=@v Class="img-fluid p-1"/>
                                }

                                @if (Client.Game.GetCardSetAsideForBid(Player) != null)
                                {
                                    var v = Client.Game.GetCardSetAsideForBid(Player);
                                    <Image Shown=@v Class="img-fluid p-1"/>
                                }

                            </div>
                        }

                        @if (ShownPlayer.Nexus != Faction.None)
                        {
                            <div>Nexus: <Image Width=30 Src=@Client.CurrentSkin.GetFactionFacedownImageUrl(ShownPlayer.Nexus) Popover=@Client.CurrentSkin.GetNexusCardPopup(ShownPlayer.Nexus.ToNexus())/></div>
                        }
                    }
                    else
                    {
                        <FactionComponent Faction="Client.Player.Faction"/>
                    }
                
                </div>

            </div>
        }

    </div>
}

@code {

    [Parameter]
    public Player ShownPlayer { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; }

    private bool _collapsed = true;

    private string ResourcesText
    {
        get
        {
            if (ShownPlayer.BankedResources > 0)
            {
                if (ShownPlayer.Bribes + ShownPlayer.Extortion > 0)
                {
                    if (ShownPlayer.ResourcesAfterBidding > 0)
                    {
                        return Client.CurrentSkin.Format("{0}, {1} at end of turn, {2} at end of bidding, {3} at {4}", ShownPlayer.Resources, ShownPlayer.Bribes + ShownPlayer.Extortion, ShownPlayer.ResourcesAfterBidding, ShownPlayer.BankedResources, MainPhase.Contemplate);
                    }

                    return Client.CurrentSkin.Format("{0}, {1} at {2}, {3} at {4}", ShownPlayer.Resources, ShownPlayer.Bribes + ShownPlayer.Extortion, MainPhase.Contemplate, ShownPlayer.BankedResources, MainPhase.Contemplate);
                }

                if (ShownPlayer.ResourcesAfterBidding > 0)
                {
                    return Client.CurrentSkin.Format("{0}, {1} at end of {2}, {3} at {4}", ShownPlayer.Resources, ShownPlayer.ResourcesAfterBidding, MainPhase.Bidding, ShownPlayer.BankedResources, MainPhase.Contemplate);
                }

                return Client.CurrentSkin.Format("{0}, {1} at {2}", ShownPlayer.Resources, ShownPlayer.BankedResources, MainPhase.Contemplate);
            }

            if (ShownPlayer.Bribes + ShownPlayer.Extortion > 0)
            {
                if (ShownPlayer.ResourcesAfterBidding > 0)
                {
                    return Client.CurrentSkin.Format("{0}, {1} at end of turn, {2} at end of bidding", ShownPlayer.Resources, ShownPlayer.Bribes + ShownPlayer.Extortion, ShownPlayer.ResourcesAfterBidding);
                }

                return Client.CurrentSkin.Format("{0}, {1} at {2}", ShownPlayer.Resources, ShownPlayer.Bribes + ShownPlayer.Extortion, MainPhase.Contemplate);
            }

            if (ShownPlayer.ResourcesAfterBidding > 0)
            {
                return Client.CurrentSkin.Format("{0}, {1} at end of {2}", ShownPlayer.Resources, ShownPlayer.ResourcesAfterBidding, MainPhase.Bidding);
            }

            return Client.CurrentSkin.Format("{0}", ShownPlayer.Resources);
        }
    }
}