@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent;

<ModalComponent Id="@Id" Title="Card and Token Reference" Size="modal-xl">

    <h5>Treachery Cards</h5>
    <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

        @foreach (var v in TreacheryCardManager.GetCardsInPlay(Client.Game))
        {
            <div class="card">
                <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(v)>
                    <img src="@Client.CurrentSkin.GetImageUrl(v)" class="card-img" alt="@Name(v)">
                </Hoverable>
            </div>
        }

    </div>

    @if (Client.Game.IsPlaying(Faction.White))
    {
        <h5 class="mt-2">@Client.CurrentSkin.Describe(Faction.White) Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in TreacheryCardManager.GetWhiteCards())
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(v)>
                        <img src="@Client.CurrentSkin.GetImageUrl(v)" class="card-img" alt="@Name(v)">
                    </Hoverable>
                </div>
            }

        </div>
    }

    <h5 class="mt-2">@Client.CurrentSkin.Describe(Concept.Resource) Cards</h5>
    <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

        @foreach (var v in Map.GetResourceCardsInPlay(Client.Game))
        {
            <div class="card">
                <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(v)>
                    <img src="@Client.CurrentSkin.GetImageUrl(v)" class="card-img" alt="@Name(v)">
                </Hoverable>
            </div>
        }

    </div>

    @if (Client.Game.Applicable(Rule.LeaderSkills))
    {
        <h5 class="mt-2">Leader Skill Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in Enumerations.GetValuesExceptDefault(LeaderSkill.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(v)>
                        <img src="@Client.CurrentSkin.GetImageUrl(v)" class="card-img" alt="@Name(v)">
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.StrongholdBonus))
    {
        <h5 class="mt-2">Stronghold Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var v in Enumerations.GetValuesExceptDefault(StrongholdAdvantage.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(v)>
                        <img src="@Client.CurrentSkin.GetImageUrl(v)" class="card-img" alt="@Name(v)">
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.NexusCards))
    {
        <h5 class="mt-2">Nexus Cards</h5>
        <div class="row row-cols-3 row-cols-md-6 ms-1 me-1">

            @foreach (var n in Enumerations.GetValuesExceptDefault(Nexus.None))
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetNexusCardPopup(n)>
                        <img src="@Client.CurrentSkin.GetImageUrl(n)" class="card-img" alt="@Name(n)">
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.Applicable(Rule.Homeworlds))
    {
        <h5 class="mt-2">Homeworld Cards</h5>
        <div class="row row-cols-2 row-cols-md-3 ms-1 me-1">

            @foreach (var w in Client.Game.Map.Homeworlds)
            {
                <div class="card">
                    <Hoverable Class="card-img-top" Popover=@Client.CurrentSkin.GetPopup(w)>
                        <img src="@Client.CurrentSkin.GetHomeworldCardImageURL(w.World)" class="card-img" alt="@Name(w)">
                    </Hoverable>
                </div>
            }

        </div>
    }

    @if (Client.Game.IsPlaying(Faction.Pink))
    {
        <h5 class="mt-2">Ambassador Tokens</h5>
        <div class="row row-cols-6 row-cols-md-12 ms-1 me-1">

            @foreach (var t in Enumerations.GetValuesExceptDefault(Ambassador.None))
            {
                if (t != Ambassador.Cyan)
                {
                    <div class="card">
                        <img src="@Client.CurrentSkin.GetImageUrl(t)" class="card-img" title=@Client.CurrentSkin.GetAmbassadorDescription(t) alt="@Name(t)">
                    </div>
                }
            }

        </div>
    }

    @if (Client.Game.IsPlaying(Faction.Cyan))
    {
        <h5 class="mt-2">Terror Tokens</h5>
        <div>

            <ul>
                @foreach (var t in Enumerations.GetValuesExceptDefault(TerrorType.None))
                {
                    <li><strong>@Name(t) -</strong> @Client.CurrentSkin.GetTerrorTypeDescription(t)</li>
                }
            </ul>

        </div>
    }

    @if (Client.Game.Applicable(Rule.DiscoveryTokens))
    {
        <h5 class="mt-2">Discovery Tokens</h5>
        <div>

            <ul>
            @foreach (var t in Enumerations.GetValuesExceptDefault(DiscoveryToken.None))
            {
                <li><strong>@Name(t) -</strong> @Client.CurrentSkin.GetDiscoveryTokenDescription(t)</li>
            }
            </ul>

        </div>
    }

</ModalComponent>

@code {

    [Parameter] public new string Id { get; set; } = "";
}