@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">Join or observe a game</div>
    <div class="card-body">

        @if (!Client.RunningGamesWithoutOpenSeats.Any() && !Client.RunningGamesWithOpenSeats.Any())
        {
            <div class="text-info">No games hosted...</div>
        }
        else
        {
            if (Client.RunningGamesWithOpenSeats.Any())
            {
                <div class="text-info">Games with open seats</div>
                <table class="table table-sm">
                    <tbody>

                    @foreach (var av in Client.RunningGamesWithOpenSeats)
                    {
                        joinGamePassword.TryAdd(av.GameId, "");
                        JoinErrors.TryAdd(av.GameId, "");

                        var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                        <tr class="small table-dark">
                            <td class="w-25" style="@fontColorStyle">@av.GameName</td>
                            <td style="@fontColorStyle">
                                @if (av.CurrentPhase == Phase.AwaitingPlayers)
                                {
                                    <div>
                                        @av.Players.Length Players, @Client.CurrentSkin.Describe(Game.DetermineApproximateRuleset(av.FactionsInPlay, av.Rules, Game.ExpansionLevel)), maximum players: @av.NumberOfPlayers, maximum turns: @av.MaximumTurns
                                    </div>
                                }
                                else
                                {
                                    var factions = av.FactionsInPlay ?? [];
                                    <div>@Name(Game.DetermineApproximateRuleset(factions, av.Rules, Game.ExpansionLevel)), Turn @av.CurrentTurn: @Name(av.CurrentMainPhase)
                                        <br>
                                        @foreach (var f in factions.Where(f => f != Faction.None))
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                        @NumberOfBotsMessage(av)
                                    </div>
                                }
                            </td>
                            <td class="w-25">
                                @if (!av.YouAreIn)
                                {
                                    if (av.HasPassword)
                                    {
                                        <input class="form-inline input-sm" style="max-width:120px" @bind="joinGamePassword[av.GameId]" maxlength="24" placeholder="Game password"/>
                                    }

                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsObserver(av.GameId, joinGamePassword[av.GameId]))">Observe</button>

                                    @if (av.CurrentPhase == Phase.AwaitingPlayers)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, joinGamePassword[av.GameId], -1))">Join</button>
                                    }
                                    else
                                    {
                                        foreach (var availableSeat in av.AvailableSeats)
                                        {
                                            var botMessage = availableSeat.IsBot ? "bot" : "human";
                                            <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, joinGamePassword[av.GameId], availableSeat.Seat))">Take over <FactionComponent Faction="@availableSeat.Faction" Diameter="20"/> (@botMessage)</button>
                                        }
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, string.Empty, av.YourCurrentSeat))">Resume</button>
                                }
                                <div class="text-danger">@JoinErrors[av.GameId]</div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            if (Client.RunningGamesWithoutOpenSeats.Any())
            {
                <div class="text-info">Games without open seats</div>
                <table class="table table-sm">
                    <tbody>

                    @foreach (var av in Client.RunningGamesWithoutOpenSeats)
                    {
                        joinGamePassword.TryAdd(av.GameId, "");
                        JoinErrors.TryAdd(av.GameId, "");

                        var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                        <tr class="small table-dark">
                            <td class="w-25" style="@fontColorStyle">@av.GameName</td>
                            <td style="@fontColorStyle">
                                @if (av.CurrentPhase == Phase.AwaitingPlayers)
                                {
                                    <div>
                                        @av.Players.Length Players, @Client.CurrentSkin.Describe(Game.DetermineApproximateRuleset(av.FactionsInPlay, av.Rules, Game.ExpansionLevel)), maximum players: @av.NumberOfPlayers, maximum turns: @av.MaximumTurns
                                    </div>
                                }
                                else
                                {
                                    var factions = av.FactionsInPlay ?? [];
                                    <div>@Name(Game.DetermineApproximateRuleset(factions, av.Rules, Game.ExpansionLevel)), Turn @av.CurrentTurn: @Name(av.CurrentMainPhase)
                                        <br>
                                        @foreach (var f in factions.Where(f => f != Faction.None))
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                        @NumberOfBotsMessage(av)
                                    </div>
                                }
                            </td>
                            <td class="w-25">
                                @if (!av.YouAreIn)
                                {
                                    if (av.HasPassword)
                                    {
                                        <input class="form-inline input-sm" style="max-width:120px" @bind="joinGamePassword[av.GameId]" maxlength="24" placeholder="Game password"/>
                                    }

                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsObserver(av.GameId, joinGamePassword[av.GameId]))">Observe</button>

                                    @if (av.CurrentPhase == Phase.AwaitingPlayers)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, joinGamePassword[av.GameId], -1))">Join</button>
                                    }
                                    else
                                    {
                                        foreach (var availableSeat in av.AvailableSeats)
                                        {
                                            var botMessage = availableSeat.IsBot ? "bot" : "human";
                                            <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, joinGamePassword[av.GameId], availableSeat.Seat))">Take over <FactionComponent Faction="@availableSeat.Faction" Diameter="20"/> (@botMessage)</button>
                                        }
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => JoinGameAsPlayer(av.GameId, string.Empty, av.YourCurrentSeat))">Resume</button>
                                }
                                <div class="text-danger">@JoinErrors[av.GameId]</div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

@code {

    private Dictionary<string, string> JoinErrors { get; } = new();
    private readonly Dictionary<string, string> joinGamePassword = [];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartRedrawCycle(5000);
        }
    }

    private async Task JoinGameAsPlayer(string gameId, string password, int seat)
    {
        JoinErrors[gameId] = await Client.RequestJoinGame(gameId, Support.GetHash(password), seat);
    }

    private async Task JoinGameAsObserver(string gameId, string password)
    {
        JoinErrors[gameId] = await Client.RequestObserveGame(gameId, Support.GetHash(password));
    }

    private static string NumberOfBotsMessage(GameInfo av)
    {
        return av.NumberOfBots switch
        {
            1 => $" ({av.Players.Length} players, 1 bot)",
            > 1 => $" ({av.Players.Length} players, {av.NumberOfBots} bots)",
            _ => $" ({av.Players.Length} players)"
        };
    }
}
