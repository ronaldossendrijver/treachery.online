@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">
        <div class="row justify-content-between">
            <div class="col-4">Join or observe a game</div>
            <div class="col-2">
                <div class="btn-group">
                    <button type="button" class="btn btn-secondary dropdown-toggle btn-sm" data-bs-toggle="dropdown" aria-expanded="false">
                        @if (Client.FetchActiveGamesOnly)
                        {
                            <span>Only active games</span>
                        }
                        else
                        {
                            <span>All games</span>
                        }
                    </button>
                    <ul class="dropdown-menu">
                        @if (Client.FetchActiveGamesOnly)
                        {
                            <li><a class="dropdown-item" href="#" @onclick="@(_ => Client.FetchActiveGamesOnly = false)">All games</a></li>
                        }
                        else
                        {
                            <li><a class="dropdown-item" href="#" @onclick="@(_ => Client.FetchActiveGamesOnly = true)">Only active games</a></li>
                        }
                    </ul>
                </div>                
            </div>
        </div>
    </div>
    <div class="card-body">

        @if (!Client.RunningGamesWithoutOpenSeats.Any() && !Client.RunningGamesWithOpenSeats.Any() && !Client.ScheduledGames.Any())
        {
            <div class="text-info">No games...</div>
        }
        else
        {
            if (Client.RunningGamesWithOpenSeats.Any())
            {
                <div class="text-info">Games with open seats (that you can join)</div>
                <table class="table table-sm">
                    <tbody>
                    @foreach (var av in Client.RunningGamesWithOpenSeats)
                    {
                        _joinGamePassword.TryAdd(av.GameId, "");
                        JoinErrors.TryAdd(av.GameId, "");

                        var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                        <tr class="small table-dark">
                            <td class="w-20" style="@fontColorStyle">
                                <span style="font: normal normal normal 14px Advokat, Calibri, Tahoma, sans-serif;">@av.Name</span>
                            </td>
                            <td style="@fontColorStyle">
                                @if (av.Phase == Phase.AwaitingPlayers)
                                {
                                    <div>
                                        @Name(av.Ruleset), @av.NrOfPlayers of @av.MaxPlayers players, @av.MaxTurns turns
                                    </div>
                                }
                                else
                                {
                                    var factions = av.FactionsInPlay ?? [];
                                    <div>@Name(av.Ruleset), Turn @av.Turn: @Name(av.MainPhase)
                                        <br>
                                        @foreach (var f in factions.Where(f => f != Faction.None))
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                        @NumberOfBotsMessage(av)
                                    </div>
                                }
                            </td>
                            <td class="w-30">
                                @if (!av.YouAreIn)
                                {
                                    if (av.HasPassword)
                                    {
                                        <input class="form-inline input-sm m-1" style="max-width:120px" @bind="_joinGamePassword[av.GameId]" maxlength="24" placeholder="Game password"/>
                                    }

                                    <CommandButton Small OnClick="@(_ => JoinGameAsObserver(av.GameId, _joinGamePassword[av.GameId]))" MarginClass="m-1">Observe</CommandButton>

                                    @if (av.Phase == Phase.AwaitingPlayers)
                                    {
                                        <CommandButton Small OnClick="@(_ => JoinGameAsPlayer(av.GameId, _joinGamePassword[av.GameId], -1))" MarginClass="m-1">Join</CommandButton>
                                    }
                                    else if (av.Phase != Phase.SelectingFactions)
                                    {
                                        foreach (var availableSeat in av.AvailableSeats)
                                        {
                                            <FactionComponent Faction="@availableSeat.Faction" Diameter="20" OnClick="@(_ => JoinGameAsPlayer(av.GameId, _joinGamePassword[av.GameId], availableSeat.Seat))" Title="@JoinButtonTitle(availableSeat.Faction)"/>
                                        }
                                    }
                                }
                                else
                                {
                                    <CommandButton Small OnClick="@(_ => JoinGameAsPlayer(av.GameId, string.Empty, av.YourCurrentSeat))" MarginClass="m-1">Resume</CommandButton>
                                }
                                <div class="text-danger">@JoinErrors[av.GameId]</div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            if (Client.ScheduledGames.Any())
            {
                <div class="text-info">Scheduled games</div>
                <table class="table table-sm">
                        <thead>
                        <tr class="small table-dark">
                            <th scope="col">Host</th>
                            <th scope="col">When</th>
                            <th scope="col">Game info</th>
                            <th scope="col">Subscribers</th>
                            <th scope="col">Join?</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var game in Client.ScheduledGames)
                        {
                            <tr class="small table-dark">
                                <td class="w-20">
                                    <span style="font: normal normal normal 14px Advokat, Calibri, Tahoma, sans-serif;">@game.CreatorPlayerName</span>
                                </td>
                                <td class="w-20">
                                    @game.DateTime.ToLocalTime().ToString("dd-MM HH:mm")
                                </td>
                                <td class="w-30">
                                    <div>@Name(game.Ruleset), @game.NumberOfPlayers players, @game.MaximumTurns turns
                                        @if (game.AllowedFactionsInPlay.Count == 12)
                                        {
                                            <span>(all factions)</span>
                                        }
                                        else
                                        {
                                            @foreach (var f in game.AllowedFactionsInPlay)
                                            {
                                                <Image Shown="f" Width="20" Shadow=""/>
                                            }
                                        }
                                    </div>
                                </td>
                                <td class="w-25">
                                    @foreach (var p in game.SubscribedUsers.Where(u => u.Value != SubscriptionType.DontParticipate))
                                    {
                                        var userInfo = Client.GetUserInfo(p.Key);
                                        <div class="me-1">
                                            @if (userInfo != null)
                                            {
                                                <span style="font: normal normal normal 14px Advokat, Calibri, Tahoma, sans-serif;">@userInfo.PlayerName</span>
                                            }
                                            else
                                            {
                                                <UserIcon Title="Offline player"/>
                                            }
                                            <span class="badge text-bg-primary ms-1">@Name(p.Value)</span>
                                        </div>
                                    }                                    
                                </td>
                                <td class="w-5">
                                    <SubscribeComponent ScheduledGame="@game"/>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
            }
            if (Client.RunningGamesWithoutOpenSeats.Any())
            {
                <div class="text-info">Games without open seats</div>
                <table class="table table-sm">
                    <tbody>

                    @foreach (var av in Client.RunningGamesWithoutOpenSeats)
                    {
                        _joinGamePassword.TryAdd(av.GameId, "");
                        JoinErrors.TryAdd(av.GameId, "");

                        var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";

                        <tr class="small table-dark">
                            <td class="w-25" style="@fontColorStyle">
                                <span style="font: normal normal normal 14px Advokat, Calibri, Tahoma, sans-serif;">@av.Name</span>
                            </td>
                            <td style="@fontColorStyle">
                                @if (av.Phase == Phase.AwaitingPlayers)
                                {
                                    <div>
                                        @Name(av.Ruleset), @av.NrOfPlayers of @av.MaxPlayers players, @av.MaxTurns turns
                                    </div>
                                }
                                else
                                {
                                    var factions = av.FactionsInPlay ?? [];
                                    <div>@Name(av.Ruleset), Turn @av.Turn: @Name(av.MainPhase)
                                        <br>
                                        @foreach (var f in factions.Where(f => f != Faction.None))
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                        @NumberOfBotsMessage(av)
                                    </div>
                                }
                            </td>
                            <td class="w-25">
                                @if (!av.YouAreIn)
                                {
                                    if (av.HasPassword)
                                    {
                                        <input class="form-inline input-sm m-1" style="max-width:120px" @bind="_joinGamePassword[av.GameId]" maxlength="24" placeholder="Game password"/>
                                    }

                                    <CommandButton Small OnClick="@(_ => JoinGameAsObserver(av.GameId, _joinGamePassword[av.GameId]))" MarginClass="m-1">Observe</CommandButton>
                                }
                                else
                                {
                                    <CommandButton Small OnClick="@(_ => JoinGameAsPlayer(av.GameId, string.Empty, av.YourCurrentSeat))" MarginClass="m-1">Resume</CommandButton>
                                }
                                <div class="text-danger">@JoinErrors[av.GameId]</div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

@code {

    private Dictionary<string, string> JoinErrors { get; } = new();
    private readonly Dictionary<string, string> _joinGamePassword = [];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartRedrawCycle(3200);
        }
    }

    private async Task JoinGameAsPlayer(string gameId, string password, int seat)
    {
        JoinErrors[gameId] = await Client.RequestJoinGame(gameId, password, seat);
    }

    private async Task JoinGameAsObserver(string gameId, string password)
    {
        JoinErrors[gameId] = await Client.RequestObserveGame(gameId, password);
    }

    private static string NumberOfBotsMessage(GameInfo av)
    {
        return av.NrOfBots switch
        {
            1 => $" ({av.NrOfPlayers} players, 1 bot)",
            > 1 => $" ({av.NrOfPlayers} players, {av.NrOfBots} bots)",
            _ => $" ({av.NrOfPlayers} players)"
        };
    }

    private string JoinButtonTitle(Faction faction) => $"Join as {Name(faction)}";


}
