@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@inherits GameComponent;

<div class="card border-none" style="background-color:@BackgroundColor;border:none;">

    <div class="card-header">Chat</div>
    
    <div class="card-body">

        <div class="d-flex flex-row-reverse">

            <input @bind-value="message" class="form-control" type="text" maxlength="512" placeholder="@Placeholder" @onkeyup="@(KeyUp)"/>

        </div>

        <div class="d-flex flex-row-reverse mt-1">

            <button class="btn btn-primary" @onclick="e => Send()">Send</button>

            @if (ShowGameChat)
            {
                <select class="form-select" style="color:@SelectedFactionForegroundColor;background-color:@SelectedFactionColor" @bind="@selectedPlayerName">

                    @if (!Client.MuteGlobalChat)
                    {
                        <option style="color:lightcoral;font-weight:bold;background-color:white" value="@LabelGlobalChat">@LabelGlobalChat</option>
                    }

                    <option style="color:red;font-weight:bold;background-color:white" value="@LabelAllPlayersInGame">@LabelAllPlayersInGame</option>

                    @foreach (var p in Game.Players.Where(p => p != Client.Player))
                    {
                        var name = Game.GetPlayerName(p);
                        <option style="color:@Client.CurrentSkin.GetFactionColor(p.Faction);background-color:white" value="@name">@name</option>
                    }

                </select>
            }
            else
            {
                selectedPlayerName = LabelGlobalChat;
            }

        </div>

        @foreach (var m in Client.Messages.Where(msg => !Client.MuteGlobalChat || msg is not GlobalChatMessage))
        {
            var color = m switch
            {
                GameChatMessage gcm => Client.CurrentSkin.GetFactionColor(gcm.GetFaction(gcm.SourceUserId, Client.Game)),
                GlobalChatMessage => "grey",
                _ => "grey"
            };

            <div class='text-break p-1 mt-1 small' style="background-color:@color">
                <ExpressionComponent Game="@Game" Expression="@m.GetBodyIncludingPlayerInfo(Client.UserId, Client.RecentlySeenUsers, Client.Game, !Client.InGame).Expression" Size="20"/>
            </div>
        }

        @if (ShowGameChat)
        {
            <div class="mt-1" style="color:black">
                <CheckboxComponent @bind-Value="@Client.MuteGlobalChat">Hide global chat messages</CheckboxComponent>
            </div>
        }

        </div>

</div>

@code {

    [Parameter]
    public string BackgroundColor { get; set; } = "transparent";

    private const string LabelGlobalChat = "all on server";
    private const string LabelAllPlayersInGame = "all in game";

    private string message;
    private string selectedPlayerName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        if (ShowGameChat)
        {
            var firstChatTarget = Game.Players.FirstOrDefault(p => p != Client.Player);
            selectedPlayerName = firstChatTarget != null ? Game.GetPlayerName(firstChatTarget) : LabelAllPlayersInGame;
        }
        else
        {
            selectedPlayerName = LabelGlobalChat;
        }
    }

    private async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        await SendMessage(message, selectedPlayerName);
        message = "";
    }

    private async Task SendMessage(string msg, string target)
    {
        if (target == LabelGlobalChat)
        {
            await Client.SendGlobalChatMessage(new GlobalChatMessage
            {
                SourceUserId = Client.UserId,
                Body = msg
            });
        }
        else {

            var targetUserId = target is LabelGlobalChat or LabelAllPlayersInGame ? -1 : Client.Game.GetUserIdByName(target);
            await Client.SendChatMessage(new GameChatMessage
            {
                SourceUserId = Client.UserId,
                TargetUserId = targetUserId,
                Body = msg
            });
        }
    }

    private string Placeholder => "Chat to " + selectedPlayerName + "...";

    private string SelectedFactionColor
    {
        get
        {
            if (Game.CurrentPhase < Phase.SelectingFactions)
                return "white";

            var p = Client.Game.GetPlayerByName(selectedPlayerName);
            return p != null ? Client.CurrentSkin.GetFactionColor(p.Faction) : "red";
        }
    }

    private string SelectedFactionForegroundColor => Client.Faction == Faction.None ? "black" : "white";
    

    private bool ShowGameChat => Client.InGame && !Client.IsObserver;
}

