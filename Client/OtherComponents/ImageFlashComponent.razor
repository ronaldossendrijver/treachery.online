@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent;

@if (Client.Game != null && Client.Status != null && Time > 0)
{
    <div style="position:absolute;left:@Support.Px(WindowX);top:@Support.Px(WindowY);width:@Support.Px(FlashWidth);overflow:hidden;animation:fadeInFadeOut @(Time)ms;z-index:1000;" @onclick=@Hide>

        @foreach (var img in Client.Status.FlashInfo)
        {
            <div style="float:left;position:relative;top:0px;display:inline-block;vertical-align:top;width:@Support.Px(ItemWidth)">

                <img src="@Client.CurrentSkin.GetImageUrl(img.ToShow)" width=@CardWidth style="filter:drop-shadow(2px 2px 2px black);" alt="@Name(img.ToShow)"/>

                @if (img.Message != null)
                {
                    <div style="@MsgStyle"><ExpressionComponent Game=Game Expression=@img.Message.Expression Size=24 TextBorder=@Support.TextBorder(2, "black")/></div>
                }

            </div>
        }

    </div>
}

@code {

    public const float SPACING_X = 1.1f;
    private int WindowX = 0;
    private int WindowY = 0;
    private int FlashWidth = 500;
    private int CardWidth = 100;
    private int Time = 0;
    private int afterEventId = -1;
    private Dimensions dimensions = new() { Width = 640, Height = 480 };

    private void ApplyDimensions()
    {
        var nrOfItems = Client.Status != null ? Client.Status.FlashInfo.Count() : 0;
        
        if (dimensions.Height > dimensions.Width)
        {
            //phone-like screen

            CardWidth = (int)(0.3f * dimensions.Width);

            if (nrOfItems <= 3)
            {
                WindowY = (int)(0.5f * (dimensions.Height - 1.41f * CardWidth));
            }
            else
            {
                WindowY = (int)(0.5f * (dimensions.Height - 2 * 1.41f * CardWidth));
            }
        }
        else
        {
            CardWidth = (int)(0.15f * dimensions.Width);

            if (nrOfItems <= 4)
            {
                WindowY = (int)(0.5f * (dimensions.Height - 1.41f * CardWidth));
            }
            else
            {
                WindowY = (int)(0.5f * (dimensions.Height - 2 * 1.41f * CardWidth));
            }
        }

        FlashWidth = nrOfItems * (ItemWidth + 20);
        WindowX = (int)(0.5f * (dimensions.Width - FlashWidth));

        if (Client.Game.EventCount != afterEventId)
        {
            afterEventId = Client.Game.EventCount;

            if (Client.Status != null && Client.Status.FlashInfo.Any())
            {
                Time = 5000 + Client.Status.FlashInfo.Count() * 1000;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstDraw)
    {
        if (firstDraw)
        {
            dimensions = await Browser.GetWindowDimensions();
            ApplyDimensions();
            StateHasChanged();
            return;
        }
        
        if (Time > 0)
        {
            await Task.Delay(Time).ContinueWith(e => Hide());
        }
    }

    private void Hide()
    {
        Time = 0;
        StateHasChanged();
    }

    private string MsgStyle =>
        string.Format("width:{0};font:normal normal normal 24px Advokat, Calibri, Tahoma, sans-serif;color:white;text-align:center;", Support.Px(CardWidth));

    private int ItemWidth => (int)(SPACING_X * CardWidth);
}

