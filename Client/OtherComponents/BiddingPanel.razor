@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<BidType>
@typeparam BidType

<div class="card p-1 mb-2 border-white" style="animation:fadeIn 1s;">

    <div class="card-body">

        <div class="row">

            <div class="col align-top" style="flex:0 0 150px">

                @if (CardIsVisible) 
                {
                    <Image Shown=@Game.CardsOnAuction.Top Width=150 />
                }
                else 
                {
                    <img src="@Client.CurrentSkin.CardBack_TreacheryCard_URL" width="150" />
                }

                <div style="position: absolute; top: 80px; left: 5px; width: 180px; text-align: center; filter:drop-shadow(2px 2px 2px black)">

                    <div style="@AuctionDescriptionStyle">
                        @AuctionDescription
                    </div>
                            
                    @if (ShowCurrentBid)
                    {
                        <img src="@Client.CurrentSkin.GetImageUrl(Game.CurrentBid.Initiator)" width="36" style="vertical-align: top;" />
                        <NumberComponent Value="Game.CurrentBid.TotalAmount" Size="36" SymbolSRC="@Client.CurrentSkin.Harvester_URL" SymbolBackgroundFillColor="white" SymbolBackgroundBorderColor="#FF5400" NumberAlignment="NumberAlignment.Center" />
                    }
                </div>

            </div>

            <div class="col align-top">

                @if (!Client.IsObserver && Client.Player.Faction != Faction.None)
                {
                    <CheckboxComponent @bind-Value="@Client.AutoPass" OnChanged="AutoPassChanged">Auto-pass</CheckboxComponent>
                    @if (Client.AutoPass)
                    {
                        <SelectResourcesComponent @bind-Value="@Client.BidAutoPassThreshold" Min="0" Max="50" Label="When above:" />

                        @if (ShowRepeatAutoPass)
                        {
                            <CheckboxComponent @bind-Value="@Client.KeepAutoPassSetting">Repeat auto-pass every round</CheckboxComponent>
                        }
                    }

                    @if (CanBid)
                    {
                        <hr style="border-color:white" />
                    }
                }

                @if (CanBid)
                {
                    if (CanUseRedSecretAlly)
                    {
                        <CheckboxComponent @bind-Value=@useRedSecretAlly>Use your Nexus card to get this card for free?</CheckboxComponent>
                    }
                    else
                    {
                        useRedSecretAlly = false;
                    }

                    if (CanUseKarma)
                    {
                        <div class="mt-1">
                            <SelectFromImageComponent @bind-Value="karmaCard" Values="Bid.ValidKarmaCards(Game, Player)" Required="false" ImageWidth="80">
                                <Label>Use @Client.CurrentSkin.Describe(TreacheryCardType.Karma) to bid without limit or win immediately? <InfoComponent Contents="@KarmaInfoMessage" /></Label>
                            </SelectFromImageComponent>
                        </div>
                    }
                    else
                    {
                        karmaCard = null;
                    }

                    <div class="mt-1">

                        @if (Player.Ally != Faction.None && MaxAllyBidAmount > 0)
                        {
                            <SelectResourcesFromFactionComponent @bind-Value="amount" Min="0" Max="MaxBidAmount" Faction="Faction" />
                            <SelectResourcesFromFactionComponent @bind-Value="allyContributionAmount" Min="0" Max="MaxAllyBidAmount" Faction="Player.Ally" />
                        }
                        else
                        {
                            <SelectResourcesComponent @bind-Value="amount" Min="0" Max="MaxBidAmount" />
                            allyContributionAmount = 0;
                        }

                        @if (Game.SpiceForBidsRedCanPay(Faction) > 0)
                        {
                            <SelectResourcesFromFactionComponent @bind-Value="redContributionAmount" Min="0" Max="Game.SpiceForBidsRedCanPay(Faction)" Faction="Faction.Red" />
                        }

                    </div>

                    @if (IsSilentAuction)
                    {
                        @if (karmaCard != null)
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                        }
                        else
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Alignment="justify-content-start" />
                        }
                    }
                    else
                    {
                        @if (karmaCard != null)
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Pass="Pass" PassText="Pass" Other="Other" OtherText="Win immediately" Alignment="justify-content-start" />
                        }
                        else
                        {
                            <ButtonRowComponent Confirm="Confirm" ConfirmText="@BidLabel" ConfirmError=@Validation Pass="Pass" PassText="Pass" Alignment="justify-content-start" />
                        }
                    }
                }

            </div>

        </div>

    </div>

</div>


@code {

    protected override bool IsUrgent => true;

    protected int amount;
    protected int allyContributionAmount;
    protected int redContributionAmount;
    protected TreacheryCard karmaCard;
    protected bool useRedSecretAlly;

    private bool _canBid;

    [Parameter]
    public bool CanBid { get; set; }

    private string BidLabel => "Bid " + (amount + allyContributionAmount + redContributionAmount);

    private void AutoPassChanged(bool value)
    {
        if (value && Client.BidAutoPassThreshold > Player.Resources)
        {
            Client.BidAutoPassThreshold = Math.Min(Player.Resources, 5);
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!_canBid && CanBid)
        {
            if ((Game.CurrentBid != null && Client.AutoPass && Game.CurrentBid.TotalAmount + 1 > Client.BidAutoPassThreshold) ||
                (Game.CurrentBid == null && Client.AutoPass && Client.BidAutoPassThreshold == 0))
                {
                _ = Task.Delay(800 + Random.Shared.Next(1600)).ContinueWith(e => AutoPass());
            }
        }

        _canBid = CanBid;

        if (!IsSilentAuction)
        {
            var allyResources = Player.Ally == Faction.None ? 0 : Game.GetPermittedUseOfAllyResources(Faction);
            var playerResources = Player.Resources;
            var bidToDo = Game.CurrentBid != null ? Game.CurrentBid.TotalAmount + 1 : 1;
            allyContributionAmount = Math.Min(bidToDo, allyResources);
            amount = Math.Min(bidToDo - allyContributionAmount, playerResources);
        }

        await StartTimerCycleAsync(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ResetAutopassThreshold();
    }

    protected override async Task CycleAsync()
    {
        if (Client.Status.TimedEvent != null && Client.Timer > 0 && DateTimeOffset.Now.Subtract(Client.Status.TimedEvent.Time).TotalSeconds > Client.Timer)
        {
            await Pass();
        }
    }

    private async Task AutoPass()
    {
        if (CanBid && Client.AutoPass)
        {
            await Pass();
        }
    }

    private void ResetAutopassThreshold()
    {
        if (Game.CurrentMainPhase == MainPhase.Bidding && Game.RecentMilestones.Contains(Milestone.AuctionWon) && (!Client.KeepAutoPassSetting || Game.CurrentPhase == Phase.BiddingReport))
        {
            Client.AutoPass = false;
        }
    }

    private bool IsWhiteBidding => Game.CurrentAuctionType == AuctionType.WhiteOnceAround || Game.CurrentAuctionType == AuctionType.WhiteSilent; 

    private bool CardIsVisible => (Game.HasBiddingPrescience(Player) || IsWhiteBidding) && Game.CardsOnAuction.Top != null;

    private string KarmaInfoMessage => Client.CurrentSkin.Format("If you use a {0} card to bid any amount of {1} you wish, that card will be set aside until someone outbids you and will be discarded only if you win the auction. If you instead use your {0} card to win immediately, it is immediately discarded.", TreacheryCardType.Karma, Concept.Resource);

    private bool ShowCurrentBid => !IsSilentAuction && Game.CurrentBid != null;

    private bool IsSilentAuction => Game.CurrentAuctionType == AuctionType.BlackMarketSilent || Game.CurrentAuctionType == AuctionType.WhiteSilent;

    private string AuctionDescriptionStyle => string.Format("font-size: 22px; font-weight: bold; {0}", Support.TextBorder(2, "black"));
}
