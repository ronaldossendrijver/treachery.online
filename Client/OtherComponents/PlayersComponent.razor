@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card p-1 mb-2">
    <div class="card-body">
        @if (Game.CurrentPhase is Phase.AwaitingPlayers)
        {
            foreach (var userId in Game.Participation.StandingPlayers)
            {
                var isMe = Client.UserId == userId;
                var isHost = Game.IsHost(userId);
                var emphasis = isMe ? "fw-bold" : string.Empty;
                
                <div style="border-bottom: 1px solid darkgrey; min-height: 2rem;">
                    <span class="@emphasis">
                        @Game.GetPlayerName(userId)
                    </span>
                    @if (isHost)
                    {
                        <HostIcon/>
                    }
                    @if (Client.IsHost)
                    {
                        if (isHost && Game.NumberOfHosts > 1)
                        {
                            <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => SetOrUnsetHost(userId))">Unmake host</button>
                        }
                        else if (!isHost)
                        {
                            <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => SetOrUnsetHost(userId))">Make host</button>
                        }
                        if (!isMe)
                        {
                            <button class="btn btn-danger btn-sm m-1" @onclick="@(_ => Remove(userId, true))">Kick</button>
                        }
                    }
                </div>
            }
        }
        else
        {
            foreach (var player in Game.Players.OrderBy(p => p.Seat))
            {
                var userId = Game.GetUserIdOfPlayer(player);
                var makeAvailableText = Game.SeatIsAvailable(player.Seat) ? "Close" : "Open";
                var isMe = Client.UserId == userId;
                var isHost = Game.IsHost(userId);
                
                <div style="border-bottom: 1px solid darkgrey; min-height: 2rem;">
                    <FactionComponent Faction="@player.Faction" Diameter="20"/>
                    @if (Game.IsBot(player))
                    {
                        <BotIcon/>
                    }
                    else
                    {
                        var emphasis = isMe ? "fw-bold" : string.Empty;
                        <span class="m-1 @emphasis">@Game.GetPlayerName(player)</span>
                    }
                    @if (isHost)
                    {
                        <HostIcon/>
                    }
                    @if (Game.SeatIsAvailable(player.Seat))
                    {
                        <span class="badge text-bg-success">open</span>
                    }
                    @if (Client.IsHost)
                    {
                        <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => OpenSeat(player.Seat))">@makeAvailableText seat</button>
                        @if (!Game.IsBot(player))
                        {
                            if (!isMe)
                            {
                                <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => Remove(userId, true))">Kick</button>
                            }
                            if (isHost && Game.NumberOfHosts > 1)
                            {
                                <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => SetOrUnsetHost(userId))">Unmake host</button>
                            }
                            else if (!isHost)
                            {
                                <button class="btn btn-primary btn-sm m-1" @onclick="@(_ => SetOrUnsetHost(userId))">Make host</button>
                            }
                        }
                        <br>
                    }
                </div>
            }
        }
        <button class="btn btn-danger btn-sm m-1" @onclick="@(_ => Remove(Client.UserId, false))">Leave game</button>
        <div class="text-danger">@ActionResult</div>
    </div>
</div>

@code {

    private string ActionResult { get; set; } = string.Empty;
    
    private async Task Remove(int userId, bool kick)
    {
        if (kick)
        {
            ActionResult = await Client.RequestKick(userId);
        }
        else
        {
            await Client.RequestLeaveGame();
            ActionResult = string.Empty;
        }
    }

    private async Task SetOrUnsetHost(int userId)
    {
        ActionResult = await Client.RequestSetOrUnsetHost(userId);
    }

    private async Task OpenSeat(int seatId)
    {
        ActionResult = await Client.RequestOpenOrCloseSeat(seatId);
    }
}
