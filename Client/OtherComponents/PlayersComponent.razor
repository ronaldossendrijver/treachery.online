@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card p-1 mb-2">
    <div class="card-body">
        <table class="table table-sm">
            @if (Game.CurrentPhase is Phase.AwaitingPlayers)
            {
                <thead>
                    <tr class="table-dark">
                        <th scope="col">Player</th>
                        <th scope="col">Host?</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                @foreach (var userId in Game.Participation.StandingPlayers)
                {
                    var setOrUnsetHostText = Game.IsHost(userId) ? "Revoke Host" : "Promote to Host";
                    var kick = userId != Client.UserId;
                        
                    <tr class="table-dark">
                        <td>
                            @Game.GetPlayerName(userId)
                        </td>
                        <td>@(Game.IsHost(userId)? "\u2713" : "")</td>
                        <td>
                            @if (Client.IsHost)
                            {
                                if (Client.UserId != userId)
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => Remove(userId, true))">Kick</button>    
                                }
                                <button class="btn btn-primary btn-sm" @onclick="@(_ => SetOrUnsetHost(userId))">@setOrUnsetHostText</button>
                            }
                            <button class="btn btn-primary btn-sm" @onclick="@(_ => Remove(userId, false))">Leave</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <thead>
                <tr class="table-dark">
                    <th scope="col">Player</th>
                    <th scope="col">Faction</th>
                    <th scope="col">Host?</th>
                    <th scope="col">Open?</th>
                    <th scope="col">Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var player in Game.Players.OrderBy(p => p.Seat))
                {
                    var userId = Game.GetUserIdOfPlayer(player);
                    var setOrUnsetHostText = Game.IsHost(userId) ? "Revoke Host" : "Promote to Host";
                    var makeAvailableText = Game.SeatIsAvailable(player.Seat) ? "Don't open" : "Open";

                    <tr class="table-dark">
                        <td>
                            @if (Game.IsBot(player))
                            {
                                <span style="font-style:italic;color:lightblue;">Bot</span>
                            }
                            else
                            {
                                <span>@Game.GetPlayerName(player)</span>
                            }
                        </td>
                        <td><FactionComponent Faction="@player.Faction" Diameter="20"/></td>
                        <td>@(Game.IsHost(userId) ? "\u2713" : "")</td>
                        <td>@(Game.SeatIsAvailable(player.Seat) ? "\u2713" : "")</td>
                        <td>                        
                            @if (Client.IsHost)
                            {
                                <button class="btn btn-primary btn-sm" @onclick="@(_ => OpenSeat(player.Seat))">@makeAvailableText seat</button>
                                @if (!Game.IsBot(player))
                                {
                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => Remove(userId, true))">Kick</button>
                                    <button class="btn btn-primary btn-sm" @onclick="@(_ => SetOrUnsetHost(userId))">@setOrUnsetHostText</button>
                                }
                                <br>
                            }
                            else
                            {
                                <button class="btn btn-primary btn-sm" @onclick="@(_ => Remove(userId, false))">Leave game</button>
                            }
                        </td>                   
                    </tr>
                }
                </tbody>
            }
        </table>
        <div class="text-danger">@ActionResult</div>
        @if (Client.IsHost && Client.Game.NumberOfBots > 0)
        {
            var pauseMessage = Client.Game.Participation.BotsArePaused ? "Unpause" : "Pause";
            <button class="btn btn-primary btn-sm" @onclick="@Client.RequestPauseBots">@pauseMessage Bots</button>
        }
    </div>
</div>

@code {

    private string ActionResult { get; set; } = string.Empty;
    
    private async Task Remove(int userId, bool kick)
    {
        if (kick)
        {
            ActionResult = await Client.RequestKick(userId);
        }
        else
        {
            await Client.RequestLeaveGame();
            ActionResult = string.Empty;
        }
    }

    private async Task SetOrUnsetHost(int userId)
    {
        ActionResult = await Client.RequestSetOrUnsetHost(userId);
    }

    private async Task OpenSeat(int seatId)
    {
        ActionResult = await Client.RequestOpenOrCloseSeat(seatId);
    }
}
