@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

@{
    var messages = MessagesInOrder.ToList();

    <div class="card border-light pb-1" style="animation:fadeIn 1s;">

        <div class="card-header text-center">

            @Client.CurrentSkin.Describe(Client.Game.CurrentReport.About) Report &nbsp;

            @if (SortDescending)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-up" viewBox="0 0 16 16" @onclick=@ChangeSortOrder style="cursor:pointer">
                    <title>Sort Descending (latest event first)</title>
                    <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707V12.5zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z" />
                </svg>               
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-down" viewBox="0 0 16 16" @onclick=@ChangeSortOrder style="cursor:pointer">
                    <title>Sort Ascending (latest event last)</title>
                    <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z" />
                </svg>
            }

         </div>

        <div class="card-body p-1 overflow-auto">

            @if (messages.Any())
            {
                foreach (var message in MessagesInOrder)
                {
                    <div style="@FontStyle(message)">
                        <ExpressionComponent Expression=message.Expression Game=Game Size=20/>
                    </div>
                }
            }
            else
            {
                <div class="mt-1 ps-1 pe-1"><i>Nothing to report</i></div>
            }

        </div>

    </div>
}

@code {

    [Parameter]
    public Report Report { get; set; }

    public bool SortDescending { get; set; } = false;

    private string FontStyle(Message m)
    {
        return m.Target == Faction.None ? "" : "font-style: italic;";
    }

    private IEnumerable<Message> MessagesInOrder {

        get {

            var messagesAscending = Report.Messages.Where(m => m.Target == Faction.None || m.Target == Client.Faction);

            if (SortDescending)
            {
                return messagesAscending.OrderByDescending(m => m.Nr);
            }

            return messagesAscending;
        }
    }

    private void ChangeSortOrder()
    {
        SortDescending = !SortDescending;
    }
}
