@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<CardPickerComponent Tracker="this" Id="picker" />

<div class="card mb-2" style="animation:fadeIn 1s;">

    <div class="card-header" @onclick="@(e => _collapsed = !_collapsed)" style="cursor:pointer">
        Card Tracker
        <InfoComponent Contents="@InfoMessage" />
        <CollapseButton Collapsed="@_collapsed" />
    </div>

    @if (!_collapsed) {
        <div @ref=@element class="card-body">

            <div class="mb-1">

                @foreach (var p in Players)
                {
                    <button class="btn @ButtonStyle(p) p-1" @onclick="e => Toggle(p)" data-bs-toggle="tooltip" title="@Client.CurrentSkin.Describe(p.Faction)">
                        <img class="img-fluid" width="29" height="29" src="@Client.CurrentSkin.GetFactionTableImageURL(p.Faction)" />
                    </button>
                }

                <button class="btn @ButtonStyle(Client.Game.TreacheryDiscardPile) p-1" @onclick="e => Toggle(Client.Game.TreacheryDiscardPile)" data-bs-toggle="tooltip" title="Discarded Treachery Cards">
                    <img class="img-fluid ms-1 me-1" width="21" height="29" src="@Client.CurrentSkin.CardBack_TreacheryCard_URL" />
                </button>

                <button class="btn @ButtonStyle(Client.Game.ResourceCardDeck) p-1" @onclick="e => Toggle(Client.Game.ResourceCardDeck)" data-bs-toggle="tooltip" title="Discarded Spice Cards">
                    <img class="img-fluid ms-1 me-1" width="21" height="29" src="@Client.CurrentSkin.CardBack_ResourceCard_URL" />
                </button>

            </div>

            @if (Shown is Player)
            {
                var p = (Player)Shown;

                <div>Treachery cards</div>
                <div class="row row-cols-4 m-0">

                    @for (var i = 0; i < p.MaximumNumberOfCards; i++)
                    {
                        var selIndex = i;
                        var cardId = Info.TrackedTreacheryCards[p.Faction][selIndex];

                        <a class="btn btn-link p-1" data-bs-toggle="modal" data-bs-target="#picker" @onmousedown="e => InitiatePick(p.Faction, selIndex)" title=@DeterminePopup(Info.TrackedTreacheryCards[p.Faction][selIndex])>
                            @if (cardId == TreacheryCard.None)
                            {
                                <svg class="img-fluid w-100" viewBox="0 0 268 372" xmlns="http://www.w3.org/2000/svg">
                                    <rect width="268" height="372" rx="20" style="fill:rgb(64,64,64);stroke-width:3;stroke:rgb(200,200,200)" />
                                </svg>
                            }
                            else if (cardId == TreacheryCard.Unknown)
                            {
                                <img src="@Client.CurrentSkin.CardBack_TreacheryCard_URL" class="img-fluid" />
                            }
                            else
                            {
                                var card = TreacheryCardManager.Lookup.Find(cardId);
                                <Image Shown=card Class="img-fluid" Style="cursor:pointer"/>
                            }
                        </a>
                    }

                </div>

                @if (p.Faction == Faction.Green)
                {
                    <div>Traitors discarded at start</div>
                    <PickFromImageComponent Value=@GetDiscardedTraitor(0) T=IHero OnChanged=@(hero => SetDiscardedTraitor(0, hero)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors"/>
                    <PickFromImageComponent Value=@GetDiscardedTraitor(1) T=IHero OnChanged=@(hero => SetDiscardedTraitor(1, hero)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors"/>
                    <PickFromImageComponent Value=@GetDiscardedTraitor(2) T=IHero OnChanged=@(hero => SetDiscardedTraitor(2, hero)) Title="Select Discarded Traitor" Required=false ImageWidth=60 Values="AllTraitors"/>
                }
                else if (p.Faction != Faction.Purple)
                {
                    <div>Revealed @(p.NumberOfTraitors > 1 ? "Traitors" : "Traitor")</div>
                    @for (var i = 0; i < p.NumberOfTraitors; i++)
                    {
                        var selIndex = i;
                        var faction = p.Faction;
                        <PickFromImageComponent Value=@GetSelectedTraitor(faction, selIndex) T=IHero OnChanged=@(hero => SetSelectedTraitor(faction, selIndex, hero)) Title="Select Revealed Traitor" Required=false ImageWidth=60 Values="AllTraitors"/>
                    }
                }
                else
                {
                    <div>Revealed Face Dancers</div>
                    @for (var i = 0; i < p.NumberOfFaceDancers; i++)
                    {
                        var selIndex = i;
                        var faction = p.Faction;
                        <PickFromImageComponent Value=@GetSelectedTraitor(faction, selIndex) T=IHero OnChanged=@(hero => SetSelectedTraitor(faction, selIndex, hero)) Title="Select Revealed Face Dancer" Required=false ImageWidth=60 Values="AllTraitors" />
                    }
                }
            }

            else if (Shown == Client.Game.TreacheryDiscardPile)
            {
                <ul class="list-inline mt-0">

                    @foreach (var c in Info.DiscardedCards.Union(Info.RemovedCards))
                    {
                        <li class="list-inline-item">

                            <p class="mb-0">
                                <RichText Shown=@c Class="badge bg-primary rounded-pill"/>
                                <button class="btn-close btn-sm" @onclick="@(e => SetNotDiscarded(c))"/>
                            </p>

                        </li>
                    }

                    @if (!Info.DiscardedCards.Any() && !Info.RemovedCards.Any())
                    {
                        <li class="list-inline-item text-info">No treachery cards discarded yet.</li>
                    }

                </ul>

                <button class="btn btn-primary btn-sm" @onclick="@Info.ClearDiscarded">Reshuffle (clear) discarded cards</button>
            }

            else if (Shown == Client.Game.ResourceCardDeck)
            {
                <div>Top @Client.CurrentSkin.Describe(Concept.Resource) Card</div>
                <PickFromImageComponent Value=SpiceCard(Info.TrackedSpiceCard) T=ResourceCard OnChanged=@(card => Info.TrackedSpiceCard = Client.CurrentSkin.Describe(card)) Title="Select Card" Required=false ImageWidth=60 Values="AllSpiceCards"/>

                if (Client.Game.Applicable(Rule.IncreasedResourceFlow))
                {
                    @if (Client.Game.ResourceCardDiscardPileA.Items.Any() || Client.Game.ResourceCardDiscardPileA.Items.Any())
                    {
                        <div class="small"><strong>Discard pile A:</strong> @Client.CurrentSkin.Join(Client.Game.ResourceCardDiscardPileA.Items)</div>
                        <div class="small"><strong>Discard pile B:</strong> @Client.CurrentSkin.Join(Client.Game.ResourceCardDiscardPileB.Items)</div>
                    }
                }
                else
                {
                    @if (Client.Game.ResourceCardDiscardPileA.Items.Any())
                    {
                        <div class="small"><strong>Discarded:</strong> @Client.CurrentSkin.Join(Client.Game.ResourceCardDiscardPileA.Items)</div>
                    }
                }
            }

        </div>
    }

</div>


@code {

    private object Shown = null;
    private int trackedGameId = -1;
    private GreenIntelligence Info = null;
    private bool popoversNeedUpdate = true;
    protected ElementReference element;
    private bool _collapsed = true;

    protected override async Task OnInitializedAsync()
    {
        Info = new GreenIntelligence(Client);

        try
        {
            await Load();
        }
        catch (Exception e)
        {
            Support.Log(e);
        }

        AllTraitors = Client.Game.TraitorsInPlay.OrderBy(l => Name(l)).ToList();
        AllSpiceCards = Game.ResourceCardDeck.Items.OrderBy(rc => Name(rc)).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (trackedGameId != Client.Game.Seed)
        {
            await Load();
            trackedGameId = Client.Game.Seed;
        }
        else
        {
            await Save();
        }

        if (popoversNeedUpdate)
        {
            popoversNeedUpdate = false;
            await Browser.RefreshPopovers(element);
        }
    }

    private IHero GetSelectedTraitor(Faction f, int nr)
    {
        return LeaderManager.HeroLookup.Find(Info.GetSelectedTraitor(f, nr));
    }

    private void SetSelectedTraitor(Faction f, int nr, IHero hero)
    {
        if (Shown is Player p && f == p.Faction)
        {
            Info.ChangeSelectedTraitor(f, nr, hero?.Id);
        }
    }

    private IHero GetDiscardedTraitor(int nr)
    {
        return LeaderManager.HeroLookup.Find(Info.GetDiscardedTraitor(nr));
    }

    private void SetDiscardedTraitor(int nr, IHero hero)
    {
        Info.ChangeDiscardedTraitor(nr, hero?.Id);
    }

    Faction currentlyPickedFaction = Faction.None;
    int currentlyPickedCardId;

    private void SetCurrent(Faction f, int i)
    {
        currentlyPickedFaction = f;
        currentlyPickedCardId = i;
    }

    private void InitiatePick(Faction f, int i)
    {
        SetCurrent(f, i);
        _ = Browser.RemovePopovers(element);
    }

    public int CurrentCard
    {
        get
        {
            if (currentlyPickedFaction != Faction.None)
            {
                return Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId];
            }

            return TreacheryCard.None;
        }
    }

    public void Pick(int cardID)
    {
        try
        {
            Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] = cardID;
            popoversNeedUpdate = true;
            StateHasChanged();
        }
        catch (Exception)
        {

        }
    }

    public void Discard()
    {
        try
        {
            if (Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] != TreacheryCard.None && Info.TrackedTreacheryCards[currentlyPickedFaction][currentlyPickedCardId] != TreacheryCard.Unknown)
            {
                Info.Discard(currentlyPickedFaction, currentlyPickedCardId);
                popoversNeedUpdate = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }

    public IEnumerable<TreacheryCard> CardsToPick => Info.AvailableDistinctCards(currentlyPickedFaction, currentlyPickedCardId);

    private void SetNotDiscarded(TreacheryCard c)
    {
        Info.SetNotDiscarded(c);
        popoversNeedUpdate = true;
        StateHasChanged();
    }

    public string DeterminePopup(int cardID)
    {
        if (cardID == -1)
        {
            return "Unknown";
        }

        if (cardID == -2)
        {
            return "None";
        }

        return "";
    }

    private string DetermineImageSrc(int cardID)
    {
        var card = TreacheryCardManager.Lookup.Find(cardID);
        return Client.CurrentSkin.GetImageUrl(card);
    }

    private async Task Save()
    {
        await Browser.SaveSetting(string.Format("treachery.online;currentgame;{0};trackerdata", Client.Game.Seed), Info.ToString());
    }

    private async Task Load()
    {
        var trackerdata = await Browser.LoadSetting<string>(string.Format("treachery.online;currentgame;{0};trackerdata", Client.Game.Seed));
        if (trackerdata != null && trackerdata != "")
        {
            Info = GreenIntelligence.Parse(Client, trackerdata);
            StateHasChanged();
        }
    }

    public class CardInfo
    {
        public Player Player;
        public int CardNumber;
        public int CardId;
    }

    private IList<IHero> AllTraitors { get; set; }

    private IList<ResourceCard> AllSpiceCards { get; set; }

    private ResourceCard SpiceCard(string name)
    {
        return AllSpiceCards.FirstOrDefault(c => Client.CurrentSkin.Describe(c) == name);
    }

    private IEnumerable<Player> Players => Client.Game.Players.OrderBy(p => Name(p.Faction));

    private string InfoMessage => Client.CurrentSkin.Format("Welcome to the {0} Tracker! Use it to take note of (discarded) traitors, the top spice card and treachery cards.<br>When a (possibly unknown) card is won, click on an empty card placeholder and select it.<br>To indicate that a card was discarded, click it and then select the 'trash can' which will move the card to the Discarded section. When an unknown card becomes known and discarded, select it first, then discard it.<br>When the discard pile is shuffled into a new draw pile, click 'reshuffle' to clear the Discarded section.<br>If you sent a card to the Discarded section by mistake, click on the X next to it.", Faction.Green);

    private void Toggle(object toShow)
    {
        if (toShow == Shown)
        {
            Shown = null;
        }
        else
        {
            Shown = toShow;
        }

        popoversNeedUpdate = true;
    }

    private string ButtonStyle(object o)
    {
        if (o == Shown)
        {
            return "btn-primary";
        }

        return "btn-outline-primary";
    }
}
