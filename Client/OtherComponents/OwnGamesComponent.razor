@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">Your games</div>
    
    <div class="card-body">
        <ul class="nav nav-tabs mb-2">
            <li class="nav-item">
                <button class="nav-link @GetActive(OwnGamesComponentState.List)" aria-current="page" @onclick="@(_ => State = OwnGamesComponentState.List)">Your games</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @GetActive(OwnGamesComponentState.Create)" @onclick="@(_ => State = OwnGamesComponentState.Create)">Create or load a game</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @GetActive(OwnGamesComponentState.Schedule)" @onclick="@(_ => State = OwnGamesComponentState.Schedule)">Schedule a game</button>
            </li>
        </ul>

        @switch (State)
        {
            case OwnGamesComponentState.List:
                var myGames = Client.RunningGames.Where(info => info.CreatorUserId == Client.UserId).OrderByDescending(av => av.LastAction).ToList();
                var myScheduledGames = Client.ScheduledGames.Where(info => info.CreatorUserId == Client.UserId).OrderByDescending(av => av.DateTime).ToList();
                if (!myGames.Any() && !myScheduledGames.Any())
                {
                    <div class="text-info mb-2">No games yet...</div>
                }

                if (myGames.Any())
                {
                    <div class="text-info mb-2">Active games</div>
                    <table class="table table-sm">
                        <thead>
                        <tr class="table-dark">
                            <th scope="col">Game info</th>
                            <th scope="col">Last action</th>
                            <th scope="col">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var av in myGames)
                        {
                            var fontColorStyle = av.LastAction != null && DateTimeOffset.Now.Subtract((DateTimeOffset)av.LastAction).TotalMinutes > 20 ? "color:grey" : "color:white";
                            var factions = av.FactionsInPlay ?? [];

                            <tr class="small table-dark">
                                <td class="w-50" style="@fontColorStyle">
                                    <div>@Name(av.Ruleset), Turn @av.CurrentTurn: @Name(av.CurrentMainPhase)
                                        <br>
                                        @foreach (var f in factions.Where(f => f != Faction.None))
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                    </div>
                                </td>
                                <td class="w-25">
                                    @av.LastAction?.DateTime
                                </td>
                                <td class="w-25">
                                    <CommandButton Small OnClick="@(_ => Close(av))">Close</CommandButton>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }

                if (myScheduledGames.Any())
                {
                    <div class="text-info mb-2">Scheduled games</div>
                    <table class="table table-sm">
                        <thead>
                        <tr class="table-dark">
                            <th scope="col">Game info</th>
                            <th scope="col">Subscribed players</th>
                            <th scope="col">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var game in myScheduledGames)
                        {
                            <tr class="small table-dark">
                                <td class="w-50">
                                    <div>@Name(game.Ruleset), max players: @game.NumberOfPlayers, max turns: @game.MaximumTurns
                                        <br>
                                        @foreach (var f in game.AllowedFactionsInPlay)
                                        {
                                            <Image Shown="f" Width="20" Shadow=""/>
                                        }
                                    </div>
                                </td>
                                <td class="w-25">
                                    @foreach (var p in game.SubscribedUsers.Where(u => u.Value != SubscriptionType.DontParticipate))
                                    {
                                        var userInfo = Client.GetUserInfo(p.Key);
                                        <div class="me-1">
                                            @if (userInfo != null)
                                            {
                                                <span>@(userInfo.PlayerName)</span>
                                            }
                                            else
                                            {
                                                <UserIcon Title="Offline player"/>
                                            }
                                            <span class="badge text-bg-primary">@Name(p.Value)</span>
                                        </div>
                                    }                                    
                                </td>
                                <td class="w-25">
                                    <CommandButton Small OnClick="@(_ => Cancel(game))">Cancel</CommandButton>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                break;
                
            case OwnGamesComponentState.Create:
                if (!Loading)
                {
                    <input type="text" class="form-control" @bind="@CreateGamePassword" maxlength="24" placeholder="Game password (optional)"/>
                    <div class="text-danger small">@CreateError</div>
                    <CommandButton MarginClass="mt-1" OnClick="@CreateNewGame">Create new game</CommandButton>
                    <label class="btn btn-primary mt-1">Load game from file
                        <input hidden type="file" id="fileInput" @ref="FileInput" @onchange="@LoadAndCreateGame"/>
                    </label>
                }
                else
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                break;
                
            case OwnGamesComponentState.Schedule:
                <DateTimePicker @bind-Value="@ScheduleGameDateTime"/>
                <SelectNumberComponent @bind-Value="@ScheduleGameNumberOfPlayers" Min="2" Max="EstablishPlayers.GetMaximumNumberOfPlayers()" Label="Number of players:"/>
                <SelectNumberComponent @bind-Value="@ScheduleGameMaximumTurns" Min="1" Max="EstablishPlayers.GetMaximumNumberOfTurns()" Label="Maximum number of turns:"/>
                <SelectFromImageComponent Selected="@ScheduleGameAllowedFactionsInPlay" Values="EstablishPlayers.AvailableFactions()" T="Faction" OnChanged="@StateHasChanged" ImageWidth="40" Required="false">
                    <Label>Factions in play:</Label>
                </SelectFromImageComponent>
                <SelectComponent @bind-Value="@ScheduleGameRuleset" Values="@Game.GetAvailableRulesets()">
                    <Label>Ruleset:</Label>
                </SelectComponent>
                <CheckboxComponent @bind-Value="@ScheduleGameAsyncPlay">Async play (send e-mail updates)</CheckboxComponent>
                <div class="text-danger small">@ScheduleError</div>
                <CommandButton MarginClass="mt-1" OnClick="@ScheduleGame">Schedule game</CommandButton>
                <a class="btn btn-dark btn-sm mt-1 p-2 text-start p-0 mt-0 mb-0" href="https://discord.gg/rRGEfn4" target="_blank" title="Find players on Dune Discord">
                    <svg style="margin-right:2px" width="18" height="18" viewBox="0 -28.5 256 256" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
                        <g>
                            <path d="M216.856339,16.5966031 C200.285002,8.84328665 182.566144,3.2084988 164.041564,0 C161.766523,4.11318106 159.108624,9.64549908 157.276099,14.0464379 C137.583995,11.0849896 118.072967,11.0849896 98.7430163,14.0464379 C96.9108417,9.64549908 94.1925838,4.11318106 91.8971895,0 C73.3526068,3.2084988 55.6133949,8.86399117 39.0420583,16.6376612 C5.61752293,67.146514 -3.4433191,116.400813 1.08711069,164.955721 C23.2560196,181.510915 44.7403634,191.567697 65.8621325,198.148576 C71.0772151,190.971126 75.7283628,183.341335 79.7352139,175.300261 C72.104019,172.400575 64.7949724,168.822202 57.8887866,164.667963 C59.7209612,163.310589 61.5131304,161.891452 63.2445898,160.431257 C105.36741,180.133187 151.134928,180.133187 192.754523,160.431257 C194.506336,161.891452 196.298154,163.310589 198.110326,164.667963 C191.183787,168.842556 183.854737,172.420929 176.223542,175.320965 C180.230393,183.341335 184.861538,190.991831 190.096624,198.16893 C211.238746,191.588051 232.743023,181.531619 254.911949,164.955721 C260.227747,108.668201 245.831087,59.8662432 216.856339,16.5966031 Z M85.4738752,135.09489 C72.8290281,135.09489 62.4592217,123.290155 62.4592217,108.914901 C62.4592217,94.5396472 72.607595,82.7145587 85.4738752,82.7145587 C98.3405064,82.7145587 108.709962,94.5189427 108.488529,108.914901 C108.508531,123.290155 98.3405064,135.09489 85.4738752,135.09489 Z M170.525237,135.09489 C157.88039,135.09489 147.510584,123.290155 147.510584,108.914901 C147.510584,94.5396472 157.658606,82.7145587 170.525237,82.7145587 C183.391518,82.7145587 193.761324,94.5189427 193.539891,108.914901 C193.539891,123.290155 183.391518,135.09489 170.525237,135.09489 Z" fill="white" fill-rule="nonzero"/>
                        </g>
                    </svg>
                    Find players on Dune Discord
                </a>                
                break;
            default:
                <div>Unknown menu option</div>
                break;
        }
    </div>
</div>

<div class="card mb-2 shadow-lg border-light" style="opacity:0.9;animation:fadeIn90 1s">
    <div class="card-header">Your account</div>
    <div class="card-body">
        <UserStatusComponent/>
        <div class="row">
            <label for="userName" class="col-4 col-form-label">Username</label>
            <div class="col-8">
                <input type="text" readonly class="form-control-plaintext" id="userName" value="@Client.UserName">
            </div>
        </div>
        @if (!EditUser)
        {
            <div class="row">
                <label for="playerName" class="col-4 col-form-label">Player name (in game)</label>
                <div class="col-8">
                    <input type="text" readonly class="form-control-plaintext" id="playerName" @bind="@PlayerName">
                </div>
            </div>
            <div class="row">
                <label for="email" class="col-4 col-form-label">E-mail address</label>
                <div class="col-8">
                    <input type="text" readonly class="form-control-plaintext" id="email" @bind="@Email">
                </div>
            </div>
            <button class="btn btn-primary me-1" @onclick="@EnterEdit">Change account info</button>
        }
        else
        {
            <div class="row">
                <label for="playerName" class="col-4 col-form-label">Player name (in game)</label>
                <div class="col-8">
                    <input type="text" class="form-control" id="playerName" @bind="@PlayerName">
                </div>
            </div>
            <div class="row">
                <label for="email" class="col-4 col-form-label">E-mail address</label>
                <div class="col-8">
                    <input type="text" class="form-control" id="email" @bind="@Email">
                </div>
            </div>
            <div class="row">
                <label for="password1" class="col-4 col-form-label">Password</label>
                <div class="col-8">
                    <input type="password" class="form-control" id="password1" autocomplete="new-password" @bind="@Password1">
                </div>
            </div>
            <div class="row">
                <label for="password2" class="col-4 col-form-label">Repeat password</label>
                <div class="col-8">
                    <input type="password" class="form-control" id="password2" autocomplete="new-password" @bind="@Password2">
                </div>
            </div>
            <div class="text-danger small">@ChangeUserInfoMessage</div>
            <button class="btn btn-secondary btn-sm me-1" @onclick="@CancelEdit">Cancel</button>
            <CommandButton OnClick="@ScheduleGame" Small>Apply changes</CommandButton>
        }
    </div>
</div>

@code {

    private OwnGamesComponentState State { get; set; } = OwnGamesComponentState.List;
    
    private const int MaxSaveGameSize = 4194304;

    private string CreateGamePassword { get; set; }
    private object FileInput { get; set; }
    private string CreateError { get; set; } = string.Empty;
    private bool Loading { get; set; } = false;
    private string LoadedGameData { get; set; }
    
    private DateTimeOffset ScheduleGameDateTime { get; set; } = DateTimeOffset.Now;
    private Ruleset ScheduleGameRuleset { get; set; } = Ruleset.AllExpansionsAdvancedGame;
    private int ScheduleGameNumberOfPlayers { get; set; } = 6;
    private int ScheduleGameMaximumTurns { get; set; } = 10;
    private List<Faction> ScheduleGameAllowedFactionsInPlay { get; set; } = [];
    private bool ScheduleGameAsyncPlay { get; set; } = false;
    
    private string ScheduleError { get; set; } = string.Empty;
    private bool EditUser { get; set; }
    private string UserName { get; set; }
    private string PlayerName { get; set; }
    private string Password1 { get; set; }
    private string Password2 { get; set; }
    private string Email { get; set; }
    private string ChangeUserInfoMessage { get; set; }

    protected override void OnInitialized()
    {
        ScheduleGameAllowedFactionsInPlay = Enumerations.GetValuesExceptDefault(Faction.None).ToList();
    }
    
    protected override void OnParametersSet()
    {
        GetUserInfoFromClient();
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartRedrawCycle(5000);
        }
    }
    
    private async Task ScheduleGame()
    {
        await Client.RequestScheduleGame(ScheduleGameDateTime, ScheduleGameRuleset, ScheduleGameNumberOfPlayers, ScheduleGameMaximumTurns, ScheduleGameAllowedFactionsInPlay, ScheduleGameAsyncPlay);
        ScheduleGameDateTime = DateTimeOffset.Now;
        ScheduleGameRuleset = Ruleset.AllExpansionsAdvancedGame;
        ScheduleGameNumberOfPlayers = 6;
        ScheduleGameMaximumTurns = 10;
        ScheduleGameAllowedFactionsInPlay = Enumerations.GetValuesExceptDefault(Faction.None).ToList();;
        ScheduleGameAsyncPlay = false;
        State = OwnGamesComponentState.List;
    }

    private async Task CreateNewGame()
    {
        await Client.RequestCreateGame(CreateGamePassword);
    }
    
    private async Task LoadAndCreateGame()
    {
        CreateError = string.Empty;
        Loading = true;
        StateHasChanged();
        await Task.Delay(200).ContinueWith(_ => LoadGameOpenFile());
    }

    private async Task LoadGameOpenFile()
    {
        try
        {
            LoadedGameData = await Browser.LoadFile(FileInput);

            if (!string.IsNullOrEmpty(LoadedGameData))
            {
                if (LoadedGameData.Length > MaxSaveGameSize)
                {
                    CreateError = "File is too big";
                }
                else
                {
                    var skinData = Client.CurrentSkin == DefaultSkin.Default ? null : Client.CurrentSkin.SkinToString();
                    CreateError = await Client.RequestCreateGame(CreateGamePassword, LoadedGameData, skinData);    
                }
            }
        }
        catch (Exception e)
        {
            CreateError = $"Error loading game ({e.Message})";
        }

        Loading = true;
        StateHasChanged();
    }
    
    private async Task Close(GameInfo av)
    {
        var result = await Client.RequestCloseGame(av.GameId);
        if (result != null)
            CreateError = result;
        
        StateHasChanged();
    }

    private void CancelEdit()
    {
        GetUserInfoFromClient();
        EditUser = false;
    }

    private void GetUserInfoFromClient()
    {
        UserName = Client.UserName;
        PlayerName = Client.PlayerName;
        Email = Client.UserEmail;
        Password1 = string.Empty;
        Password2 = string.Empty;
    }

    private async Task UpdateUserInfo()
    {
        if (ValidateUpdatedUserInfo())
        {
            await Client.RequestUpdateUserInfo(string.IsNullOrEmpty(Password1) ? null : Support.GetHash(Password1), Email, PlayerName);
            GetUserInfoFromClient();
            EditUser = false;
        }
    }
    
    private bool ValidateUpdatedUserInfo()
    {
        if (!string.IsNullOrEmpty(Password1) && Password1.Length < 6) ChangeUserInfoMessage = "Password must be at least 6 characters";
        else if (!string.IsNullOrEmpty(Password1) && !Password1.Equals(Password2)) ChangeUserInfoMessage = "Passwords do not not match";
        else if (!Email.Contains('@') || !Email.Contains('.')) ChangeUserInfoMessage = "Enter a valid e-mail address";
        else ChangeUserInfoMessage = null;

        return ChangeUserInfoMessage == null;
    }

    private void EnterEdit()
    {
        EditUser = true;
    }
    
    private async Task JoinGameAsPlayer(string gameId, string password, int seat = -1)
    {
        await Client.RequestJoinGame(gameId, Support.GetHash(password), seat);
    }
    
    private enum OwnGamesComponentState
    {
        List, Create, Schedule
    }

    private string GetActive(OwnGamesComponentState toCheck) => toCheck == State ? "active" : "";

    private async Task Cancel(ScheduledGame game)
    {
        await Client.RequestCancelGame(game.ScheduledGameId);
        StateHasChanged();
    }
}
