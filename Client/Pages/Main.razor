@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@page "/"
@page "/{userToken}/{gameId}"
@using Treachery.Client.OtherComponents
@using Treachery.Client.MapComponents
@using Treachery.Client.GameEventComponents
@implements IDisposable

@if (Client.InScheduledMaintenance)
{
    <div class="alert alert-danger text-center p-0" role="alert">
        treachery.online will be down for maintenance from @Client.ServerInfo.ScheduledMaintenance.ToLocalTime() until @Client.ServerInfo.ScheduledMaintenance.AddMinutes(15).ToLocalTime() (your local time)
    </div>
}

@if (!Client.IsConnected)
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="d-flex justify-content-center">
            Not Connected
        </div>
    </div>
}
else if (!Client.LoggedIn)
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="col-sm-12 col-lg-3"></div>
        <div class="col-sm-12 col-lg-6">
            <div class="d-flex justify-content-center">
                <LoginComponent  />
            </div>
        </div>
        <div class="col-sm-12 col-lg-3"></div>
    </div>
}
else if (!Client.InGame)
{
    <div class="row" style="@StartScreenStyle">
        <div class="col-sm-12 col-lg-2"></div>
        <div class="col-sm-12 col-lg-4">
            <RunningGamesComponent/>
        </div>
        <div class="col-sm-12 col-lg-4">
            <OwnGamesComponent/>
        </div>
        <div class="col-sm-12 col-lg-2"></div>
    </div>
}
else if (Client.Game.CurrentPhase is Phase.AwaitingPlayers)
{
    <div class="row d-flex align-items-center" style="@StartScreenStyle">
        <div class="col-sm-12 col-lg-3"></div>
        <div class="col-sm-12 col-lg-6">
            <div class="d-flex justify-content-center">
                @if (Client.IsHost)
                {
                    <ChangeSettingsComponent/>
                }
                else
                {
                    <AwaitingGameComponent/>
                }
                <PlayersComponent/>
            </div>
        </div>
        <div class="col-sm-12 col-lg-3"></div>
    </div>
}
else if (Client.PlayerNeedsSeating)
{
    <div class="row d-flex align-items-center">
        <div class="col-sm-12 col-lg-3"></div>
        <div class="col-sm-12 col-lg-6">
            <div class="d-flex justify-content-center">
                <SeatPlayersComponent/>
            </div>
        </div>
        <div class="col-sm-12 col-lg-3"></div>
    </div>
}
else
{
    <div @ref="@element" class="row">

        <!--Map Column-->
        <div id="mapdiv" class="@MapGrid">
            <GameBoard OnLocationClick="@Client.LocationClick" />
        </div>
        
        @if (!Client.IsObserver)
        {
            <!--Actions-->
            <div class="@ActionGrid @Scrollbars">
                <GameStatusComponent CanEndPhase="@Client.Actions.Contains(typeof(EndPhase))" />
                <ActionPanel/>
            </div>
            
            <!--Menu, player panel and report-->
            <div class="col-sm-12 col-lg-3 cursor-hand @Scrollbars">
                <MenuComponent/>
                @if (Client.CurrentPhase > Phase.TradingFactions)
                {
                    if (Client.Player.Faction is Faction.None)
                    {
                        foreach (var p in Client.Game.Players)
                        {
                            <PlayerPanel ShownPlayer="p" ShowHeader="true" />
                        }    
                    }
                    else
                    {
                        <PlayerPanel ShownPlayer="Client.Player" />                        
                    }
                }
                @if (Client.Game.CurrentReport != null)
                {
                    <ReportComponent Report="Client.Game.CurrentReport" />
                }
            </div>
            
            <!--Chat-->
            @if (Client.CurrentPhase > Phase.AwaitingPlayers)
            {
                <HoverPanel Width=400 HandleWidth=12 BackgroundColor="#e8dba6dd">
                    <ChatComponent/>
                </HoverPanel>
            }
        }
        else
        {
            <!--Actions-->
            <div class="col-sm-12 col-lg-3 cursor-hand @Scrollbars">
                <GameStatusComponent/>
                <ActionPanel/>
                @if (Client.Game.CurrentReport != null)
                {
                    <ReportComponent Report="Client.Game.CurrentReport" />
                }
            </div>
            
            <!--Menu and chat-->
            <div class="col-sm-12 col-lg-3">
                <MenuComponent/>
                <ChatComponent BackgroundColor="#e8dba6dd" />
            </div>
        }

        <ImageFlashComponent  />

    </div>
}

@code {

    [Parameter] public string UserToken { get; set; }
    [Parameter] public string GameId { get; set; }

    private ElementReference element;

    protected override async Task OnInitializedAsync()
    {
        Client.RefreshHandler += StateHasChanged;
        Client.RefreshPopoverHandler += RefreshPopovers;
        
        await Client.Start(UserToken, GameId);
        
        Message.DefaultDescriber = DefaultSkin.Default;
        
        await LoadSkinDataIfSaved();
    }
    
    public void Dispose()
    {
        Client.RefreshHandler -= StateHasChanged;
        Client.RefreshPopoverHandler -= RefreshPopovers;
    }

    private bool isFullscreen;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var checkFullscreen = await Browser.IsFullScreen();
        if (isFullscreen != checkFullscreen)
        {
            isFullscreen = checkFullscreen;
            StateHasChanged();
        }
        else
        {
            await Browser.SetPlanetMapScale();
        }
    }

    private async Task LoadSkinDataIfSaved()
    {
        var existingSkinData = await Browser.LoadStringSetting("treachery.online;setting.skin");
        if (existingSkinData is { Length: > 0 })
        {
            Client.CurrentSkin = Skin.Load(existingSkinData, DefaultSkin.Default);
            Message.DefaultDescriber = Client.CurrentSkin;
        }
    }

    private void RefreshPopovers() => _ = Browser.RefreshPopovers(element);

    private string Scrollbars => isFullscreen? "vh-100 overflow-auto" : "";

    private string MapGrid => !Client.IsConnected || !Client.LoggedIn || !Client.IsHost ? "col-sm-12 col-lg-5" : "col-sm-12 col-lg-6";

    private string ActionGrid => !Client.IsConnected || !Client.LoggedIn || !Client.IsHost ? "col-sm-12 col-lg-4" : "col-sm-12 col-lg-3";

    private const string StartScreenStyle = "min-height: 97vh; background-image: url('art/planet.png'); background-size: 1024px; background-position-x: center; background-position-y: -50px; background-repeat: no-repeat;";
}
