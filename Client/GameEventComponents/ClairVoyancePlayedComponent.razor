@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<ClairVoyancePlayed>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>@DescribeCard(TreacheryCardType.Clairvoyance)</Header>
    <Body>

        <SelectFromImageComponent @bind-Value="target" Values="ClairVoyancePlayed.ValidTargets(Game, Player)" Required="true" ImageWidth="40">
            <Label>Target Faction</Label>
        </SelectFromImageComponent>

        <SelectComponent @bind-Value="question" Values="ClairVoyancePlayed.ValidQuestions(Game, target)" ValueLabels="ClairVoyancePlayed.ValidQuestions(Game, target).Select(q => ToLabel(q))" >
            <Label>Question</Label>
        </SelectComponent>

        @switch (question)
        {
            case ClairvoyanceQuestion.CardTypeInBattle or ClairvoyanceQuestion.CardTypeAsWeaponInBattle or ClairvoyanceQuestion.CardTypeAsDefenseInBattle or ClairvoyanceQuestion.HasCardTypeInHand:
                <SelectComponent @bind-Value="questionParameterA" Values="Voice.ValidTypes(Game).Cast<object>()">
                    <Label>Card Type</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.LeaderAsFacedancer or ClairvoyanceQuestion.LeaderAsTraitor or ClairvoyanceQuestion.LeaderInBattle: 
                <SelectComponent @bind-Value="questionParameterA" 
                        Values="Game.TraitorsInPlay.OrderBy(l => Name(l)).Select(l => l.Id).Cast<object>()" 
                        ValueLabels="Game.TraitorsInPlay.Select(l => Name(l)).OrderBy(l => l)">
                    <Label>Leader</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.Prediction:
                <SelectComponent @bind-Value="questionParameterA" Values="Game.Players.Select(p => p.Faction).Cast<object>()">
                    <Label>Faction</Label>
                </SelectComponent>

                <SelectComponent @bind-Value="questionParameterB" Values="BluePrediction.ValidTurns(Game).Cast<object>()">
                    <Label>Turn</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.DialOfMoreThanXInBattle:
                <SelectComponent @bind-Value="questionParameterA" Values="ValidDials.Cast<object>()">
                    <Label>Dial</Label>
                </SelectComponent>
                break;

            case ClairvoyanceQuestion.WillAttackX:
                <SelectComponent @bind-Value="questionParameterA" 
                        Values="Game.Map.Territories(true).OrderByDescending(l => l.IsStronghold).ThenBy(l => Client.CurrentSkin.Describe(l)).Select(l => l.Id).Cast<object>()"
                                 ValueLabels="Game.Map.Territories(true).OrderByDescending(l => l.IsStronghold).ThenBy(l => Client.CurrentSkin.Describe(l)).Select(l => Client.CurrentSkin.Describe(l))">
                    <Label>Territory</Label>
                </SelectComponent>
                break;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@Client.CurrentSkin.Format("Use {0}", TreacheryCardType.Clairvoyance)" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    private Faction target;
    private ClairvoyanceQuestion question;
    private object questionParameterA;
    private object questionParameterB;

    protected override ClairVoyancePlayed ConfirmedResult => new(Game, Faction) { Target = target, Question = question, Parameter1 = questionParameterA, Parameter2 = questionParameterB };

    private IEnumerable<float> ValidDials
    {
        get
        {
            var result = new List<float>();
            for (var current = 0.0f; current <= 25; current += 0.5f)
            {
                result.Add(current);
            }

            return result;
        }
    }

    private string ToLabel(ClairvoyanceQuestion q)
    {
        return ClairVoyancePlayed.Express(q).ToString(Client.CurrentSkin);
    }
}
