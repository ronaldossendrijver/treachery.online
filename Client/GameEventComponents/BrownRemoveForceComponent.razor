@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<BrownRemoveForce>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Use @ToUse to force a player to send 1 force to their reserves?</Header>

    <Body>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="location" Values="BrownRemoveForce.ValidLocations(Game)">
            <Label>From</Label>
        </SelectComponent>

        <SelectFromImageComponent @bind-Value="target" Values="BrownRemoveForce.ValidFactions(Game, Player, location)" Required="true" ImageWidth="40" />

        <div class="mt-1">
            <SelectFromImageComponent @bind-Value="special" Values="ForceChoices" ImageWidth="40" Required="true" />
        </div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Remove Force" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Brown;

    protected override string Background => BrownRemoveForce.CardToUse(Player) != null ? Client.CurrentSkin.GetImageUrl(BrownRemoveForce.CardToUse(Player)) : Client.CurrentSkin.GetImageUrl(Nexus.Brown);

    private Location location;
    private Faction target;
    private bool special;

    protected override BrownRemoveForce ConfirmedResult => new(Game, Faction) { Location = location, Target = target, SpecialForce = special };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    private IEnumerable<bool> ForceChoices => BrownRemoveForce.ValidSpecialForceChoices(Game, location, target);

    private IEnumerable<string> ImageURLs => BrownRemoveForce.ValidSpecialForceChoices(Game, location, target).Select(special => special ? Client.CurrentSkin.GetFactionSpecialForceImageURL(target) : Client.CurrentSkin.GetFactionForceImageURL(target));

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref location, BrownRemoveForce.ValidLocations(Game), l);
    }

    private string ToUse => BrownRemoveForce.CardToUse(Player) != null ? Client.CurrentSkin.Describe(BrownRemoveForce.CardToUse(Player)) : "Nexus Cunning";
}
