@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<TerrorPlanted>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>@HeaderMessage</Header>
    <Body>

        @if (!TerrorPlanted.MayRemoveTokens(Game, Player))
        {
            <SelectComponent ButtonHint=ClickHintButton.Lmb @bind-Value=_stronghold Values=@TerrorPlanted.ValidStrongholds(Game, Player)>
                <Label>Stronghold</Label>
            </SelectComponent>
        }
        else
        {
            _stronghold = null;
        }

        <SelectComponent @bind-Value="_type" Values="@TerrorPlanted.ValidTerrorTypes(Game, TerrorPlanted.MayRemoveTokens(Game, Player))">
            <Label>Token</Label>
        </SelectComponent>

        <div class="text-info">
            @Client.CurrentSkin.GetTerrorTypeDescription(_type)
        </div>

        <ButtonRowComponent Pass="Pass" Confirm="Confirm" ConfirmText="@ConfirmLabel" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Cyan;

    private TerrorType _type;
    private Territory _stronghold;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    protected override TerrorPlanted ConfirmedResult => new(Game, Faction) { Type = _type, Stronghold = _stronghold };

    protected override TerrorPlanted PassedResult => new(Game, Faction) { Passed = true };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref _stronghold, TerrorPlanted.ValidStrongholds(Game, Player), l.Territory);
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    private string[] ValueLabels => ["Place or move a token", Client.CurrentSkin.Format("Remove a token to gain 4 ", Concept.Resource)];

    private string ConfirmLabel => TerrorPlanted.MayRemoveTokens(Game, Player) ? "Remove token" : Game.UnplacedTerrorTokens.Contains(_type) ? "Place token" : "Move token";

    private string HeaderMessage => TerrorPlanted.MayRemoveTokens(Game, Player) ? "You may now remove Terror" : "You may now place Terror";
}
