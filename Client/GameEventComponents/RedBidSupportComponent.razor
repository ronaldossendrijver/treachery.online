@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<RedBidSupport>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>How much of your @Client.CurrentSkin.Describe(Concept.Resource) may non-allied factions use for bidding?</Header>
    <Body>

        @foreach (var faction in amounts.Keys)
        {
            <SelectResourcesFromFactionComponent @bind-Value="amounts[faction]" Min="0" Max="Player.Resources" Faction="faction" OnChanged="e => StateHasChanged()" />
        }

        <div class="text-info small">Your contributions to opponent bids will flow back to you <i>at the end</i> of the bidding phase.</div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Confirm Support" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Red;

    private Dictionary<Faction, int> amounts = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var f in ValidTargets)
        {
            amounts.Add(f, Game.SpiceForBidsRedCanPay(f));
        }
    }

    protected override RedBidSupport ConfirmedResult => new(Game, Faction) { Amounts = amounts };

    private IEnumerable<Faction> ValidTargets => Game.PlayersOtherThan(Player).Where(f => f != Player.Ally);
}
