@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<AmbassadorPlaced>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>You may now place an Ambassador Token in a Stronghold</Header>
    <Body>

        <SelectFromImageComponent @bind-Value="_ambassador" Values="@AmbassadorPlaced.ValidAmbassadors(Player)" PopupsAsTooltip="true" Required="true">
            <Label>Which ambassador?</Label>
        </SelectFromImageComponent>

        <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="_stronghold" Values="@AmbassadorPlaced.ValidStrongholds(Game, Player)">
            <Label>Where?</Label>
        </SelectComponent>

        <div>
            Cost: <SimpleNumberComponent Size="20">@(Game.AmbassadorsPlacedThisTurn + 1)</SimpleNumberComponent>
        </div>

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Place Ambassador" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override Faction IsFactionSpecific => Faction.Pink;

    private Ambassador _ambassador;
    private Territory _stronghold;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    protected override AmbassadorPlaced ConfirmedResult => new(Game, Faction) { Ambassador = _ambassador, Stronghold = _stronghold };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref _stronghold, AmbassadorPlaced.ValidStrongholds(Game, Player), l.Territory);
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }
}
