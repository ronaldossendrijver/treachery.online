@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<Shipment>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>

        @if (Faction == Faction.Yellow)
        {
            <div>Bring any number of forces onto @Client.CurrentSkin.Describe(Game.Map.TheGreatFlat.Territory) or onto any one territory within two territories of @Client.CurrentSkin.Describe(Game.Map.TheGreatFlat.Territory).</div>

            @if (Shipment.MayShipCrossPlanet(Game, Player))
            {
                <div>In addition, your ally allows you to ship to other locations as well from your reserves.</div>
            }

            @if (Shipment.MayUseWhiteSecretAlly(Game, Player))
            {
                <div>You may also ship with <FactionComponent Faction="Faction.White"/> as your secret ally.</div>
            }
        }
        else
        {
            <div>Select forces to ship, or pass.</div>
        }

        @if (Shipment.MayShipCrossPlanet(Game, Player))
        {
            <div>You may ship site-to-site any number of forces from a source location to another location.</div>
        }

        @if (Shipment.MayShipToReserves(Game, Player))
        {
            <div>You may ship any number of forces from any one location back to your reserves.</div>
        }

    </Header>
    <Body>

        @if (ValidShipmentTypes.Count() > 1)
        {
            <RadioComponent @bind-Value="ShipmentType" Values="@ValidShipmentTypes" ValueLabels="@ValidShipmentTypeLabels" />
        }
        else
        {
            ShipmentType = ShipmentType.ShipmentNormal;
        }

        @if (ShipmentType is ShipmentType.ShipmentSiteToSite)
        {
            <SelectComponent ButtonHint="ClickHintButton.Lmb" ModifierHint="ClickHintModifier.Ctrl" @bind-Value="_shipmentFrom" Values="@Shipment.ValidSourceLocations(Game, Player)">
                <Label>From</Label>
            </SelectComponent>
        }
        else if (ShipmentType is ShipmentType.ShipmentSiteToSite && Player.HomeWorlds.Count > 1)
        {
            <SelectComponent ButtonHint="ClickHintButton.Lmb" ModifierHint="ClickHintModifier.Ctrl" @bind-Value="_shipmentFrom" Values="@Player.HomeWorlds">
                <Label>To</Label>
            </SelectComponent>
        }
        else
        {
            _shipmentFrom = Player.HomeWorlds[0];
        }

        <div class="mt-1 mb-1">
            <SelectComponent ButtonHint="ClickHintButton.Lmb" @bind-Value="_shipmentTo" Values="ValidShipmentLocations.OrderByDescending(l => l.IsStronghold).ThenBy(Name)">
                <Label>
                    @if (ShipmentType is ShipmentType.ShipmentBack)
                    {
                        <span>From</span>
                    }
                    else
                    {
                        <span>To</span>
                    }
                </Label>
            </SelectComponent>
        </div>

        @if (ShipmentType is not ShipmentType.ShipmentBack && Game.ContainsConflictingAlly(Player, _shipmentTo))
        {
            <div class="text-danger bg-dark">Note: if you place forces there, all of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
        }

        @if (Shipment.MayUseNoField(Game, Player))
        {
            var validNoFieldValues = new List<int> { -1 };
            validNoFieldValues.AddRange(Shipment.ValidNoFieldValues(Game, Player));

            var validNoFieldValueLabels = new List<string> { "Don't use a No-Field" };
            validNoFieldValueLabels.AddRange(Shipment.ValidNoFieldValues(Game, Player).Select(v => $"No-Field of {v}"));

            <RadioComponent @bind-Value="NoFieldValue" Values="validNoFieldValues" ValueLabels="validNoFieldValueLabels">
                <Label>Use a @Client.CurrentSkin.Describe(Faction.White) No-Field for this shipment?</Label>
            </RadioComponent>

            if (Shipment.MayUseCunningNoField(Player))
            {
                var cunningValidNoFieldValues = new List<int> { -1 };
                cunningValidNoFieldValues.AddRange(Shipment.ValidCunningNoFieldValues(Game, Player, NoFieldValue));

                var validCunningNoFieldValueLabels = new List<string> { "Don't use a second No-Field" };
                validCunningNoFieldValueLabels.AddRange(Shipment.ValidCunningNoFieldValues(Game, Player, NoFieldValue).Select(v => $"No-Field of {v}"));

                <RadioComponent @bind-Value="CunningNoFieldValue" Values="cunningValidNoFieldValues" ValueLabels="validCunningNoFieldValueLabels">
                    <Label>Use Nexus Cunning to ship a second No-Field (that will be immediately revealed)?</Label>
                </RadioComponent>
            }
            else
            {
                CunningNoFieldValue = -1;
            }
        }
        else
        {
            NoFieldValue = -1;
            CunningNoFieldValue = -1;
        }

        @if (Faction is not Faction.White || NoFieldValue < 0 || Game.HasHighThreshold(Faction.White))
        {
            var selectNormalForceSources = false;
            var selectSpecialForceSources = false;
            Homeworld[] worlds = [];
            if (ShipmentType is ShipmentType.ShipmentNormal or ShipmentType.ShipmentWhiteSecretAlly)
            {
                var worldWithNormalForces = Shipment.HomeworldsToShipFrom(Player, false).ToArray();
                selectNormalForceSources = worldWithNormalForces.Length > 1;
            
                var worldsWithSpecialForces = Shipment.HomeworldsToShipFrom(Player, true).ToArray();
                selectSpecialForceSources = worldsWithSpecialForces.Length > 1;

                worlds = worldsWithSpecialForces.Union(worldsWithSpecialForces).ToArray();
            }
            
            <div class="mt-1">

                @if (ValidShipmentForces > 0)
                {
                    <SelectForcesComponent @bind-Value="ShipmentForceAmount" Min="0" Max="ValidShipmentForces" Faction="Faction" Special="false" />
                }
                else
                {
                    ShipmentForceAmount = 0;
                }
                
                @if (ValidShipmentSpecialForces > 0 && Faction != Faction.White)
                {
                    <SelectForcesComponent @bind-Value="ShipmentSpecialForceAmount" Min="0" Max="ValidShipmentSpecialForces" Faction="Faction" Special="true" />
                }
                else
                {
                    ShipmentSpecialForceAmount = NoFieldValue < 0 ? 0 : 1;
                }

                @if (worlds.Length > 1 && ShipmentForceAmount + ShipmentSpecialForceAmount > 0)
                {
                    <div class="mt-1">Select from which worlds to ship these forces:</div>
                    <ForceSelectionComponent Game=Game 
                                             Player=Player 
                                             Locations="@worlds" 
                                             OnChanged="@StateHasChanged" 
                                             Forces="ForceOrigins" 
                                             AllowMultipleTerritories="true" 
                                             ShowNormalForces="@selectNormalForceSources" 
                                             ShowSpecialForces="@selectSpecialForceSources"/>
                }
                else
                {
                    ForceOrigins.Clear();
                }
                
            </div>
        }
        else
        {
            ShipmentForceAmount = 0;
            ShipmentSpecialForceAmount = 1;
        }
        
        @if (
            ShipmentType is ShipmentType.ShipmentNormal or ShipmentType.ShipmentWhiteSecretAlly && 
            (ShipmentForceAmount > 0 || ShipmentSpecialForceAmount > 0) && 
            Shipment.MaySmuggle(Game, Player, _shipmentTo))
        {
            <div class="mt-1">

                <div>You may smuggle 1 force for free:</div>

                @if (Player.ForcesInReserve > 0)
                {
                    <SelectForcesComponent @bind-Value="SmuggledForceAmount" Min="0" Max="1" Faction="Faction" Special="false" />
                }
                else
                {
                    SmuggledForceAmount = 0;
                }

                @if (Player.SpecialForcesInReserve > 0 && Faction != Faction.White)
                {
                    <SelectForcesComponent @bind-Value="SmuggledSpecialForceAmount" Min="0" Max="1" Faction="Faction" Special="true" />
                }
                else
                {
                    SmuggledSpecialForceAmount = 0;
                }

            </div>
        }
        else
        {
            SmuggledForceAmount = 0;
            SmuggledSpecialForceAmount = 0;
        }

        @if (Player.Ally != Faction.None && Cost > 0 && Game.ResourcesYourAllyCanPay(Player) > 0)
        {
            <div class="mt-1">Let your ally support this shipment?</div>
            <div class="mt-1">
                <SelectResourcesFromFactionComponent @bind-Value="ShipmentAllyContributionAmount" 
                                                     Min="0" 
                                                     Max="Game.ResourcesYourAllyCanPay(Player)" 
                                                     Faction="Player.Ally" 
                                                     Title=@Client.CurrentSkin.Format("{0} paid by your ally", Concept.Resource) />
            </div>
        }
        else
        {
            ShipmentAllyContributionAmount = 0;
        }

        @if (Shipment.CanKarma(Game, Player) && (Faction != Faction.Yellow || ShipmentType is ShipmentType.ShipmentSiteToSite) && !Shipment.MayShipCrossPlanet(Game, Player))
        {
            <div class="mt-1">

                <SelectFromImageComponent @bind-Value="KarmaCard" Values="Shipment.ValidKarmaCards(Game, Player)" Required="false" ImageWidth="80">
                    <Label>Use @Client.CurrentSkin.Describe(TreacheryCardType.Karma) to ship at @Client.CurrentSkin.Describe(Faction.Orange) rate?</Label>
                </SelectFromImageComponent>
            
                @if (KarmaCard != null && !Player.TreacheryCards.Contains(KarmaCard))
                {
                    <div class="text-info">This card is offered to you by your ally</div>
                }

            </div>
        }
        else
        {
            KarmaCard = null;
        }

        <div class="mt-1 text-end">Total cost of shipment: <SimpleNumberComponent>@Cost</SimpleNumberComponent></div>

        @if (ShipmentType is ShipmentType.ShipmentNormal && Faction != Faction.Yellow && Game.PreventedFromShipping(Faction))
        {
            <ButtonRowComponent Pass="Pass" PassText="Pass" />
        }
        else if (ShipmentType is ShipmentType.ShipmentWhiteSecretAlly)
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Ship" ConfirmError=@Validation />
        }
        else
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Ship" ConfirmError=@Validation Pass="Pass" PassText="Pass" />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private ShipmentType ShipmentType { get; set; } = ShipmentType.ShipmentNormal;
    private TreacheryCard KarmaCard { get; set; }
    private int ShipmentForceAmount { get; set; }
    private int ShipmentSpecialForceAmount { get; set; }
    private int ShipmentAllyContributionAmount { get; set; } 
    private int NoFieldValue { get; set; } = -1;
    private int CunningNoFieldValue { get; set; }= -1;
    private int SmuggledForceAmount { get; set; }
    private int SmuggledSpecialForceAmount { get; set; }
    private Dictionary<Location, Battalion> ForceOrigins { get; } = new();

    private Location _shipmentFrom;
    private Location _shipmentTo;

    protected override Shipment ConfirmedResult
    {
        get
        {
            var direction = ShipmentType == ShipmentType.ShipmentBack ? -1 : 1;

            return new Shipment(Game, Faction)
            {
                ShipmentType = ShipmentType,
                ForceAmount = direction * ShipmentForceAmount,
                SpecialForceAmount = direction * ShipmentSpecialForceAmount,
                SmuggledAmount = SmuggledForceAmount,
                SmuggledSpecialAmount = SmuggledSpecialForceAmount,
                NoFieldValue = NoFieldValue,
                CunningNoFieldValue = CunningNoFieldValue,
                From = _shipmentFrom,
                To = _shipmentTo,
                Passed = false,
                KarmaCard = KarmaCard,
                AllyContributionAmount = ShipmentAllyContributionAmount,
                UseWhiteSecretAlly = ShipmentType is ShipmentType.ShipmentWhiteSecretAlly,
                ForceLocations = ForceOrigins
            };
        }
    }

    protected override Shipment PassedResult => new(Game, Faction) { Passed = true };

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        Client.OnLocationSelected += HandleLocationSelected;
        Client.OnLocationSelectedWithShift += HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleLocationSelectedWithModifier;
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
        Client.OnLocationSelectedWithShift -= HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref _shipmentTo, 
            Shipment.ValidShipmentLocations(Game, Player, ShipmentType is ShipmentType.ShipmentSiteToSite, ShipmentType is ShipmentType.ShipmentWhiteSecretAlly), l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref _shipmentFrom, Shipment.ValidSourceLocations(Game, Player), l);
    }
    
    private int Cost => Shipment.DetermineCost(Game, Player, ConfirmedResult);

    private IEnumerable<Location> ValidShipmentLocations =>
        ShipmentType switch
        {
            ShipmentType.ShipmentNormal => Shipment.ValidShipmentLocations(Game, Player, false, false),
            ShipmentType.ShipmentWhiteSecretAlly => Shipment.ValidShipmentLocations(Game, Player, false, true),
            ShipmentType.ShipmentSiteToSite => Shipment.ValidShipmentLocations(Game, Player, true, false),
            ShipmentType.ShipmentBack => Shipment.ValidSourceLocations(Game, Player),
            _ => []
        };

    private int ValidShipmentForces =>
        ShipmentType switch
        {
            ShipmentType.ShipmentNormal => Shipment.ValidMaxNormalShipmentForces(Player, false, NoFieldValue),
            ShipmentType.ShipmentWhiteSecretAlly => Shipment.ValidMaxSecretAllyShipmentForces(Player, false),
            ShipmentType.ShipmentSiteToSite => Shipment.ValidMaxShipmentSiteToSiteForces(Player, false, _shipmentFrom),
            ShipmentType.ShipmentBack => Shipment.ValidMaxShipmentBackForces(Player, false, _shipmentTo),
            _ => throw new ArgumentOutOfRangeException()
        };

    private int ValidShipmentSpecialForces =>
        ShipmentType switch
        {
            ShipmentType.ShipmentNormal => Shipment.ValidMaxNormalShipmentForces(Player, true, NoFieldValue),
            ShipmentType.ShipmentWhiteSecretAlly => Shipment.ValidMaxSecretAllyShipmentForces(Player, true),
            ShipmentType.ShipmentSiteToSite => Shipment.ValidMaxShipmentSiteToSiteForces(Player, true, _shipmentFrom),
            ShipmentType.ShipmentBack => Shipment.ValidMaxShipmentBackForces(Player, true, _shipmentTo),
            _ => 0
        };


    private IEnumerable<ShipmentType> ValidShipmentTypes
    {
        get
        {
            var result = new List<ShipmentType> { ShipmentType.ShipmentNormal };

            if (Shipment.MayShipCrossPlanet(Game, Player)) result.Add(ShipmentType.ShipmentSiteToSite);
            if (Shipment.MayShipToReserves(Game, Player)) result.Add(ShipmentType.ShipmentBack);
            if (Shipment.MayUseWhiteSecretAlly(Game, Player)) result.Add(ShipmentType.ShipmentWhiteSecretAlly);

            return result;
        }
    }

    private IEnumerable<string> ValidShipmentTypeLabels
    {
        get
        {
            var result = new List<string> { "Normal Shipment" };

            if (Shipment.MayShipCrossPlanet(Game, Player)) result.Add("Site-to-site");
            if (Shipment.MayShipToReserves(Game, Player)) result.Add("Back to reserves");
            if (Shipment.MayUseWhiteSecretAlly(Game, Player)) result.Add($"{Name(Faction.White)} Secret Ally");

            return result;
        }
    }
}
