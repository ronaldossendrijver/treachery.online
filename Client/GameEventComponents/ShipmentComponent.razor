@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<Shipment>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>

        @if (Faction == Faction.Yellow)
        {
            <div>Bring any number of forces onto @Client.CurrentSkin.Describe(Game.Map.TheGreatFlat.Territory) or onto any one territory within two territories of @Client.CurrentSkin.Describe(Game.Map.TheGreatFlat.Territory).</div>

            @if (Shipment.MayShipCrossPlanet(Game, Player))
            {
                <div>In addition, your ally allows you to ship to other locations as well from your reserves.</div>
            }

            @if (Shipment.MayUseWhiteSecretAllly(Game, Player))
            {
                <div>You may also ship with <FactionComponent Faction="Faction.White"/> as your secret ally.</div>
            }
        }
        else
        {
            <div>Select forces to ship, or pass.</div>
        }

        @if (Shipment.MayShipCrossPlanet(Game, Player))
        {
            <div>You may ship site-to-site any number of forces from a source location to another location.</div>
        }

        @if (Shipment.MayShipToReserves(Game, Player))
        {
            <div>You may ship any number of forces from any one location back to your reserves.</div>
        }

    </Header>
    <Body>

        @if (Shipment.MayShipCrossPlanet(Game, Player) || Shipment.MayShipToReserves(Game, Player) || Shipment.MayUseWhiteSecretAllly(Game, Player))
        {
            <RadioComponent @bind-Value="shipmentType" Values="@ValidShipmentTypes" ValueLabels="@ValidShipmentTypeLabels" />
        }
        else
        {
            shipmentType = SHIPMENT_NORMAL;
        }

        @if (shipmentType == SHIPMENT_SITETOSITE)
        {
            <SelectComponent ButtonHint="ClickHintButton.LMB" ModifierHint="ClickHintModifier.CTRL" @bind-Value="shipmentFrom" Values="ValidSourceLocations">
                <Label>From</Label>
            </SelectComponent>
        }
        else
        {
            shipmentFrom = null;
        }

        <div class="mt-1 mb-1">
            <SelectComponent ButtonHint="ClickHintButton.LMB" @bind-Value="shipmentTo" Values="ValidShipmentLocations.OrderByDescending(l => l.IsStronghold).ThenBy(l => Name(l))">
                <Label>To</Label>
            </SelectComponent>
        </div>

        @if (shipmentType != SHIPMENT_BACK && Game.ContainsConflictingAlly(Player, shipmentTo))
        {
            <div class="text-danger bg-dark">Note: if you place forces there, all of your forces there at the end of your move turn will be destroyed due to ally presence!</div>
        }

        @if (Shipment.MayUseNoField(Game, Player))
        {
            var validNoFieldValues = new List<int>();
            validNoFieldValues.Add(-1);
            validNoFieldValues.AddRange(Shipment.ValidNoFieldValues(Game, Player));

            var validNoFieldValueLabels = new List<string>();
            validNoFieldValueLabels.Add("Don't use a No-Field");
            validNoFieldValueLabels.AddRange(Shipment.ValidNoFieldValues(Game, Player).Select(v => string.Format("No-Field of {0}", v)));

            <RadioComponent @bind-Value="nofieldValue" Values="validNoFieldValues" ValueLabels="validNoFieldValueLabels">
                <Label>Use a @Client.CurrentSkin.Describe(Faction.White) No-Field for this shipment?</Label>
            </RadioComponent>

            if (Shipment.MayUseCunningNoField(Player))
            {
                var cunningValidNoFieldValues = new List<int>();
                cunningValidNoFieldValues.Add(-1);
                cunningValidNoFieldValues.AddRange(Shipment.ValidCunningNoFieldValues(Game, Player, nofieldValue));

                var validCunningNoFieldValueLabels = new List<string>();
                validCunningNoFieldValueLabels.Add("Don't use a second No-Field");
                validCunningNoFieldValueLabels.AddRange(Shipment.ValidCunningNoFieldValues(Game, Player, nofieldValue).Select(v => string.Format("No-Field of {0}", v)));

                <RadioComponent @bind-Value="cunningNofieldValue" Values="cunningValidNoFieldValues" ValueLabels="validCunningNoFieldValueLabels">
                    <Label>Use Nexus Cunning to ship a second No-Field (that will be immediately revealed)?</Label>
                </RadioComponent>
            }
            else
            {
                cunningNofieldValue = -1;
            }
        }
        else
        {
            nofieldValue = -1;
            cunningNofieldValue = -1;
        }

        @if (Faction is not Faction.White || nofieldValue < 0 || Game.HasHighThreshold(Faction.White))
        {
            var worldsToShipForcesFrom = Shipment.HomeworldsToShipFrom(Player, false);
            var selectNormalForceSources = worldsToShipForcesFrom.Count() > 1;
            
            var worldsToShipSpecialForcesFrom = Shipment.HomeworldsToShipFrom(Player, true);
            var selectSpecialForceSources = worldsToShipSpecialForcesFrom.Count() > 1;

            var worldsToShipFrom = worldsToShipForcesFrom.Union(worldsToShipSpecialForcesFrom).ToArray();
                    
            <div class="mt-1">

                @if (ValidShipmentForces > 0)
                {
                    <SelectForcesComponent @bind-Value="shipmentForceAmount" Min="0" Max="ValidShipmentForces" Faction="Faction" Special="false" />
                }
                else
                {
                    shipmentForceAmount = 0;
                }
                
                @if (ValidShipmentSpecialForces > 0 && Faction != Faction.White)
                {
                    <SelectForcesComponent @bind-Value="shipmentSpecialForceAmount" Min="0" Max="ValidShipmentSpecialForces" Faction="Faction" Special="true" />
                }
                else
                {
                    shipmentSpecialForceAmount = nofieldValue < 0 ? 0 : 1;
                }

                @if (shipmentForceAmount + shipmentSpecialForceAmount > 0 && worldsToShipFrom.Count() > 1)
                {
                    <div class="mt-1">Select from which worlds to ship these forces:</div>
                    <ForceSelectionComponent Game=Game Player=Player Locations="@worldsToShipFrom" 
                                             OnChanged="@StateHasChanged" Forces="forceOrigins" AllowMultipleTerritories="true" ShowNormalForces="@selectNormalForceSources" ShowSpecialForces="@selectSpecialForceSources"/>
                }
                
            </div>
        }
        else
        {
            shipmentForceAmount = 0;
            shipmentSpecialForceAmount = 1;
        }

        
        @if (
            (shipmentType == SHIPMENT_NORMAL || shipmentType == SHIPMENT_SECRETALLY) && 
            (shipmentForceAmount > 0 || shipmentSpecialForceAmount > 0) && 
            Shipment.MaySmuggle(Game, Player, shipmentTo))
        {
            <div class="mt-1">

                <div>You may smuggle 1 force for free:</div>

                @if (Player.ForcesInReserve > 0)
                {
                    <SelectForcesComponent @bind-Value="smuggledForceAmount" Min="0" Max="1" Faction="Faction" Special="false" />
                }
                else
                {
                    smuggledForceAmount = 0;
                }

                @if (Player.SpecialForcesInReserve > 0 && Faction != Faction.White)
                {
                    <SelectForcesComponent @bind-Value="smuggledSpecialForceAmount" Min="0" Max="1" Faction="Faction" Special="true" />
                }
                else
                {
                    smuggledSpecialForceAmount = 0;
                }

            </div>
        }
        else
        {
            smuggledForceAmount = 0;
            smuggledSpecialForceAmount = 0;
        }

        @if (Player.Ally != Faction.None && Cost > 0 && Game.ResourcesYourAllyCanPay(Player) > 0)
        {
            <div class="mt-1">Let your ally support this shipment?</div>
            <div class="mt-1">
                <SelectResourcesFromFactionComponent @bind-Value="shipmentAllyContributionAmount" Min="0" Max="Game.ResourcesYourAllyCanPay(Player)" Faction="Player.Ally" Title=@Client.CurrentSkin.Format("{0} paid by your ally", Concept.Resource) />
            </div>
        }
        else
        {
            shipmentAllyContributionAmount = 0;
        }

        @if (Shipment.CanKarma(Game, Player) && (Faction != Faction.Yellow || shipmentType == SHIPMENT_SITETOSITE) && !Shipment.MayShipCrossPlanet(Game, Player))
        {
            <div class="mt-1">

                <SelectFromImageComponent @bind-Value="karmaCard" Values="Shipment.ValidKarmaCards(Game, Player)" Required="false" ImageWidth="80">
                    <Label>Use @Client.CurrentSkin.Describe(TreacheryCardType.Karma) to ship at @Client.CurrentSkin.Describe(Faction.Orange) rate?</Label>
                </SelectFromImageComponent>
            
                @if (karmaCard != null && !Player.TreacheryCards.Contains(karmaCard))
                {
                    <div class="text-info">This card is offered to you by your ally</div>
                }

            </div>
        }
        else
        {
            karmaCard = null;
        }

        <div class="mt-1 text-end">Total cost of shipment: <SimpleNumberComponent>@Cost</SimpleNumberComponent></div>

        @if (shipmentType == SHIPMENT_NORMAL && Faction != Faction.Yellow && Game.PreventedFromShipping(Faction))
        {
            <ButtonRowComponent Pass="Pass" PassText="Pass" />
        }
        else if (shipmentType == SHIPMENT_SECRETALLY)
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Ship" ConfirmError=@Validation />
        }
        else
        {
            <ButtonRowComponent Confirm="Confirm" ConfirmText="Ship" ConfirmError=@Validation Pass="Pass" PassText="Pass" />
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    const int SHIPMENT_NORMAL = 0;
    const int SHIPMENT_SITETOSITE = 1;
    const int SHIPMENT_BACK = 2;
    const int SHIPMENT_SECRETALLY = 3;

    private int shipmentType = SHIPMENT_NORMAL;
    private TreacheryCard karmaCard;
    private int shipmentForceAmount;
    private int shipmentSpecialForceAmount;
    private Location shipmentFrom;
    private Location shipmentTo;
    private int shipmentAllyContributionAmount;
    private int nofieldValue = -1;
    private int cunningNofieldValue = -1;
    private int smuggledForceAmount;
    private int smuggledSpecialForceAmount;
    private Dictionary<Location, Battalion> forceOrigins = new();

    protected override Shipment ConfirmedResult
    {
        get
        {
            var direction = shipmentType == SHIPMENT_BACK ? -1 : 1;
            var from = shipmentType == SHIPMENT_SITETOSITE ? shipmentFrom : null;

            return new Shipment(Game, Faction)
            {
                ForceAmount = direction * shipmentForceAmount,
                SpecialForceAmount = direction * shipmentSpecialForceAmount,
                SmuggledAmount = smuggledForceAmount,
                SmuggledSpecialAmount = smuggledSpecialForceAmount,
                NoFieldValue = nofieldValue,
                CunningNoFieldValue = cunningNofieldValue,
                From = from,
                To = shipmentTo,
                Passed = false,
                KarmaCard = karmaCard,
                AllyContributionAmount = shipmentAllyContributionAmount,
                UseWhiteSecretAlly = shipmentType == SHIPMENT_SECRETALLY,
                ForceLocations = forceOrigins
            };
        }
    }

    protected override Shipment PassedResult => new(Game, Faction) { Passed = true };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
            Client.OnLocationSelectedWithShift += HandleLocationSelectedWithModifier;
            Client.OnLocationSelectedWithCtrlOrAlt += HandleLocationSelectedWithModifier;
            Client.OnLocationSelectedWithShiftAndWithCtrlOrAlt += HandleLocationSelectedWithModifier;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
        Client.OnLocationSelectedWithShift -= HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
        Client.OnLocationSelectedWithShiftAndWithCtrlOrAlt -= HandleLocationSelectedWithModifier;
    }

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref shipmentTo, ValidShipmentLocations, l);
    }

    private void HandleLocationSelectedWithModifier(object sender, Location l)
    {
        SetIfValid(ref shipmentFrom, ValidSourceLocations, l);
    }

    private void ShipmentTypeOnChange(ChangeEventArgs args)
    {
        shipmentType = Convert.ToInt32(args.Value);
        StateHasChanged();
    }

    private IEnumerable<Location> ValidShipmentLocations
    {
        get
        {
            switch (shipmentType)
            {                
                case SHIPMENT_NORMAL:
                    return Shipment.ValidShipmentLocations(Game, Player, false, false);

                case SHIPMENT_SECRETALLY:
                    return Shipment.ValidShipmentLocations(Game, Player, false, true);

                case SHIPMENT_SITETOSITE:
                    return Shipment.ValidShipmentLocations(Game, Player, true, false);

                case SHIPMENT_BACK:
                    return Player.LocationsWithAnyForces;
            }

            return new Location[] { };
        }
    }

    private int ValidShipmentForces
    {
        get
        {
            switch (shipmentType)
            {
                case SHIPMENT_NORMAL: return Shipment.ValidMaxNormalShipmentForces(Player, false, nofieldValue);
                case SHIPMENT_SECRETALLY: return Shipment.ValidMaxSecretAllyShipmentForces(Player, false);
                case SHIPMENT_SITETOSITE: return Shipment.ValidMaxShipmentSiteToSiteForces(Player, false, shipmentFrom);
                case SHIPMENT_BACK: return Shipment.ValidMaxShipmentBackForces(Player, false, shipmentTo);
            }

            return 0;
        }
    }

    private int ValidShipmentSpecialForces
    {
        get
        {
            switch (shipmentType)
            {
                case SHIPMENT_NORMAL: return Shipment.ValidMaxNormalShipmentForces(Player, true, nofieldValue);
                case SHIPMENT_SECRETALLY: return Shipment.ValidMaxSecretAllyShipmentForces(Player, true);
                case SHIPMENT_SITETOSITE: return Shipment.ValidMaxShipmentSiteToSiteForces(Player, true, shipmentFrom);
                case SHIPMENT_BACK: return Shipment.ValidMaxShipmentBackForces(Player, true, shipmentTo);
            }

            return 0;
        }
    }

    private IEnumerable<Location> ValidSourceLocations => Game.LocationsWithAnyForcesNotInStorm(Player);

    private int Cost => Shipment.DetermineCost(Game, Player, ConfirmedResult);

    private IEnumerable<int> ValidShipmentTypes
    {
        get
        {
            var result = new List<int>();

            result.Add(SHIPMENT_NORMAL);

            if (Shipment.MayShipCrossPlanet(Game, Player)) result.Add(SHIPMENT_SITETOSITE);
            if (Shipment.MayShipToReserves(Game, Player)) result.Add(SHIPMENT_BACK);
            if (Shipment.MayUseWhiteSecretAllly(Game, Player)) result.Add(SHIPMENT_SECRETALLY);

            return result;
        }
    }

    private IEnumerable<string> ValidShipmentTypeLabels
    {
        get
        {
            var result = new List<string>();

            result.Add("Normal Shipment");
            if (Shipment.MayShipCrossPlanet(Game, Player)) result.Add("Site-to-site");
            if (Shipment.MayShipToReserves(Game, Player)) result.Add("Back to reserves");
            if (Shipment.MayUseWhiteSecretAllly(Game, Player)) result.Add($"{Name(Faction.White)} Secret Ally");

            return result;
        }
    }
}
