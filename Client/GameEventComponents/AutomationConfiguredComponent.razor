@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<AutomationConfigured>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Manage Automation</Header>

    <Body>
    
        <SelectComponent @bind-Value="@NewRuleType" Values="@AutomationConfigured.GetAvailableRuleTypes(Game, Player)" Required/>
        <div class="mt-1">
            @switch (NewRuleType)
            {
                case AutomationRuleType.BiddingPassAboveAmount:
                    <SelectResourcesComponent @bind-Value="@NewRuleBidAmount" Min="0" Max="40"/>
                    break;
                    
                case AutomationRuleType.BiddingPassWhenHighestBidByFaction:
                    <SelectFromImageComponent @bind-Value="@NewRuleBidFaction" Values="@AutomationConfigured.GetValidBiddingFactions(Game, Player)" Required ImageWidth="40" />
                    break;
            }
        </div>
        <CommandButton MarginClass="mt-1" OnClick="@Confirm">Create rule</CommandButton>
        
        @if (CurrentAutomation.Any())
        {
            <hr style="border-color:white" />
            <div class="mt-2">Current automation:</div>
            <table class="table table-sm">
                <tbody>
                    @foreach (var rule in CurrentAutomation)
                    {
                        <tr class="table-dark">
                            <td>
                                <CommandButton OnClick="@(_ => Cancel(rule))" Small>🗙</CommandButton>
                            </td>
                            <td>
                                <ExpressionComponent Expression="@rule.GetDescription().Expression" Size="18"/>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => false;

    protected override Faction IsFactionSpecific => Faction.None;

    private IEnumerable<AutomationConfigured> CurrentAutomation => Game.AutomationRules.Where(x => x.Initiator == Faction);

    private AutomationRuleType NewRuleType { get; set; }
    private int NewRuleBidAmount { get; set; }
    private Faction NewRuleBidFaction { get; set; }
    
    protected override AutomationConfigured ConfirmedResult 
        => new(Game, Faction) { RuleType = NewRuleType, BiddingAboveAmount = NewRuleBidAmount, BiddingWinningFaction = NewRuleBidFaction, Action = ItemAction.Create };
    
    private async Task Cancel(AutomationConfigured rule) 
        => await Request(new AutomationConfigured(Game, Faction) { AutomationRuleId = rule.AutomationRuleId, Action = ItemAction.Delete});
}
