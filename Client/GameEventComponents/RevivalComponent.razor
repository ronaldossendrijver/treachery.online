@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<Revival>
@implements IDisposable

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Select forces and/or leaders to revive</Header>
    <Body>

        @{
            if (Player.Faction != Faction.Purple && Game.IsPlaying(Faction.Purple) && Game.KilledHeroes(Player).Any())
            {
                <div class="text-info small mb-1">Note: you can only revive once during your turn. If you want to request early leader revival from @Client.CurrentSkin.Describe(Faction.Purple), you need to do that first. Then, after you agree on a price, select the leader to revive from the drop down below.</div>
            }

            if (Player.Nexus == Faction.Red && NexusPlayed.CanUseSecretAlly(Game, Player))
            {
                <CheckboxComponent @bind-Value=@useRedSecretAlly>Use your Nexus card to get 3 additional free revivals beyond your revival limit?</CheckboxComponent>
            }
            else
            {
                useRedSecretAlly = false;
            }

            if (Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly) > 0)
            {
                <SelectForcesComponent @bind-Value="amountOfForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly)" Faction="Faction" Special="false" />
            }
            else
            {
                amountOfForces = 0;
            }

            if (Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly) > 0)
            {
                <SelectForcesComponent @bind-Value="amountOfSpecialForces" Min="0" Max="Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly)" Faction="Faction" Special="true" />
            }
            else
            {
                amountOfSpecialForces = 0;
            }

            if (Revival.ValidMaxRevivalsByRed(Game, Player) > 0)
            {
                <div class="mt-2">You may select up to <SimpleNumberComponent>@Revival.ValidMaxRevivalsByRed(Game, Player)</SimpleNumberComponent> forces to be revived by your ally:</div>

                if (Revival.ValidMaxRevivals(Game, Player, false, useRedSecretAlly) > 0)
                {
                    <SelectForcesComponent @bind-Value="forcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="false" />
                }
                else
                {
                    forcesPaidByRed = 0;
                }

                if (Revival.ValidMaxRevivals(Game, Player, true, useRedSecretAlly) > 0)
                {
                    <SelectForcesComponent @bind-Value="specialForcesPaidByRed" Min="0" Max="Revival.ValidMaxRevivalsByRed(Game, Player)" Faction="Faction" Special="true" />
                }
                else
                {
                    specialForcesPaidByRed = 0;
                }
            }
            else
            {
                forcesPaidByRed = 0;
                specialForcesPaidByRed = 0;
            }

            var maxForcesPlacedOnPlanet = Revival.ValidRevivedForceLocations(Game, Player).Any() ? Revival.NumberOfForcesThatMayBePlacedOnPlanet(Game, Player, useRedSecretAlly, amountOfForces + forcesPaidByRed) : 0;
            var maxSpecialForcesPlacedOnPlanet = Revival.ValidRevivedForceLocations(Game, Player).Any() ? Revival.NumberOfSpecialForcesThatMayBePlacedOnPlanet(Player, amountOfSpecialForces + specialForcesPaidByRed) : 0;

            if (maxForcesPlacedOnPlanet > 0)
            {
                <div>
                    <SelectForcesComponent Label="Place forces on the planet?" @bind-Value="amountOfForcesToLocation" Min=0 Max=maxForcesPlacedOnPlanet Faction=Faction Special="false"/>
                </div>
            }
            else
            {
                amountOfForcesToLocation = 0;
            }

            if (maxSpecialForcesPlacedOnPlanet > 0)
            {
                <div>
                    <SelectForcesComponent Label="Place forces on the planet?" @bind-Value="amountOfSpecialForcesToLocation" Min=0 Max=maxSpecialForcesPlacedOnPlanet Faction=Faction Special="true"/>
                </div>
            }
            else
            {
                amountOfSpecialForcesToLocation = 0;
            }

            if (amountOfForcesToLocation > 0 || amountOfSpecialForcesToLocation > 0)
            {
                <SelectComponent ButtonHint="ClickHintButton.Lmb" @bind-Value="location" Values=@Revival.ValidRevivedForceLocations(Game, Player)>
                    <Label>Place them where?</Label>
                </SelectComponent>
            }
            else
            {
                location = null;
            }

            @if (Revival.ValidRevivalHeroes(Game, Player).Any())
            {
                <SelectFromImageComponent Game="Game" @bind-Value="hero" Values="Revival.ValidRevivalHeroes(Game, Player)" Required="false" ImageWidth="80"/>                
            }
            else
            {
                hero = null;
            }

            if (hero != null && Revival.MayAssignSkill(Game, Player, hero))
            {
                <RadioComponent @bind-Value="assignSkill" Values="@(new[] {false,true})" ValueLabels="@(new[] {"No","Yes"})">
                    <Label>Do you wish to assign a skill to this leader?</Label>
                </RadioComponent>
            }
            else
            {
                assignSkill = false;
            }

            <div class="mt-1 text-end">Revival cost for you: <SimpleNumberComponent>@(CostOfRevival.TotalCostForPlayer)</SimpleNumberComponent></div>

            if (Player.Ally == Faction.Red)
            {
                <div class="mt-1 text-end">Revival cost for @Client.CurrentSkin.Describe(Faction.Red): <SimpleNumberComponent>@(CostOfRevival.CostForEmperor)</SimpleNumberComponent></div>
            }

            <ButtonRowComponent Confirm="Confirm" ConfirmText="Revive" ConfirmError=@Validation />
        }
    </Body>

</GameEventComponentLayout>

@code {

    private int amountOfForces;
    private int amountOfSpecialForces;
    private int forcesPaidByRed;
    private int specialForcesPaidByRed;
    private IHero hero;
    private bool assignSkill;
    private bool useRedSecretAlly;
    private int amountOfForcesToLocation;
    private int amountOfSpecialForcesToLocation;
    private Location location;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    protected override Revival ConfirmedResult => new(Game, Faction)
    {
        AmountOfForces = amountOfForces, 
        AmountOfSpecialForces = amountOfSpecialForces, 
        ExtraForcesPaidByRed = forcesPaidByRed, 
        ExtraSpecialForcesPaidByRed = specialForcesPaidByRed, 
        Hero = hero, 
        AssignSkill = assignSkill,
        NumberOfForcesInLocation = amountOfForcesToLocation,
        NumberOfSpecialForcesInLocation = amountOfSpecialForcesToLocation,
        Location = location,
        UsesRedSecretAlly = useRedSecretAlly
    };

    private RevivalCost CostOfRevival => Revival.DetermineCost(Game, Player, hero, amountOfForces, amountOfSpecialForces, forcesPaidByRed, specialForcesPaidByRed, useRedSecretAlly);

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref location, Revival.ValidRevivedForceLocations(Game, Player), l);
    }
}
