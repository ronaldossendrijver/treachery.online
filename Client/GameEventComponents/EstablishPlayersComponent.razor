@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@using System.Text.Json
@inherits GameEventComponent<EstablishPlayers>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()" Collapsible="false">

    <Header>Manage game settings</Header>
    <Body>

        <SelectNumberComponent @bind-Value="@Settings.MaximumTurns" Min="1" Max="EstablishPlayers.GetMaximumNumberOfTurns()" Label="Maximum number of turns:"/>

        <SelectNumberComponent @bind-Value="@Settings.NumberOfPlayers" Min="2" Max="EstablishPlayers.GetMaximumNumberOfPlayers()" Label="Number of players:"/>

        <SelectFromImageComponent Selected="@Settings.AllowedFactionsInPlay" Values="EstablishPlayers.AvailableFactions()" T="Faction" OnChanged="@StateHasChanged" ImageWidth="40" Required="false">
            <Label>Factions in play:</Label>
        </SelectFromImageComponent>

        <SelectComponent @bind-Value="@Ruleset" Values="@Game.GetAvailableRulesets()">
            <Label>Ruleset:</Label>
        </SelectComponent>

        <ButtonRowComponent Confirm="@Confirm" ConfirmText="Start" ConfirmError="@Validation" />
        <CheckboxComponent @bind-Value="@Settings.AutoOpenEmptySeats">Auto open all bot seats to other players at start</CheckboxComponent>
        <CheckboxComponent @bind-Value="@Settings.AsyncPlay">Async play (send e-mail updates)</CheckboxComponent>
        @if (Settings.AsyncPlay)
        {
            <SelectNumberComponent @bind-Value="@Settings.AsyncPlayMessageIntervalMinutes" Min="10" Max="120" StepDown="10" StepUp="10" Label="Minimum minutes between e-mails:"/>
        }
        
        <CheckboxComponent @bind-Value="@_advancedOptions">Change advanced options</CheckboxComponent>

        @if (_advancedOptions)
        {
            <label class="mt-1 mb-0">AI Players</label>
            @foreach (var rule in Game.GetRulesInGroup(RuleGroup.Bots, Game.ExpansionLevel))
            {
                <ChecklistItemComponent Value="@rule" Values="@Settings.InitialRules" Callback="StateHasChanged" />
            }

            foreach (var ruleGroup in EstablishPlayers.AvailableRuleGroups())
            {
                if (Game.GetRulesInGroup(ruleGroup, Game.ExpansionLevel).Any())
                {
                    <label class="mt-1 mb-0">@Client.CurrentSkin.Describe(ruleGroup)</label>
                    @foreach (var rule in Game.GetRulesInGroup(ruleGroup, Game.ExpansionLevel).OrderBy(r => Name(r)))
                    {
                        <ChecklistItemComponent Value="@rule" Values="@Settings.InitialRules" />
                    }
                }
            }
        }

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private GameSettings Settings { get; set; } = new()
    {
        NumberOfPlayers = 6,
        InitialRules = Game.RulesetDefinition[Ruleset.BasicGame].ToList(),
        AllowedFactionsInPlay = Enumerations.GetValuesExceptDefault(Faction.None).ToList(),
        MaximumTurns = 10
    };
    
    private bool _advancedOptions;
    private bool _disposed;
    private bool _initializing = true;

    private Ruleset _ruleset;
    private Ruleset Ruleset
    {
        get => _ruleset;
        set
        {
            _ruleset = value;
            RulesetChanged(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized(); 
        await LoadSettings();
        _ = Task.Delay(3600).ContinueWith(_ => UpdateSettings());
        _initializing = false;
    }

    private async Task LoadSettings()
    {
        var loadedSettingsAsString = await Browser.LoadStringSetting("treachery.online;setting.establishPlayersSettings");
        if (!string.IsNullOrEmpty(loadedSettingsAsString))
        {
            try
            {
                var loadedSettings = Utilities.Deserialize<EstablishPlayersSettings>(loadedSettingsAsString);
                
                if (loadedSettings.Settings != null)
                    Settings = loadedSettings.Settings;
                
                if (loadedSettings.Ruleset != Ruleset.None)
                    Ruleset = loadedSettings.Ruleset;
                
                _advancedOptions = loadedSettings.AdvancedOptions;
            }
            catch (Exception)
            {
                //Ignore locally stored settings
            }
        }
    }

    public override void Dispose()
    {
        _disposed = true;
    }
    
    protected override async Task Confirm()
    {
        await StoreSettings();
        await base.Confirm();
    }

    private async Task UpdateSettings()
    {
        if (_disposed)
            return;

        await Client.RequestUpdateSettings(Client.GameId, Settings);
        _ = Task.Delay(3600).ContinueWith(_ => UpdateSettings());
    }

    private async Task StoreSettings()
    {
        var savedSettings = new EstablishPlayersSettings
        {
            Settings = Settings,
            Ruleset = Ruleset,
            AdvancedOptions = _advancedOptions
        };
        
        var settingsAsString = Utilities.Serialize(savedSettings);

        try
        {
            await Browser.SaveStringSetting("treachery.online;setting.establishPlayersSettings", settingsAsString);
        }
        catch (Exception)
        {
            //Don't store settings
        }
    }

    private void RulesetChanged(Ruleset ruleset)
    {
        if (_initializing)
            return;
        
        var botRules = Settings.InitialRules.Where(r => Game.GetRuleGroup(r) == RuleGroup.Bots).ToArray();

        Settings.InitialRules.Clear();
        Settings.InitialRules.AddRange(botRules);

        if (Game.RulesetDefinition.TryGetValue(ruleset, out var value))
        {
            Settings.InitialRules.AddRange(value);
        }

        StateHasChanged();
    }

    protected override EstablishPlayers ConfirmedResult =>
        new(Game, Faction.None)
        {
            GameName = Client.PlayerName,
            Settings = Settings,
            Seed = new Random().Next()
        };

    public class EstablishPlayersSettings
    {
        public GameSettings Settings { get; init; }
        public bool AdvancedOptions { get; init; }
        public Ruleset Ruleset { get; init; }  
    }
}
