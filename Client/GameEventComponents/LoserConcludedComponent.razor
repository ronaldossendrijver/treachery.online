@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<LoserConcluded>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Please conclude the battle you lost</Header>

    <Body>

        @if (LoserConcluded.CardsLoserMayKeep(Game).Any())
        {
            <SelectFromImageComponent @bind-Value="_cardToKeep" Values=@LoserConcluded.CardsLoserMayKeep(Game) Required=false ImageWidth="80">
                <Label>You may select one card to keep:</Label>
            </SelectFromImageComponent>
        }
        else
        {
            _cardToKeep = null;
        }

        @if (LoserConcluded.CanAssassinate(Game, Player)) {

            var assassinated = LoserConcluded.TargetOfAssassination(Game, Player);

            <RadioComponent @bind-Value=_assassinate 
                Values=@(new[] {true, false}) 
                ValueLabels="@(new[] {"Yes","No"})">
                <Label>
                    <div>Execute an assassination mission by revealing <Image Shown=@assassinated Popover=@Client.CurrentSkin.GetPopup(assassinated, Game) Class="img-float" Width="50"/> as your traitor?</div>
                </Label>
            </RadioComponent>
        }
        else {

            _assassinate = false;
        }

        @if (LoserConcluded.MayUseKarmaToForceKeptCards(Game, Player))
        {
            <RadioComponent @bind-Value="_karmaDecision"
                            Values=@DecisionValues
                            ValueLabels=@DecisionValueLabels>
                <Label>Use @Name(TreacheryCardType.Karma) to force your opponent to discard or keep any or all cards used in battle?</Label>
            </RadioComponent>

            @if (_karmaDecision == LoserConcluded.KARMA_KEEP || _karmaDecision == LoserConcluded.KARMA_DISCARD)
            {
                <SelectFromImageComponent Selected="_cardsToForceKeepOrDiscard" Values=@LoserConcluded.CardsThatMayBeKeptOrDiscarded(Game) T=TreacheryCard OnChanged=StateHasChanged ImageWidth="80" />
            }
            else
            {
                _cardsToForceKeepOrDiscard = new List<TreacheryCard>();
            }
        }
        else
        {
            _karmaDecision = LoserConcluded.KARMA_NO;
            _cardsToForceKeepOrDiscard = new List<TreacheryCard>();
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    private TreacheryCard _cardToKeep;

    private bool _assassinate;

    private int _karmaDecision = LoserConcluded.KARMA_NO;

    protected override LoserConcluded ConfirmedResult => new(Game, Faction) { KeptCard = _cardToKeep, Assassinate = _assassinate, KarmaForcedKeptCardDecision = _karmaDecision, ForcedKeptOrDiscardedCards = _cardsToForceKeepOrDiscard };

    private IEnumerable<int> DecisionValues => new[] { LoserConcluded.KARMA_NO, LoserConcluded.KARMA_KEEP, LoserConcluded.KARMA_DISCARD };

    private IEnumerable<string> DecisionValueLabels => new[] { "No", "Force keeping...", "Force discarding..." };

    private List<TreacheryCard> _cardsToForceKeepOrDiscard = new();
}
