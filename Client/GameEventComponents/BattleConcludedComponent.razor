@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<BattleConcluded>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Conclude the battle you just won</Header>

    <Body>

        @if (Faction == Game.BattleWinner)
        {
            var forceSupplier = Battle.DetermineForceSupplier(Game, Player);

            var maxReplacementForces = BattleConcluded.ValidMaxReplacementForceAmount(Game, forceSupplier);
            if (maxReplacementForces > 0)
            {
                <label>How many <Image Shown="@forceSupplier.SpecialForce" Width="20"/> losses should be exchanged with <Image Shown="@forceSupplier.Force" Width="20"/>?</label>
                <SelectForcesComponent @bind-Value="@replacementAmount" Min="0" Max="maxReplacementForces" Faction="@forceSupplier.Faction" Special="true" />
            }
            else
            {
                replacementAmount = 0;
            }
                       
            if (BattleConcluded.MayChooseToDiscardCards(Game)) {

                var discardableMercenary = DiscardableMercenaryAfterBattle;
                var discardableWeapon = DiscardableWeaponAfterBattle;
                var discardableDefense = DiscardableDefenseAfterBattle;

                if (discardableMercenary != null || discardableWeapon != null || discardableDefense != null)
                {
                    <div class="mt-2">Select any cards you wish to discard:</div>

                    if (discardableMercenary != null)
                    {
                        <CheckboxComponent @bind-Value="discardMercenary">@Client.CurrentSkin.Describe(discardableMercenary)</CheckboxComponent>
                    }

                    if (discardableWeapon != null)
                    {
                        <CheckboxComponent @bind-Value="discardWeapon">@Client.CurrentSkin.Describe(discardableWeapon)</CheckboxComponent>
                    }

                    if (discardableDefense != null)
                    {
                        <CheckboxComponent @bind-Value="discardDefense">@Client.CurrentSkin.Describe(discardableDefense)</CheckboxComponent>
                    }
                }
            }

            if (BattleConcluded.MayCaptureOrKill(Game, Player))
            {
                <div>Our troops captured <Image Shown=@Game.BlackVictim Popover=@Client.CurrentSkin.GetPopup(Game.BlackVictim, Game) Class="img-float" Width="50"/></div>
                <RadioComponent @bind-Value="captureDecision" Values="@BattleConcluded.ValidCaptureDecisions(Game)">
                        <Label>What are your orders, keep or kill?</Label>
                 </RadioComponent>
            }

            if (Loser.TechTokens.Count > 0)
            {
                <SelectFromImageComponent @bind-Value="stolenToken" Values="Loser.TechTokens" Required=true>

                    <Label>
                        @if (Loser.TechTokens.Count == 1) 
                        {
                            <span>You will steal the following tech token:</span>
                        }
                        else 
                        {
                            <span>Choose a tech token to steal:</span>
                        }
                    </Label>

                </SelectFromImageComponent>
            }
            else {
                
                stolenToken = TechToken.None;
            }

            if (Game.TraitorsDeciphererCanLookAt.Any())
            {
                <SelectFromImageComponent Game="Game" @bind-Value="selectedNewTraitor" Values="Game.TraitorsDeciphererCanLookAt" Required="false" ImageWidth="80">
                    <Label>@Client.CurrentSkin.Describe(LeaderSkill.Decipherer) shows you the following leaders from the traitor deck:</Label>
                </SelectFromImageComponent>

                @if (Game.DeciphererMayReplaceTraitor)
                {
                    var toReplace = Faction == Faction.Purple ? "facedancers" : "traitors";

                    <SelectFromImageComponent Game="Game" @bind-Value="traitorToReplace" Values="BattleConcluded.ValidTraitorsToReplace(Player)" Required="false" ImageWidth="80">
                        <Label>If you wish, you may select one of the above leaders to reveal and replace one of your current @toReplace:</Label>
                    </SelectFromImageComponent>
                }
                else
                {
                    traitorToReplace = null;
                }
            }
            else
            {
                selectedNewTraitor = null;
                traitorToReplace = null;
            }

            if (BattleConcluded.MayAddExtraForce(Game, Player))
            {
                <CheckboxComponent @bind-Value="addExtraForce">Do you wish to add one force from reserves in @Name(Game.CurrentBattle.Territory)?</CheckboxComponent>
            }
            else
            {
                addExtraForce = false;
            }
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@ConfirmLabel" ConfirmError="@Validation" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    private CaptureDecision captureDecision = CaptureDecision.Kill;
    private bool discardMercenary;
    private bool discardWeapon;
    private bool discardDefense;
    private TechToken stolenToken;
    private int replacementAmount;
    private IHero selectedNewTraitor;
    private IHero traitorToReplace;
    private bool addExtraForce;

    protected override BattleConcluded ConfirmedResult => new(Game, Faction)
    {
        DiscardedCards = DetermineSelectedCards(),
        StolenToken = stolenToken,
        SpecialForceLossesReplaced = replacementAmount,
        DecisionToCapture = captureDecision,
        TraitorToReplace = traitorToReplace,
        NewTraitor = selectedNewTraitor,
        AddExtraForce = addExtraForce
    };

    private IEnumerable<TreacheryCard> DetermineSelectedCards()
    {
        var result = new List<TreacheryCard>();
        if (discardMercenary) result.Add(DiscardableMercenaryAfterBattle);
        if (discardWeapon) result.Add(DiscardableWeaponAfterBattle);
        if (discardDefense) result.Add(DiscardableDefenseAfterBattle);
        return result;
    }

    private void CaptureDecisionOnChange(ChangeEventArgs args)
    {
        captureDecision = Enum.Parse<CaptureDecision>((string)args.Value);
        StateHasChanged();
    }

    private TreacheryCard DiscardableMercenaryAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && action.Hero is TreacheryCard && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Hero))
            {
                return action.Hero as TreacheryCard;
            }

            return null;
        }
    }

    private TreacheryCard DiscardableWeaponAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Weapon))
            {
                return action.Weapon;
            }

            return null;
        }
    }

    private TreacheryCard DiscardableDefenseAfterBattle
    {
        get
        {
            var action = MyBattleAction;
            if (action != null && Game.BattleWinner == Faction && Player.TreacheryCards.Contains(action.Defense))
            {
                return action.Defense;
            }

            return null;
        }
    }

    private Battle MyBattleAction
    {
        get
        {
            if (Game.AggressorPlan != null)
            {
                return Game.AggressorPlan.Initiator == Faction ? Game.AggressorPlan : Game.DefenderPlan;
            }

            return null;
        }
    }

    private Player Loser => Game.GetPlayer(Game.BattleLoser);

    private string ConfirmLabel => traitorToReplace == null ? "Conclude Battle" : Client.CurrentSkin.Format("Conclude Battle and Reveal & Replace {0}", traitorToReplace);
}
