@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<BlueAccompanies>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Accompany the latest shipment?</Header>
    <Body>

        <SelectComponent ButtonHint="ClickHintButton.Lmb" @bind-Value="target" Values="BlueAccompanies.ValidTargets(Game, Player)">
            <Label>To</Label>
        </SelectComponent>

        @if (BlueAccompanies.MaySendExtraAdvisor(Game, Player, target))
        {
            <CheckboxComponent @bind-Value="addExtraAdvisor">Do you wish to send one additional @Name(Player.SpecialForce)?</CheckboxComponent>
        }
        else
        {
            addExtraAdvisor = false;
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="Yes" ConfirmError="@Validation" Pass="Pass" PassText="No" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;
    protected override Faction IsFactionSpecific => Faction.Blue;

    private Location target;
    private bool addExtraAdvisor;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Client.OnLocationSelected += HandleLocationSelected;
        }
    }

    public override void Dispose()
    {
        base.Dispose();
        Client.OnLocationSelected -= HandleLocationSelected;
    }

    protected override BlueAccompanies ConfirmedResult => new(Game, Faction) { Location = target, Accompanies = true, ExtraAdvisor = addExtraAdvisor };

    protected override BlueAccompanies PassedResult => new(Game, Faction) { Accompanies = false };

    private void HandleLocationSelected(object sender, Location l)
    {
        SetIfValid(ref target, BlueAccompanies.ValidTargets(Game, Player), l);
    }
}
