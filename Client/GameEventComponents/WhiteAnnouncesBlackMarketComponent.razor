@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameEventComponent<WhiteAnnouncesBlackMarket>

<GameEventComponentLayout IsUrgent="@IsUrgent" BackgroundStyle="@BackgroundStyle" HeaderStyle="@HeaderStyle" BodyStyle="@BodyStyle" CollapsedType="GetType()">

    <Header>Select a card to put on the Black Market, or pass</Header>
    <Body>

        <SelectFromImageComponent @bind-Value="card" Values="WhiteAnnouncesBlackMarket.ValidCards(Player)" Required="true" ImageWidth="80" />

        <RadioComponent @bind-Value="auctionType" Values="new[] { AuctionType.BlackMarketNormal, AuctionType.BlackMarketOnceAround, AuctionType.BlackMarketSilent }" ValueLabels="@(new[] { "Normal", "Once Around", "Silent"})">
            <Label>Type of auction</Label>
        </RadioComponent>

        @if (auctionType == AuctionType.BlackMarketOnceAround)
        {
            <RadioComponent @bind-Value="direction" Values="new[] { 1, -1 }" ValueLabels="@(new[] { "Counter-clockwise", "Clockwise"})">
                <Label>Bidding direction</Label>
            </RadioComponent>
        }

        <ButtonRowComponent Confirm="Confirm" ConfirmText="@Client.CurrentSkin.Format("Put {0} on Black Market", card)" ConfirmError="@Validation" Pass="Pass" PassText="Pass" />

    </Body>

</GameEventComponentLayout>

@code {

    protected override bool IsUrgent => true;

    protected override Faction IsFactionSpecific => Faction.White;

    private TreacheryCard card;
    private AuctionType auctionType = AuctionType.BlackMarketNormal;
    private int direction = 1;

    protected override WhiteAnnouncesBlackMarket ConfirmedResult => new(Game, Faction) { Card = card, AuctionType = auctionType, Direction = direction };

    protected override WhiteAnnouncesBlackMarket PassedResult => new(Game, Faction) { Passed = true };
}
