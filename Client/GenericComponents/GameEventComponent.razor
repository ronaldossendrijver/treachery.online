@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent
@typeparam T
 
@code {

    protected virtual Faction IsFactionSpecific { get; set; } = Faction.None;

    protected virtual bool IsUrgent { get; set; } = false;

    [Parameter]
    public virtual string BackgroundImage
    {
        get => Background;
        set => Background = value;
    }

    protected virtual string Background { get; set; } = "";

    protected virtual async Task Confirm()
    {
        await Request(ConfirmedResult);
        StateHasChanged();
    }

    protected async Task Pass()
    {
        await Request(PassedResult);
        StateHasChanged();
    }

    protected async Task Other()
    {
        await Request(OtherResult);
        StateHasChanged();
    }

    protected Message Validation
    {
        get
        {
            try
            {
                return ConfirmedResult.Validate();
            }
            catch (Exception)
            {
                return Message.Express("Validation failed");
            }
        }
    }

    protected void SetIfValid<DisplayType, OriginalType>(ref DisplayType field, IEnumerable<OriginalType> validValues, OriginalType newValue)
    {
        if ((object)field != (object)newValue && validValues.Contains(newValue))
        {
            var sameType = typeof(OriginalType) == typeof(DisplayType);
            var useId = typeof(DisplayType) == typeof(int) && typeof(IIdentifiable).IsAssignableFrom(typeof(OriginalType));

            if (sameType)
            {
                field = (DisplayType)(object)newValue;
            }
            else if (useId)
            {
                field = (DisplayType)(object)((IIdentifiable)newValue).Id;
            }
            else
            {
                field = (DisplayType)(object)Name(newValue);
            }

            StateHasChanged();
        }
    }

    protected string BackgroundStyle
    {
        get
        {
            if (Background == "")
            {
                if (IsFactionSpecific == Faction.None)
                {
                    return "";
                }

                return string.Format("background-color: {0};", Client.CurrentSkin.GetFactionColorTransparent(IsFactionSpecific, "bb"));
            }

            return string.Format("background-color: rgba(0,0,0,0); background-image: url('{0}'); background-origin: content-box; background-size: cover; background-repeat: no-repeat;", BackgroundImage);
        }
    }

    protected string HeaderStyle => Background != "" ? "background-color:rgba(0,0,0,0.9);" : "";

    protected string BodyStyle => Background != "" ? "background-color:rgba(0,0,0,0.7);" : "";
}
