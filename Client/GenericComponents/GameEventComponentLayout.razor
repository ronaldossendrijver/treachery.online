@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

<div class="card @Width @Border mb-2" style="@BackgroundStyle ;animation:fadeIn 1s;">

    @if (Collapsible)
    {
        <div class="card-header" style="@HeaderStyle;cursor:pointer;" @onclick=@(e => CollapsedInternal = !CollapsedInternal)>

            <CollapseButton @bind-Collapsed=@CollapsedInternal />
            @Header

        </div>
    }

    @if (!_collapsedInternal) 
    {
        <div class="card-body" style="@BodyStyle">
            <ErrorBoundary @ref=errorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <div class="alert alert-danger">
                        An error has occured displaying this game action. Please report this issue using the 
                        <a class="btn btn-link p-1" href="https://github.com/ronaldossendrijver/treachery.online/issues" target="_blank" title="Report a bug or suggest improvements">
                            <svg width="98" height="96" viewBox="0 0 98 96" xmlns="http://www.w3.org/2000/svg" style="width:18px;height:18px;">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z" fill="white"/>
                            </svg>
                        </a>
                        button and include a savegame file of the current situation.
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        </div>
    }

</div>

@code {

    private static Dictionary<Type, bool> SavedCollapsedStateValues = new();

    [Parameter]
    public bool IsUrgent { get; set; }

    [Parameter]
    public string Width { get; set; } = "";

    [Parameter]
    public string BackgroundStyle { get; set; }

    [Parameter]
    public string HeaderStyle { get; set; }

    [Parameter]
    public string BodyStyle { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public bool Collapsible { get; set; } = true;

    [Parameter]
    public CollapseState Collapsed { get; set; }

    private bool CollapsedInternal
    {
        get => _collapsedInternal;

        set
        {
            _collapsedInternal = value;
            SaveCollapsed(value);
        }
    }

    private bool _collapsedInternal;

    [Parameter]
    public Type CollapsedType { get; set; }

    [Parameter]
    public GameEvent TimedEvent { get; set; } = null;

    private string Border => IsUrgent ? "border-white" : "";

    private ErrorBoundary errorBoundary;

    protected override void OnAfterRender(bool firstRender)
    {
        errorBoundary?.Recover();
    }

    private bool _parametersSet;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!_parametersSet) 
        {
            _parametersSet = true;

            if (Collapsed == CollapseState.None)
            {
                if (CollapsedType != null && SavedCollapsedStateValues.TryGetValue(CollapsedType, out var storedValue))
                {
                    _collapsedInternal = storedValue;
                }
                else
                {
                    _collapsedInternal = false;
                }
            }
            else
            {
                _collapsedInternal = Collapsed == CollapseState.Collapsed;
            }
        }
    }

    protected void SaveCollapsed(bool value) {

        if (CollapsedType != null)
        {
            SavedCollapsedStateValues.Remove(CollapsedType);
            SavedCollapsedStateValues.Add(CollapsedType, CollapsedInternal);
        }
    }
}
