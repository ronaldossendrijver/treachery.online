@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent;
@typeparam T

<div class="mt-1">

    @if (Label != null)
    {
        <label class="mb-0" for=@Id>
            @Label
            <ClickHintComponent Button="@ButtonHint" Modifier="@ModifierHint" />
        </label>
    }

    <select class="form-select" style="cursor:pointer" @onchange="@(ChangeValue)" disabled="@Disabled" id="@Id">

        @if (AddEmptyValue)
        {
            <option value="">@EmptyLabel</option>
        }

        @Options

        @foreach (var item in Values) {

            <option value=@GetId(item) selected=@Equals(item, Value)>@GetLabel(item)</option>
        }

    </select>

</div>

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public IEnumerable<string> ValueLabels { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<T> OnChanged { get; set; }

    [Parameter]
    public bool AddEmptyValue { get; set; } = false;

    [Parameter]
    public string EmptyLabel { get; set; } = "";

    [Parameter]
    public RenderFragment Options { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public ClickHintButton ButtonHint { get; set; } = ClickHintButton.None;

    [Parameter]
    public ClickHintModifier ModifierHint { get; set; } = ClickHintModifier.None;

    [Parameter]
    public bool Required { get; set; } = true;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!Values.Contains(Value))
        {
            await SetValue(Required ? Values.FirstOrDefault() : default);
        }
    }

    private async Task ChangeValue(ChangeEventArgs e)
    {
        await SetValue(Values.FirstOrDefault(v => GetId(v).Equals(e.Value as string)));
    }

    private async Task SetValue(T newValue) {

        if (!Equals(Value, newValue))
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
            await OnChanged.InvokeAsync(newValue);
        }
    }

    private string GetLabel(T value) 
    {
        if (value == null)
        {
            return EmptyLabel;
        }

        if (ValueLabels != null && ValueLabels.Count() == Values.Count())
        {
            var i = 0;
            foreach (var item in Values)
            {
                if (value.Equals(item)) return ValueLabels.ElementAt(i);
                i++;
            }
        }

        return Client.CurrentSkin.Describe(value);
    }
}
