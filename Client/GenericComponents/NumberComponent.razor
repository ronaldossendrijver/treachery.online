@using System.Globalization
@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

<div style="display: inline-block; position: relative; height: @SymbolSize; width: @SymbolSize; @Pointer;" title="@Title" @onclick="@OnClick">

    @if (DrawSymbolBackground)
    {
        <svg style="position: absolute; left: 0; top: 0; width: @SymbolSize; height: @SymbolSize;" width="32" height="32" viewBox="0 0 32 32"><circle cx="16" cy="16" r="15.5" stroke="@SymbolBackgroundBorderColor" stroke-width="2%" fill="@SymbolBackgroundFillColor" /></svg>
    }

    @if (SymbolSrc != null)
    {
        <img src="@SymbolSrc" style="position: absolute; left: 0; top: 0; width: @SymbolSize;" alt="@Value"/>
    }

    @if (DrawNumberBackground)
    {
        <svg style="position: absolute; left: 0; top: 0; width: @SymbolSize; height: @SymbolSize;" width="16" height="16" viewBox="0 0 16 16"><circle cx="@NumberBackgroundOffsetX" cy="@NumberBackgroundOffsetY" r="@NumberBackgroundRadius" stroke="@NumberBackgroundBorderColor" stroke-width="2%" fill="@NumberBackgroundFillColor" /></svg>
    }

    @if (BehindNumberSrc != null)
    {
        <img src="@BehindNumberSrc" style="position: absolute; left: @BehindNumberImageOffsetX; top:@BehindNumberImageOffsetY; width: @BehindNumberImageSize;" alt="@Value"/>
    }

    <span style="position: absolute; left: @NumberBoxOffsetX; top:@NumberBoxOffsetY; width: @NumberBoxSize; font-size: @NumberFontSize; font-weight: bold; color: @NumberColor; line-height: 1.0; text-align:center; white-space:nowrap; @NumberBorder">@Value</span>

</div>

@code {

    [Parameter]
    public float Value { get; set; }

    [Parameter]
    public string SymbolSrc { get; set; }

    [Parameter]
    public string SymbolBackgroundFillColor { get; set; }

    [Parameter]
    public string SymbolBackgroundBorderColor { get; set; }

    [Parameter]
    public string NumberColor { get; set; } = "black";

    [Parameter]
    public string NumberBorderColor { get; set; } = "white";

    [Parameter]
    public int NumberBorderWidth { get; set; }

    [Parameter]
    public NumberAlignment NumberAlignment { get; set; } = NumberAlignment.Center;

    [Parameter]
    public string NumberBackgroundFillColor { get; set; }

    [Parameter]
    public string NumberBackgroundBorderColor { get; set; }

    [Parameter]
    public string BehindNumberSrc { get; set; }

    [Parameter]
    public int Size { get; set; } = 36;

    [Parameter]
    public string Title { get; set; } = "";
    
    [Parameter]
    public EventCallback OnClick { get; set; }

    private string SymbolSize => "" + Size + "px";

    private bool DrawSymbolBackground => SymbolBackgroundFillColor != null || SymbolBackgroundBorderColor != null;

    private bool DrawNumberBackground => NumberBackgroundFillColor != null || NumberBackgroundBorderColor != null;

    private string NumberBoxSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + Size + "px",
                NumberAlignment.BottomRight => "" + (int)(0.6f * Size) + "px",
                _ => "0px"
            };
        }
    }

    private string NumberBoxOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "0",
                NumberAlignment.BottomRight => Px(0.4f * Size),
                _ => "0"
            };
        }
    }

    private string NumberBoxOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => Px(0.05f * Size),
                NumberAlignment.BottomRight => Px(0.45f * Size),
                _ => "0"
            };
        }
    }

    private string BehindNumberImageSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => Px(1.2 * Size),
                NumberAlignment.BottomRight => Px(0.7 * Size),
                _ => "0"
            };
        }
    }

    private string BehindNumberImageOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => Px(-0.1 * Size),
                NumberAlignment.BottomRight => Px(0.35f * Size),
                _ => "0"
            };
        }
    }

    private string BehindNumberImageOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => Px(-0.1 * Size),
                NumberAlignment.BottomRight => Px(0.35f * Size),
                _ => "0"
            };
        }
    }

    private string NumberFontSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => Px(0.8f * Size),
                NumberAlignment.BottomRight => Px(0.8f * Size),
                _ => "0"
            };
        }
    }

    private string NumberBackgroundRadius
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "7.5",
                NumberAlignment.BottomRight => "4.75",
                _ => "0"
            };
        }
    }

    private int NumberBackgroundOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private int NumberBackgroundOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private string NumberBorder => NumberBorderWidth > 0 ? Support.TextBorder(NumberBorderWidth, NumberBorderColor) : "";
    
    private string Pointer => OnClick.HasDelegate ? "cursor: pointer;" : string.Empty;

    private static string Px(double x)
        => x.ToString(CultureInfo.InvariantCulture) + "px";
}
