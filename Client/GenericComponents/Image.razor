@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@implements IDisposable;

@if (!PopoverAsTooltip && Popover != null)
{
    if (OnClick.HasDelegate || OnMouseOver.HasDelegate || OnMouseOut.HasDelegate)
    {
        <img class=@Class style="@Shadow; @Style; @Pointer; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" @ref=@element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
    else
    {
        <img class=@Class style="@Shadow; @Style; @Pointer; @Filter" width=@ImgWidth src=@Src @ref=@element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
}
else if (Popover != null)
{
    <img class=@Class style="@Shadow; @Style; @Pointer; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" title=@Popover />
}
else
{
    <img class=@Class style="@Shadow; @Style; @Pointer; @Filter" width=@ImgWidth src=@Src @onclick="e => OnClick.InvokeAsync()" @onmouseenter="e => OnMouseOver.InvokeAsync()" @onmouseout="e => OnMouseOut.InvokeAsync()" />
}

@code {

    [Parameter]
    public object Shown { get; set; }

    [Parameter]
    public string Src { get; set; }

    [Parameter]
    public string Popover { get; set; }
    private string _popover;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; } = false;

    [Parameter]
    public float Width { get; set; } = 0;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Filter { get; set; } = "";

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback OnMouseOver { get; set; }

    [Parameter]
    public EventCallback OnMouseOut { get; set; }

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public string Shadow { get; set; } = "filter: drop-shadow(1px 1px 1px black);";

    private ElementReference element;
    private string ImgWidth;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ImgWidth = Width > 0 ? Support.Round(Width) : "";

        if (Shown != null)
        {
            Src = Skin.Current.GetImageUrl(Shown);
            PopoverAsTooltip = !ShownHasRichPopover;
            Popover = GetShownPopover();
        }

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsRefresh = !PopoverAsTooltip;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null && !PopoverAsTooltip)
        {
            await Browser.EnablePopover(element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(element);
        }
    }

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(element);
        }
    }

    private string GetShownPopover()
    {
        return Shown switch
        {
            null => "",
            TreacheryCard tc => Popup.Get(tc),
            ResourceCard rc => Popup.Get(rc),
            IHero h => Game != null ? Popup.Get(h, Game) : Popup.Get(h),
            LeaderSkill ls => Popup.Get(ls),
            TechToken tt => Popup.Get(tt),
            StrongholdAdvantage loc => Popup.Get(loc),

            TerrorType terr => Skin.Current.GetTerrorTypeDescription(terr),
            Ambassador amb => Skin.Current.GetAmbassadorDescription(amb),

            _ => Skin.Current.Describe(Shown)
        };
    }

    private bool ShownHasRichPopover => Shown is TreacheryCard || Shown is ResourceCard || Shown is IHero || Shown is LeaderSkill || Shown is TechToken || Shown is StrongholdAdvantage;

    private string Pointer => Popover != null ? "cursor:pointer" : "";
}
