@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@implements IDisposable;

@if (!PopoverAsTooltip && Popover != null)
{
    if (OnClick.HasDelegate)
    {
        <img alt="@Alt" class="@JointClass" width=@_imgWidth src=@Src @onclick="@OnClick" @ref=@_element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
    else
    {
        <img alt="@Alt" class="@JointClass" width=@_imgWidth src=@Src @ref=@_element data-bs-toggle="popover" data-bs-animation="true" data-bs-html="true" data-bs-placement="auto" data-bs-trigger="hover" data-bs-content=@Popover />
    }
}
else if (Popover != null)
{
    <img alt="@Alt" class="@JointClass" width=@_imgWidth src=@Src @onclick="@OnClick" title=@Popover />
}
else
{
    <img alt="@Alt" class="@JointClass" width=@_imgWidth src=@Src @onclick="@OnClick"/>
}

@code {

    [Parameter]
    public object Shown { get; set; }

    [Parameter]
    public string Src { get; set; }

    [Parameter]
    public string Popover { get; set; }
    private string _popover;
    private bool _popoverNeedsRefresh;

    [Parameter]
    public bool PopoverAsTooltip { get; set; }

    [Parameter]
    public float Width { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public Game Game { get; set; }
    
    [Parameter]
    public bool NoShadow { get; set; }
    
    [Parameter]
    public bool HighlightOnHover { get; set; }
    
    [Parameter]
    public bool Highlighted { get; set; }
    
    [Parameter]
    public bool Darkened { get; set; }
    
    [Parameter]
    public bool Blurred { get; set; }
    
    [Parameter]
    public bool GreyedOut { get; set; }

    [Parameter]
    public bool Pointer { get; set; }
    
    private ElementReference _element;
    private string _imgWidth;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _imgWidth = Width > 0 ? Support.Round(Width) : "";

        if (Shown != null)
        {
            Src = Client.CurrentSkin.GetImageUrl(Shown);
            PopoverAsTooltip = !ShownHasRichPopover;
            Popover = GetShownPopover();
        }

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsRefresh = !PopoverAsTooltip;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Popover != null && !PopoverAsTooltip)
        {
            await Browser.EnablePopover(_element);
        }
        else if (_popoverNeedsRefresh)
        {
            _popoverNeedsRefresh = false;
            await Browser.RefreshPopover(_element);
        }
    }

    public void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(_element);
        }
    }

    private string GetShownPopover()
    {
        return Shown switch
        {
            null => "",
            TreacheryCard tc => Client.CurrentSkin.GetPopup(tc),
            ResourceCard rc => Client.CurrentSkin.GetPopup(rc),
            IHero h => Game != null ? Client.CurrentSkin.GetPopup(h, Game) : Client.CurrentSkin.GetPopup(h),
            LeaderSkill ls => Client.CurrentSkin.GetPopup(ls),
            TechToken tt => Client.CurrentSkin.GetPopup(tt),
            StrongholdAdvantage loc => Client.CurrentSkin.GetPopup(loc),
            TerrorType terr => Client.CurrentSkin.GetTerrorTypeDescription(terr),
            Ambassador amb => Client.CurrentSkin.GetAmbassadorDescription(amb),
            _ => Client.CurrentSkin.Describe(Shown)
        };
    }

    private string Alt => Shown != null ? Client.CurrentSkin.Describe(Shown) : "";

    private string JointClass => $"{ImageClass} {Class} {ShadowClass} {PointerClass} {HighlightedClass} {DarkenedClass} {BlurredClass} {GreyedOutClass}";

    private bool ShownHasRichPopover => Shown is TreacheryCard or ResourceCard or IHero or LeaderSkill or TechToken or StrongholdAdvantage;

    private string PointerClass => Popover != null || Pointer ? "pointer" : "";

    private string ImageClass => HighlightOnHover ? "image-hover" : "image";
    
    private string ShadowClass => NoShadow ? "" : "shadow";
    
    private string HighlightedClass => Highlighted ? "highlighted" : "";
    
    private string DarkenedClass => Darkened ? "darkened" : "";
    
    private string BlurredClass => Blurred ? "blurred" : "";
    
    private string GreyedOutClass => GreyedOut ? "greyed" : "";
}
