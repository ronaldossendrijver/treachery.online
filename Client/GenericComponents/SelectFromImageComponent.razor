@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@typeparam T

@if (Label != null)
{
    <label class="d-block mt-1 mb-0">@Label</label>
}

<div>

    @foreach (var valueToShow in Values)
    {
        <Image Shown=@valueToShow Game=Game
               OnClick="e => Click(valueToShow)"
               OnMouseOver="e => MouseOver(valueToShow)"
               OnMouseOut="e => MouseOut(valueToShow)"
               Filter=@DetermineFilter(valueToShow)
               Style="cursor:pointer;padding-right:4px"
               Width=@ImageWidth 
               PopoverAsTooltip=@PopupsAsTooltip/>
    }

</div>

@code {

    [Parameter]
    public IEnumerable<T> Values { get; set; }

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<T> OnChanged { get; set; }    
    
    [Parameter]
    public List<T> Selected { get; set; }

    [Parameter]
    public int ImageWidth { get; set; } = 60;

    [Parameter]
    public string UnselectedFilter { get; set; } = "grayscale(50%) brightness(50%) contrast(80%)";

    [Parameter]
    public string HoverFilter { get; set; } = "brightness(130%)";

    [Parameter]
    public bool Required { get; set; } = true;

    [Parameter]
    public RenderFragment Label { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool PopupsAsTooltip { get; set; } = false;

    [Parameter]
    public Game Game { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Selected == null && !Values.Contains(Value) && Required)
        {
            Value = Values.FirstOrDefault();
            await Notify();
        }
    }

    private async Task SwapSelection(T value)
    {
        if (Selected.Contains(value))
        {
            Selected.Remove(value);
        }
        else
        {
            Selected.Add(value);
        }

        await Notify();
    }

    private async Task Click(T item)
    {
        if (!Disabled)
        {
            if (Selected == null)
            {
                if (Equals(Value, item))
                {
                    if (!Required)
                    {
                        Value = default;
                        await Notify();
                    }
                }
                else
                {
                    Value = item;
                    await Notify();
                }
            }
            else
            {
                await SwapSelection(item);
            }
        }
    }

    private T _hovered = default;

    private void MouseOver(T item)
    {
        _hovered = item;
    }

    private void MouseOut(T item)
    {
        _hovered = default;
    }

    private string DetermineFilter(T item)
    {
        var result = "filter:";

        if (Selected == null)
        {
            if (!Equals(Value, item)) result += UnselectedFilter + " ";
        }
        else
        {
            if (!Selected.Contains(item)) result += UnselectedFilter + " ";
        }

        if (Equals(_hovered, item)) result += HoverFilter;
        return result;
    }

    private async Task Notify() {

        await ValueChanged.InvokeAsync(Value);
        await OnChanged.InvokeAsync(Value);
    }
}
