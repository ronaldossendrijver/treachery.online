@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits GameComponent

<div class="mt-1 p-1 border">
    @if (Game.CurrentPhase is Phase.AwaitingPlayers)
    {
        foreach (var userId in Game.Participation.SeatedPlayers.Keys)
        {
            var isMe = Client.UserId == userId;
            var isHost = Game.IsHost(userId);
            var emphasis = isMe ? "gold" : "white";

            <div style="border-bottom: 1px solid darkgrey; min-height: 2rem; vertical-align: center;">
                <span class="@emphasis" style="font: normal normal normal 18px Advokat, Calibri, Tahoma, sans-serif; color: @emphasis;">
                    @Game.GetPlayerName(userId)
                </span>
                @if (isHost)
                {
                    <HostIcon Size="18"/>
                }
                @if (Client.IsHost)
                {
                    if (!isHost)
                    {
                        <CommandButton Small MarginClass="m-1" OnClick="@(_ => SetOrUnsetHost(userId))">Make host</CommandButton>
                    }
                    if (!isMe)
                    {
                        <CommandButton Small Class="btn-danger" MarginClass="m-1" OnClick="@(_ => Remove(userId, true))">Kick</CommandButton>
                    }
                }
            </div>
        }
    }
    else
    {
        foreach (var player in Game.Players.OrderBy(p => p.Seat))
        {
            var userId = Game.GetUserIdOfPlayer(player);
            var makeAvailableText = Game.SeatIsAvailable(player.Seat) ? "Close" : "Open";
            var isMe = Client.UserId == userId;
            var isHost = Game.IsHost(userId);

            <div style="border-bottom: 1px solid darkgrey; min-height: 2rem;">
                @if (player.Faction != Faction.None)
                {
                    <FactionComponent Faction="@player.Faction" Diameter="20"/>    
                } 
                @if (Game.IsBot(player))
                {
                    <BotIcon Size="18"/>
                }
                else
                {
                    var emphasis = isMe ? "gold" : "white";
                    <span class="m-1" style="font: normal normal normal 18px Advokat, Calibri, Tahoma, sans-serif; color: @emphasis;">@Game.GetPlayerName(player)</span>
                }
                @if (isHost)
                {
                    <HostIcon Size="18"/>
                }
                @if (Game.SeatIsAvailable(player.Seat))
                {
                    <span class="badge text-bg-success">open</span>
                }
                @if (Client.IsHost)
                {
                    <CommandButton Small MarginClass="m-1" OnClick="@(_ => OpenSeat(player.Seat))">@makeAvailableText seat</CommandButton>
                    @if (!Game.IsBot(player))
                    {
                        if (!isHost)
                        {
                            <CommandButton Small MarginClass="m-1" OnClick="@(_ => SetOrUnsetHost(userId))">Make host</CommandButton>
                        }

                        if (!isMe)
                        {
                            <CommandButton Small Class="btn-danger" MarginClass="m-1" OnClick="@(_ => Remove(userId, true))">Kick</CommandButton>
                        }
                    }

                    <br>
                }
            </div>
        }
    }
    <div class="text-danger align-bottom">@ActionResult</div>
    @if (!Client.IsHost)
    {
        <CommandButton Small Class="btn-danger" MarginClass="mt-2" OnClick="@(_ => Remove(Client.UserId, false))">Leave game</CommandButton>
    }
    @if (Client.IsHost && Client.InGame && Game.CurrentPhase >= Phase.TradingFactions)
    {
        <CommandButton Small Class="btn-warning" MarginClass="mt-2 ms-1" OnClick="@(_ => Reseat())">Re-seat players</CommandButton>
    }
    @if (Game.NumberOfObservers > 0)
    {
        <div>
            <label class="mt-1 mb-0">Observers</label>
        </div>
        <div>
            @foreach (var o in Game.ObserverNames)
            {
                <span class="me-1" style="font: normal normal normal 18px Advokat, Calibri, Tahoma, sans-serif; color: white;">@o</span>
            }
        </div>
    }
</div>

@code {

    private string ActionResult { get; set; } = string.Empty;
    
    private async Task Remove(int userId, bool kick)
    {
        if (kick)
        {
            ActionResult = await Client.RequestKick(userId);
        }
        else
        {
            await Client.RequestLeaveGame();
            ActionResult = string.Empty;
        }
    }

    private async Task SetOrUnsetHost(int userId)
    {
        ActionResult = await Client.RequestSetOrUnsetHost(userId);
    }

    private async Task OpenSeat(int seatId)
    {
        ActionResult = await Client.RequestOpenOrCloseSeat(seatId);
    }
    
    private void Reseat()
    {
        Client.RequestReseat();
    }
}
