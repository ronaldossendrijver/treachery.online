@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

<div style="display:inline-block;position:relative;height:@SymbolSize;width:@TotalWidth;user-select:none;" title="@Title">

    @if (DrawSymbolBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0; top: 0; width: @SymbolSize; height: @SymbolSize;" width="32" height="32" viewBox="0 0 32 32"><circle cx="16" cy="16" r="15.5" stroke="@SymbolBackgroundBorderColor" stroke-width="2%" fill="@SymbolBackgroundFillColor" /></svg>
    }

    
    @if (SymbolSrc != null)
    {
        <img src="@SymbolSrc" style="position: absolute; left: 0; top: 0; width: @SymbolSize;"/>
    }

    @if (DrawNumberBackground)
    {
        <svg xmlns="http://www.w3.org/2000/svg" style="position: absolute; left: 0; top: 0; width: @SymbolSize; height: @SymbolSize;" width="16" height="16" viewBox="0 0 16 16"><circle cx="@NumberBackgroundOffsetX" cy="@NumberBackgroundOffsetY" r="@NumberBackgroundRadius" stroke="@NumberBackgroundBorderColor" stroke-width="2%" fill="@NumberBackgroundFillColor" /></svg>
    }

    @if (BehindNumberSrc != null)
    {
        <img src="@BehindNumberSrc" style="position: absolute; left: @BehindNumberImageOffsetX; top:@BehindNumberImageOffsetY; width: @BehindNumberImageSize;" />
    }

    <span @onclick="@(async e => await Click(e))" style="cursor: pointer; position: absolute; left: @NumberBoxOffsetX; top:@NumberBoxOffsetY; width: @NumberBoxSize; font-size: @NumberFontSize; font-weight: bold; color: @NumberColor; line-height: 1.0; text-align:center; white-space:nowrap;">@Value</span>

    <svg 
        @onclick="@(async e => await Increase())"
        @onmouseover="@(e => MouseOver(true))"
        @onmouseout="@(e => MouseOut(true))"
        xmlns="http://www.w3.org/2000/svg" width="@ArrowSize" height="@ArrowSize" fill="@IncreaseArrowColor" viewBox="0 0 16 16" style="position: absolute; left: @ArrowOffsetX; top: 3px; width: @ArrowSize; filter: @UpStyle; pointer-events: bounding-box; cursor:pointer;">
         <path fill-rule="evenodd" d="M7.022 1.566a1.13 1.13 0 0 1 1.96 0l6.857 11.667c.457.778-.092 1.767-.98 1.767H1.144c-.889 0-1.437-.99-.98-1.767L7.022 1.566z" />
    </svg>

    <svg 
        @onclick="@(async e => await Decrease())"
        @onmouseover="@(e => MouseOver(false))"
        @onmouseout="@(e => MouseOut(false))"
         xmlns="http://www.w3.org/2000/svg" width="@ArrowSize" height="@ArrowSize" fill="@DecreaseArrowColor" viewBox="0 0 16 16" style="position: absolute; left: @ArrowOffsetX; bottom: 3px; width: @ArrowSize; filter: @DownStyle; pointer-events: bounding-box; cursor:pointer;">
        <path transform="rotate(180,8,8)" fill-rule="evenodd" d="M7.022 1.566a1.13 1.13 0 0 1 1.96 0l6.857 11.667c.457.778-.092 1.767-.98 1.767H1.144c-.889 0-1.437-.99-.98-1.767L7.022 1.566z" />
    </svg>

</div>

@code {

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnChanged { get; set; }

    [Parameter]
    public EventCallback OnUp { get; set; }

    [Parameter]
    public EventCallback OnDown { get; set; }

    [Parameter]
    public int Min { get; set; }

    [Parameter]
    public int Max { get; set; } = 10;

    [Parameter]
    public int StepUp { get; set; } = 1;

    [Parameter]
    public int StepDown { get; set; } = 1;

    [Parameter]
    public string SymbolSrc { get; set; }

    [Parameter]
    public string SymbolBackgroundFillColor { get; set; }

    [Parameter]
    public string SymbolBackgroundBorderColor { get; set; }

    [Parameter]
    public string NumberColor { get; set; } = "black";

    [Parameter]
    public NumberAlignment NumberAlignment { get; set; } = NumberAlignment.Center;

    [Parameter]
    public string NumberBackgroundFillColor { get; set; }

    [Parameter]
    public string NumberBackgroundBorderColor { get; set; }

    [Parameter]
    public string BehindNumberSrc { get; set; }

    [Parameter]
    public string ArrowColor { get; set; } = "#FF5400";

    [Parameter]
    public string DisabledColor { get; set; } = "#FF540080";

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public int Size { get; set; } = 36;

    [Parameter]
    public string Title { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Value < Min)
        {
            await SetValue(Min);
        }
        else if (Value > Max)
        {
            await SetValue(Max);
        }
    }

    private async Task Increase()
    {
        if (!Disabled && Value < Max)
        {
            await SetValue(Value + StepUp);
            await OnUp.InvokeAsync();
        }
    }

    private async Task Decrease() {

        if (!Disabled && Value > Min)
        {
            await SetValue(Value - StepDown);
            await OnDown.InvokeAsync();
        }
    }

    private async Task Click(MouseEventArgs e)
    {
        if (e.AltKey || e.ShiftKey || e.CtrlKey)
        {
            await Decrease();
        }
        else
        {
            await Increase();
        }
    }

    private bool MayIncrease => !Disabled && Value + StepUp <= Max;

    private bool MayDecrease => !Disabled && Value - StepDown >= Min;

    private bool _upHovered;
    private bool _downHovered;

    private void MouseOver(bool up)
    {
        if (up)
        {
            _upHovered = true;
        }
        else
        {
            _downHovered = true;
        }
    }

    private void MouseOut(bool up)
    {
        if (up)
        {
            _upHovered = false;
        }
        else
        {
            _downHovered = false;
        }
    }

    private string SymbolSize => "" + Size + "px";

    private string TotalWidth => "" + (1.5 * Size + 4) + "px";

    private bool DrawSymbolBackground => SymbolBackgroundFillColor != null || SymbolBackgroundBorderColor != null;

    private bool DrawNumberBackground => NumberBackgroundFillColor != null || NumberBackgroundBorderColor != null;

    private string IncreaseArrowColor => !Disabled && Value < Max ? ArrowColor : DisabledColor;

    private string DecreaseArrowColor => !Disabled && Value > Min ? ArrowColor : DisabledColor;

    private string NumberBoxSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + Size + "px",
                NumberAlignment.BottomRight => "" + (int)(0.6f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string NumberBoxOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "0",
                NumberAlignment.BottomRight => "" + (int)(0.4f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string NumberBoxOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + (int)(0.2f * Size) + "px",
                NumberAlignment.BottomRight => "" + (int)(0.42f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string BehindNumberImageSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + (int)(1.2 * Size) + "px",
                NumberAlignment.BottomRight => "" + (int)(0.7 * Size) + "px",
                _ => "0"
            };
        }
    }

    private string BehindNumberImageOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + (int)(-0.1 * Size) + "px",
                NumberAlignment.BottomRight => "" + (int)(0.35f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string BehindNumberImageOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + (int)(-0.1 * Size) + "px",
                NumberAlignment.BottomRight => "" + (int)(0.35f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string NumberFontSize
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "" + (int)(0.5f * Size) + "px",
                NumberAlignment.BottomRight => "" + (int)(0.45f * Size) + "px",
                _ => "0"
            };
        }
    }

    private string NumberBackgroundRadius
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => "7.5px",
                NumberAlignment.BottomRight => "4.75px",
                _ => "0"
            };
        }
    }

    private int NumberBackgroundOffsetY
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private int NumberBackgroundOffsetX
    {
        get
        {
            return NumberAlignment switch
            {
                NumberAlignment.Center => 8,
                NumberAlignment.BottomRight => 11,
                _ => 0
            };
        }
    }

    private string ArrowSize => "" + (int)(0.4f * Size) + "px";

    private string ArrowOffsetX => "" + (int)(1.1f * Size) + "px";

    private string UpStyle => _upHovered && MayIncrease ? $"brightness(150%) drop-shadow(1px 1px 1px {ArrowColor})" : "";

    private string DownStyle => _downHovered && MayDecrease ? $"brightness(150%) drop-shadow(1px 1px 1px {ArrowColor})" : "";

    private async Task SetValue(int newValue) {

        if (Value != newValue)
        {
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
            await OnChanged.InvokeAsync(newValue);
        }
    }
}
