<div class="row mb-1">
    <div class="col">
        <label for="datePicker">@Label</label>
        <input type="date" id="datePicker" class="form-control" @bind:get="@SelectedDate" @bind:set="@HandleDateChanged" @bind:event="oninput"/>
    </div>
    <div class="col">
        <label for="timePicker">@TimeLabel</label>
        <input type="time" id="timePicker" class="form-control" @bind:get="@SelectedTime" @bind:set="@HandleTimeChanged" @bind:event="oninput" step="@(Step * 60)"/>
    </div>
</div>

@code 
{
    [Parameter]
    public string Label { get; set; } = "Select Date";

    [Parameter]
    public string TimeLabel { get; set; } = "Select Time";

    [Parameter] 
    public DateTimeOffset Value { get; set; } = DateTimeOffset.MinValue;
    
    [Parameter]
    public EventCallback<DateTimeOffset> ValueChanged { get; set; }
    
    [Parameter] 
    public int Step { get; set; } = 15;
    
    private DateTime? SelectedDate { get; set; }
    private TimeOnly? SelectedTime { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        bool updated = false;
        if (Value == DateTimeOffset.MinValue)
        {
            Value = Now();
            updated = true;
        }
        else
        {
            var fixedValue = Fix(Value);
            if (fixedValue != Value)
            {
                Value = fixedValue;
                updated = true;
            }
        }
        
        SelectedDate = Value.DateTime;
        SelectedTime = TimeOnly.FromDateTime(Value.DateTime);
        
        if (updated)
            await ValueChanged.InvokeAsync(Value);
    }
    
    private async Task HandleDateChanged(DateTime? value)
    {
        SelectedDate = value;
        await UpdateValueAndNotifyChanged();
    }

    private async Task  HandleTimeChanged(TimeOnly? value)
    {
        SelectedTime = value;
        await UpdateValueAndNotifyChanged();
    }
    
    private async Task UpdateValueAndNotifyChanged()
    {
        UpdateValue();
        await ValueChanged.InvokeAsync(Value);
    }
    
    private void UpdateValue()
    {
        var dateTime = SelectedDate ?? Now();
        var date = new DateOnly(dateTime.Year, dateTime.Month, dateTime.Day);
        Value = new DateTimeOffset(date, SelectedTime ?? TimeOnly.MinValue, dateTime.Offset);
    }

    private DateTimeOffset Now() => Fix(DateTimeOffset.Now);

    private DateTimeOffset Fix(DateTimeOffset value)
    {
        var roundedMinutes = Step * (value.Minute / 15);
        return new DateTimeOffset(value.Year, value.Month, value.Day, value.Hour, roundedMinutes, 0, value.Offset);
    }
}