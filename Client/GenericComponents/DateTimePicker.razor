@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

<div class="row mb-1">
    <div class="col">
        <label for="datePicker">@Label</label>
        <input type="date" id="datePicker" class="form-control" @bind:get="@SelectedDate" @bind:set="@HandleDateChanged" @bind:event="oninput"/>
    </div>
    <div class="col">
        <label for="timePicker">@TimeLabel</label>
        <input type="time" id="timePicker" class="form-control" @bind:get="@SelectedTime" @bind:set="@HandleTimeChanged" @bind:event="oninput"/>
    </div>
</div>

@code 
{
    [Parameter]
    public string Label { get; set; } = "Select Date";

    [Parameter]
    public string TimeLabel { get; set; } = "Select Time";

    [Parameter] 
    public DateTimeOffset Value { get; set; } = DateTimeOffset.MinValue;
    
    [Parameter]
    public EventCallback<DateTimeOffset> ValueChanged { get; set; }
    
    [Parameter] 
    public int Step { get; set; } = 15;
    
    private DateTime? SelectedDate { get; set; }
    private TimeOnly? SelectedTime { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Value == DateTimeOffset.MinValue)
        {
            await ValueChanged.InvokeAsync(DateTimeOffset.Now);
        }
        else
        {
            SelectedDate = Value.DateTime;
            SelectedTime = TimeOnly.FromDateTime(Value.DateTime);
        }
    }
    
    private async Task HandleDateChanged(DateTime? value)
    {
        await ValueChanged.InvokeAsync(ConstructDateTimeOffset(value, SelectedTime));
    }

    private async Task HandleTimeChanged(TimeOnly? value)
    {
        await ValueChanged.InvokeAsync(ConstructDateTimeOffset(SelectedDate, value));
    }
    
    private DateTimeOffset ConstructDateTimeOffset(DateTime? date, TimeOnly? time)
    {
        var dateTime = date ?? DateTimeOffset.Now;
        return new DateTimeOffset(new DateOnly(dateTime.Year, dateTime.Month, dateTime.Day), time ?? TimeOnly.MinValue, DateTimeOffset.Now.Offset);
    }
}