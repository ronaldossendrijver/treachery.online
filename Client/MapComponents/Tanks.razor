@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent

@if (Client.Game.CurrentPhase >= Phase.MetheorAndStormSpell)
{
    var y = 1.75f * Client.CurrentSkin.FORCETOKEN_RADIUS;
    var x = 1.5f * Client.CurrentSkin.FORCETOKEN_RADIUS;
    var leaderDiameter = 3.2f * Client.CurrentSkin.FORCETOKEN_RADIUS;
    var leaderPctHeight = .25f * leaderDiameter * Client.CurrentSkin.BattleWheelHeroHeight / Client.CurrentSkin.BattleWheelHeroWidth;
    
    foreach (var p in Client.Game.Players)
    {
        if (p.ForcesKilled > 0 || p.SpecialForcesKilled > 0)
        {
            if (p.ForcesKilled > 0)
            {
                <MapForce X=@x Y=@y Special=@false Amount=@p.ForcesKilled Faction=@p.Faction />
            }

            if (p.SpecialForcesKilled > 0)
            {
                var dX = p.ForcesKilled > 0 ? 2 * Client.CurrentSkin.FORCETOKEN_RADIUS : 0;
                <MapForce X=@(x + dX) Y=@y Special=@true Amount=@p.SpecialForcesKilled Faction=@p.Faction />
            }

            y += Spacing * 2 * Client.CurrentSkin.FORCETOKEN_RADIUS;
        }

        var corpses = p.Leaders
            .Where(l => !Client.Game.IsAlive(l))
            .Select(l => new Tuple<Leader, LeaderState>(l, Client.Game.LeaderState[l]))
            .OrderBy(l => l.Item2.TimeOfDeath).Select(l => l.Item1)
            .ToArray();

        if (corpses.Any())
        {
            y += Spacing * (leaderPctHeight * (corpses.Count() - 1));
            var dy = 0;
            var displaceX = (int)(0.2f * leaderDiameter);
            foreach (var leader in corpses)
            {
                var l = new PointD(x, y - dy);

                if (Client.Game.LeaderState[leader].IsFaceDownDead)
                {
                    <MapImage X="@(l.X + displaceX)" Y="@(l.Y)" Diameter="@(leaderDiameter)"
                           Src="@Client.CurrentSkin.GetFactionFacedownImageURL(p.Faction)"
                           Popover="@Popover(leader)" PopoverStyle=""
                           ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1" />
                }
                else
                {
                    <MapLeader ToShow="leader" X=@(l.X + displaceX) Y=@(l.Y) Diameter="leaderDiameter"/>
                }

                displaceX *= -1;
                dy += (int)leaderPctHeight;
            }

            y += Spacing * leaderDiameter;
        }

        if (p.Faction == Faction.Green && !Client.Game.MessiahIsAlive)
        {
            <MapImage X="@(x)" Y="@(y)" Diameter="@(0.5f * leaderDiameter)"
                   Src="@Client.CurrentSkin.Messiah_URL"
                   ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1" Popover="@Client.CurrentSkin.Describe(Concept.Messiah)"/>
            
            y += Spacing * leaderDiameter;
        }

        NextColumnIfNecessary(ref y, ref x, Spacing);
    }
}

@code 
{
    const float Spacing = 0.85f;
    private Situation _situation = new();
    
    protected override bool ShouldRender()
    {
        return Client.InGame && _situation.RequiresUpdate(Client);
    }

    private void NextColumnIfNecessary(ref float y, ref float x, float spacing)
    {
        if (!(y > 15 * Client.CurrentSkin.FORCETOKEN_RADIUS - 0.8f * x)) 
            return;
        
        y = 1.75f * Client.CurrentSkin.FORCETOKEN_RADIUS;
        x += 4.25f * Client.CurrentSkin.FORCETOKEN_RADIUS;
    }

    private string Popover(Leader l)
    {
        return Player.Is(l.Faction) || Player.Is(Faction.Purple) ? Client.CurrentSkin.GetPopup(l, Game) : "?";
    }

}
