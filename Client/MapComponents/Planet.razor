@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent
@implements IDisposable
 
<svg @ref="@element" width="@Client.CurrentSkin.MapDimensions.X" height="@Client.CurrentSkin.MapDimensions.Y" viewBox="0 0 @Client.CurrentSkin.MapDimensions.X @Client.CurrentSkin.MapDimensions.Y" 
     style="position: absolute; left: 0; top: 0; height: 100%; width: 100%;" pointer-events="none">

    <!-- Clipping areas of each sector -->
    @for (var i = 0; i < Map.NUMBER_OF_SECTORS; i++) {

        <clipPath id="@SectorClipName(i)">
            <path d="
                M @Round(ScaleX * Client.CurrentSkin.PlanetCenter.X),@Round(ScaleY * Client.CurrentSkin.PlanetCenter.Y)
                L @Round(ScaleX * StartX(i)),@Round(ScaleY * StartY(i)) 
                A @Round(ScaleX * Client.CurrentSkin.PlanetRadius) @Round(ScaleY * Client.CurrentSkin.PlanetRadius) @Angle 0 0 @Round(ScaleX * EndX(i)) @Round(ScaleY * EndY(i))
                Z"/>
        </clipPath>
    }

    <clipPath id="@SectorClipName(-1)">
        <rect x="0" y="0" width="@Client.CurrentSkin.MapDimensions.X" height="@Client.CurrentSkin.MapDimensions.Y"/>
    </clipPath>

    <!-- Shield Wall -->
    @if (Game.ShieldWallDestroyed)
    {
        <path d="@Client.CurrentSkin.GetTerritoryBorder(Game.Map.ShieldWall)" fill="@Client.CurrentSkin.BLOWNSHIELDWALL_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Client.CurrentSkin.GetTerritoryBorder(Game.Map.Arrakeen.Territory)" fill="@Client.CurrentSkin.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Client.CurrentSkin.GetTerritoryBorder(Game.Map.Carthag.Territory)" fill="@Client.CurrentSkin.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
        <path d="@Client.CurrentSkin.GetTerritoryBorder(Game.Map.ImperialBasin)" fill="@Client.CurrentSkin.METHEOR_OVERLAY_COLOR" fill-opacity="1" stroke="transparent"/>
    }

    <!-- SSW -->
    @if (Game.Applicable(Rule.Ssw) && Game.IsSpecialStronghold(Game.Map.ShieldWall))
    {
        <path d="@Client.CurrentSkin.GetTerritoryBorder(Game.Map.ShieldWall)" fill="#FF6F34" fill-opacity="0.6" stroke="transparent"/>
    }

    <!-- Highlighted Territories -->
    @foreach (var territory in Client.Status.HighlightedTerritories.Where(t => t != Game.Map.HiddenMobileStronghold.Territory && !t.IsHomeworld)) {

        <path d="@Client.CurrentSkin.GetTerritoryBorder(territory)" fill="@Client.CurrentSkin.HIGHLIGHT_OVERLAY_COLOR" fill-opacity="1" stroke="red" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
    }

    <!-- Locations -->
    @foreach (var location in Game.Map.Locations(false).Where(l => l != Game.Map.HiddenMobileStronghold && l is not DiscoveredLocation)) {

        <g clip-path="url(#@SectorClipName(location.Sector))">
            <g
                fill="@LocationColor(location)"
                cursor="pointer" pointer-events="all" @onclick=@(e => OnClick(e, location))
                data-bs-trigger="hover" data-bs-toggle="popover" data-bs-html="true" data-bs-animation="false" data-bs-delay="50" data-bs-content="@Intel(location)" data-bs-template="@PopoverTemplate">

                    <path d="@Client.CurrentSkin.GetTerritoryBorder(location.Territory)"/>
            </g>
        </g>
    }

</svg>



@code {

    private Situation situation = new();
    protected override bool ShouldRender()
    {
        return Client.InGame && situation.RequiresUpdate(Client);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {

            await Browser.EnablePopovers(element);
        }
        else
        {
            await Browser.RefreshPopovers(element);
        }
    }

    private string LocationColor(Location l) {

        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return Client.CurrentSkin.STORM_OVERLAY_COLOR;
        }

        if (Game.AtomicsAftermath == l.Territory)
        {
            return Client.CurrentSkin.BLOWNSHIELDWALL_OVERLAY_COLOR;
        }

        if (Game.HasStormPrescience(Player) && NextStormWillPassOver(l))
        {
            return Client.CurrentSkin.STORM_PRESCIENCE_OVERLAY_COLOR;
        }

        return "transparent";
    }

    private string LocationTexture(Location l) {

        if (Game.SectorInStorm >= 0 && l.Sector == Game.SectorInStorm)
        {
            return "url(#clouds)";
        }

        return "";
    }

    private bool NextStormWillPassOver(Location l)
    {
        for (var i = 1; i <= Game.NextStormMoves; i++)
        {
            if ((Game.SectorInStorm + i) % Map.NUMBER_OF_SECTORS == l.Sector)
            {
                return true;
            }
        }

        return false;
    }

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    private async Task OnClick(MouseEventArgs e, Location l)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs { Location = l, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

    private float Angle => 360f / Map.NUMBER_OF_SECTORS;

    private double StartX(int sector)
    {
        return Math.Cos(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Client.CurrentSkin.PlanetRadius + Client.CurrentSkin.PlanetCenter.X;
    }

    private double StartY(int sector)
    {
        return Math.Sin(2f * Math.PI * (6 - sector) / Map.NUMBER_OF_SECTORS) * Client.CurrentSkin.PlanetRadius + Client.CurrentSkin.PlanetCenter.Y;
    }

    private double EndX(int sector)
    {
        return Math.Cos(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Client.CurrentSkin.PlanetRadius + Client.CurrentSkin.PlanetCenter.X;
    }

    private double EndY(int sector)
    {
        return Math.Sin(2f * Math.PI * (5 - sector) / Map.NUMBER_OF_SECTORS) * Client.CurrentSkin.PlanetRadius + Client.CurrentSkin.PlanetCenter.Y;
    }

    private double ScaleX => 563f / Client.CurrentSkin.MapDimensions.X;

    private double ScaleY => 626f / Client.CurrentSkin.MapDimensions.Y;

    private string PointerEvents => OnLocationClick.HasDelegate ? "all" : "none";

    private string SectorClipName(int i)
    {
        return "clipOfSector" + i;
    }

    public new void Dispose()
    {
        _ = Browser.RemovePopovers(element);
        base.Dispose();
    }
}
