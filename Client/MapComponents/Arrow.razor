@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent
 
<defs>
    <linearGradient id="@ArrowGradientId" x1="60%" y1="60%" x2="80%" y2="80%">
        <stop offset="0%" stop-color="@FillColor"></stop>
        <stop offset="100%" stop-color="black"></stop>
    </linearGradient>
    <filter id="@ArrowShadowId" xmlns="http://www.w3.org/2000/svg" height="200%" width="200%">
        <feGaussianBlur in="SourceAlpha" stdDeviation="@(ShadowBlur)" />
        <feOffset dx="@(ShadowDistance)" dy="@(ShadowDistance)" result="offsetblur" />
        <feComponentTransfer>
            <feFuncA type="linear" slope="0.5"></feFuncA>
        </feComponentTransfer>
        <feMerge>
            <feMergeNode />
            <feMergeNode in="SourceGraphic"></feMergeNode>
        </feMerge>
    </filter>
    <path id="@ArrowTemplateId" d="M-50,-50L0,0L-50,50L0,100L100,0L0,-100L-50,-50Z" stroke="@StrokeColor" stroke-width="@Round(StrokeWidth)" stroke-linejoin="round" transform="scale(@Round(ArrowScale))" />
</defs>

@foreach (var arr in arrows)
{
    <g transform="translate(@arr.TranslateX,@arr.TranslateY) rotate(@arr.Rotate)" fill="url(#@ArrowGradientId)" filter="url(#@ArrowShadowId)">
        <use href="#@ArrowTemplateId" />
    </g>
}

@code {

    [Parameter]
    public float MarginX { get; set; }

    [Parameter]
    public float MarginY { get; set; }

    [Parameter]
    public float Radius { get; set; }

    [Parameter]
    public PointD From { get; set; }

    [Parameter]
    public PointD To { get; set; }

    [Parameter]
    public float ArrowScale { get; set; } = 0.3f;

    [Parameter]
    public int ShadowDistance { get; set; } = 4;

    [Parameter]
    public int ShadowBlur { get; set; } = 1;

    [Parameter]
    public string FillColor { get; set; } = "white";

    [Parameter]
    public float FillOpacity { get; set; } = 1f;

    [Parameter]
    public string StrokeColor { get; set; } = "black";

    [Parameter]
    public float StrokeWidth { get; set; } = 0;

    private string ArrowTemplateId;
    private string ArrowShadowId;
    private string ArrowGradientId;
    private ArrowDef[] arrows;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var fromX = From.X - MarginX - Radius;
        var fromY = From.Y - MarginY - Radius;
        var fromZ = (int)Math.Pow(Radius * Radius - fromX * fromX - fromY * fromY, 0.5);
        var fromAsArray = new[] { fromX, fromY, fromZ };

        var toX = To.X - MarginX - Radius;
        var toY = To.Y - MarginY - Radius;
        var toZ = (int)Math.Pow(Radius * Radius - toX * toX - toY * toY, 0.5);
        var toAsArray = new[] { toX, toY, toZ };

        var u = fromAsArray.Select(a => a / Radius).ToArray();
        var w = Cross(fromAsArray, toAsArray);
        var v = Cross(u, w).Select(a => a / Length(w)).ToArray();
        var tMax = Math.Acos(Inner(fromAsArray, toAsArray) / Length(fromAsArray) / Length(toAsArray));
        var n = (int)Math.Round(50d * tMax / Math.PI);

        ArrowTemplateId = "arrowtemplate" + Id;
        ArrowShadowId = "arrowshadow" + Id;
        ArrowGradientId = "arrowgradient" + Id;
        
        arrows = new ArrowDef[n];

        for (var i = 1; i <= n; i++)
        {
            var iAsDouble = (double)i;
            var t = -tMax * (iAsDouble / n);
            var x = Radius * (u[0] * Math.Cos(t) + v[0] * Math.Sin(t));
            var y = Radius * (u[1] * Math.Cos(t) + v[1] * Math.Sin(t));

            var t2 = -tMax * ((iAsDouble + 1) / n);
            var x2 = Radius * (u[0] * Math.Cos(t2) + v[0] * Math.Sin(t2));
            var y2 = Radius * (u[1] * Math.Cos(t2) + v[1] * Math.Sin(t2));

            var alpha = -Math.Atan2(x2 - x, y2 - y) / Math.PI * 180 + 90;

            ArrowDef arrowDef;
            arrowDef.TranslateX = Round(x + Radius);
            arrowDef.TranslateY = Round(y + Radius);
            arrowDef.Rotate = Round(alpha);

            arrows[i - 1] = arrowDef;
        }
    }

    private double[] Cross(double[] a, double[] b)
    {
        return new[]
        {
            a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0]
        };
    }

    private double Inner(double[] v1, double[] v2)
    {
        if (v1.Length != v2.Length) return double.NaN;
        return v1.Zip(v2, (x, y) => x * y).Sum();
    }

    private double Length(double[] vector)
    {
        return Math.Sqrt(vector.Select(v => v * v).Sum());
    }

    private struct ArrowDef
    {
        public string TranslateX;
        public string TranslateY;
        public string Rotate;

    }
}


