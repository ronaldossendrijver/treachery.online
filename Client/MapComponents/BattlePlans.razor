@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent

@if (Game.CurrentMainPhase == MainPhase.Battle && Game.CurrentPhase != Phase.BattleReport)
{
    var maySeeAggressorBattlePlan = Game.AggressorPlan != null && (Game.AggressorPlan.Initiator == Client.Faction || (Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.AggressorPlan.Player));
    var maySeeDefenderBattlePlan = Game.DefenderPlan != null && (Game.DefenderPlan.Initiator == Client.Faction || (Game.GreenKarma && Game.CurrentBattle.OpponentOf(Faction.Green) == Game.DefenderPlan.Player));

    var maySeeBothBattlePlans = Game.AggressorPlan != null && Game.DefenderPlan != null;
    
    var aggressorIsAffectedByPartialPrescience = Game.AggressorPlan != null && 
                                                 ((Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.AggressorPlan.Player) ||
                                                  (Game.CurrentNexusPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentNexusPrescience.Initiator) == Game.AggressorPlan.Player));

    var defenderIsAffectedByPartialPrescience = Game.DefenderPlan != null && 
                                                ((Game.CurrentPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentPrescience.Initiator) == Game.DefenderPlan.Player) ||
                                                 (Game.CurrentNexusPrescience != null && Game.CurrentBattle.OpponentOf(Game.CurrentNexusPrescience.Initiator) == Game.DefenderPlan.Player));

    var aggressorCallsTraitor = Game.AggressorTraitorAction is { Succeeded: true };
    var defenderCallsTraitor = Game.DefenderTraitorAction is { Succeeded: true };

    var aggressorWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Aggressor == Game.BattleWinner;
    var defenderWasFacedanced = Game.Version > 150 && Game.CurrentPhase == Phase.Facedancing && Game.CurrentBattle.Defender == Game.BattleWinner;

    var x = 0.1f * Client.CurrentSkin.MapDimensions.X;
    var y = 0.1f * Client.CurrentSkin.MapDimensions.Y;

    if (maySeeAggressorBattlePlan || maySeeBothBattlePlans)
    {
        <BattlePlan  Plan="Game.AggressorPlan" ShowEntirePlan=true OpponentPlan="Game.DefenderPlan" Facedanced="aggressorWasFacedanced" TraitorCalled="defenderCallsTraitor" IsAggressor="true" X="x" Y="y" />
    }
    else if (aggressorIsAffectedByPartialPrescience)
    {
        <BattlePlan  Plan="Game.AggressorPlan" ShowEntirePlan=false OpponentPlan="Game.DefenderPlan" Facedanced="aggressorWasFacedanced" TraitorCalled="false" IsAggressor="true" X="x" Y="y" Opacity="0.5f" />
    }

    x = 0.4f * Client.CurrentSkin.MapDimensions.X;
    y = 0.5f * Client.CurrentSkin.MapDimensions.Y;

    if (maySeeDefenderBattlePlan || maySeeBothBattlePlans)
    {
        <BattlePlan  Plan="Game.DefenderPlan" ShowEntirePlan=true OpponentPlan="Game.AggressorPlan" Facedanced="defenderWasFacedanced" TraitorCalled="aggressorCallsTraitor" IsAggressor="false" X="x" Y="y" />
    }
    else if (defenderIsAffectedByPartialPrescience)
    {
        <BattlePlan  Plan="Game.DefenderPlan" ShowEntirePlan=false OpponentPlan="Game.AggressorPlan" Facedanced="defenderWasFacedanced" TraitorCalled="false" IsAggressor="false" X="x" Y="y" Opacity="0.5f" />
    }
}
