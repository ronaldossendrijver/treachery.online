@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent

<div @ref="@Element">

    @if (Game.CurrentPhase > Phase.SelectingFactions)
    {
        foreach (var p in Game.Players)
        {
            var forcesToDraw = new List<MapForce>();

            float radiusModifier = 1;
            if (Client.Status.PlayerShouldBeHighlighted(p))
            {
                radiusModifier = 1.5f;
            }

            var position = PlayerTokenPosition(Game, p.Seat);
            var x = position.X - radiusModifier * Client.CurrentSkin.PlayerTokenRadius;
            var y = position.Y - radiusModifier * Client.CurrentSkin.PlayerTokenRadius;
            var factionTokenDiameter = radiusModifier * Client.CurrentSkin.PlayerTokenRadius * 2;
            var positionSector = (float)Math.Floor((float)p.Seat * Map.NumberOfSectors / Game.MaximumPlayers);

            <Circle X="@position.X" Y="@position.Y" Radius="@(1.35f * Client.CurrentSkin.PlayerTokenRadius)" FillColor="@Client.CurrentSkin.TABLEPOSITION_BACKGROUNDCOLOR" />

            <MapImage X="@(x)" Y="@(y)" Diameter=@factionTokenDiameter Src="@Client.CurrentSkin.GetFactionTableImageURL(p.Faction)" 
                   ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                   Popover="@Intel(p)"/>

            if (p.Ally != Faction.None)
            {
                <MapImage X="@(position.X)" Y="@(position.Y + 0.25f * Client.CurrentSkin.PlayerTokenRadius)" Diameter=@(1.2f * Client.CurrentSkin.PlayerTokenRadius) Src="@Client.CurrentSkin.GetFactionTableImageURL(p.Ally)" 
                       ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Intel(p.AlliedPlayer)"/>
            }

            var positionOnCircle = TwoPi / 180 + (4.5f - positionSector) * TwoPi / Map.NumberOfSectors;
                        
            //Homeworlds
            foreach (var homeworld in p.HomeWorlds)
            {
                positionOnCircle += 0.06f;

                var homeworldXY = Pos(positionOnCircle, Client.CurrentSkin.PlayerTokenRadius);

                @if (Game.Applicable(Rule.Homeworlds)) 
                {
                    <MapImage X=homeworldXY.X Y=@homeworldXY.Y
                       Diameter=@(2 * Client.CurrentSkin.PlayerTokenRadius)
                       Src="@Client.CurrentSkin.GetImageUrl(homeworld.World)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1"
                    Popover=@Client.CurrentSkin.GetPopup(homeworld) OnClick="e => OnClick(e, homeworld)" PopoverStyle="" />

                    if (Game.IsOccupied(homeworld.World))
                    {
                        var occupier = Game.OccupierOf(homeworld.World).Faction;
                        var occupierMessage = Client.CurrentSkin.Format("Occupied by ", occupier);

                        <MapImage X=@(homeworldXY.X + 0.75f * Client.CurrentSkin.PlayerTokenRadius) Y=@(homeworldXY.Y + 1.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Diameter=@(0.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Src="@Client.CurrentSkin.GetFactionFacedownImageURL(occupier)" ShadowColor="white" ShadowX="0.5f" ShadowY="0.5f" ShadowBlur="0.5f"
                                  Popover=@occupierMessage PopoverAsTooltip="true" />
                    }
                    else if (p.HasHighThreshold(homeworld.World))
                    {
                        <MapImage X=@(homeworldXY.X + 0.75f * Client.CurrentSkin.PlayerTokenRadius) Y=@(homeworldXY.Y + 1.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Diameter=@(0.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Src="@Client.CurrentSkin.HighThreshold_URL" ShadowColor="white" ShadowX="0.5f" ShadowY="0.5f" ShadowBlur="0.5f"
                                  Popover="High Threshold" PopoverAsTooltip="true" />
                    }
                    else if (p.HasLowThreshold(homeworld.World))
                    {
                        <MapImage X=@(homeworldXY.X + 0.75f * Client.CurrentSkin.PlayerTokenRadius) Y=@(homeworldXY.Y + 1.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Diameter=@(0.5f * Client.CurrentSkin.PlayerTokenRadius)
                                  Src="@Client.CurrentSkin.LowThreshold_URL" ShadowColor="white" ShadowX="0.5f" ShadowY="0.5f" ShadowBlur="0.5f"
                                  Popover="Low Threshold" PopoverAsTooltip="true" />
                    }
                }
                else
                {
                    <MapImage X=homeworldXY.X Y=@homeworldXY.Y
                       Diameter=@(2 * Client.CurrentSkin.PlayerTokenRadius)
                       Src="@Client.CurrentSkin.GetImageUrl(homeworld.World)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="2" ShadowY="2" ShadowBlur="1"
                       Popover=@Client.CurrentSkin.Format("{0} Reserves", homeworld.Faction) PopoverAsTooltip="true"/>
                }

                if (Client.Status.HighlightedTerritories.Contains(homeworld.Territory))
                {
                    <Circle X=@(homeworldXY.X + Client.CurrentSkin.PlayerTokenRadius) Y=@(homeworldXY.Y + Client.CurrentSkin.PlayerTokenRadius) Radius=@Client.CurrentSkin.PlayerTokenRadius 
                            FillColor="@Client.CurrentSkin.HIGHLIGHT_OVERLAY_COLOR" StrokeWidth="1" StrokeColor="red"/>
                }

                var verticalSpaceRequired = Game.BattalionsIn(homeworld).Count() * Client.CurrentSkin.FORCETOKEN_RADIUS;
                var reservesY = homeworldXY.Y + 0.5f * (2 * Client.CurrentSkin.PlayerTokenRadius - verticalSpaceRequired);

                foreach (var b in Game.BattalionsIn(homeworld)) {

                    var horizontalSpaceRequired = (b.AmountOfForces > 0 && b.AmountOfSpecialForces > 0 ? 2 : 1) * Client.CurrentSkin.FORCETOKEN_RADIUS;
                    var reservesX = homeworldXY.X + 0.5f * (2 * Client.CurrentSkin.PlayerTokenRadius - horizontalSpaceRequired);

                    if (b.AmountOfForces > 0)
                    {
                        forcesToDraw.Add(new MapForce { X = reservesX, Y = reservesY, Special = false, Amount = b.AmountOfForces, Faction = b.Faction });
                        reservesX += Client.CurrentSkin.FORCETOKEN_RADIUS;
                    }

                    if (b.AmountOfSpecialForces > 0)
                    {
                        forcesToDraw.Add(new MapForce { X = reservesX, Y = reservesY, Special = true, Amount = b.AmountOfSpecialForces, Faction = b.Faction });
                    }

                    reservesY += Client.CurrentSkin.FORCETOKEN_RADIUS;
                }

                positionOnCircle += 0.02f;
            }

            foreach (var tt in p.TechTokens)
            {
                positionOnCircle += TwoPi / 90;
                <MapImage Xy=@Pos(positionOnCircle, Client.CurrentSkin.PlayerTokenRadius)
                       Diameter=@(2 * Client.CurrentSkin.PlayerTokenRadius)
                       Src="@Client.CurrentSkin.GetImageUrl(tt)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                       Popover="@Client.CurrentSkin.GetPopup(tt)" PopoverStyle=""/>
            }

            if (p.Faction == Faction.Pink && Game.PinkLoyalLeader != null)
            {
                positionOnCircle += TwoPi / 90;

                <MapImage Xy=@Pos(positionOnCircle, Client.CurrentSkin.PlayerTokenRadius)
                       Diameter=@(2 * Client.CurrentSkin.PlayerTokenRadius)
                       Src="@Client.CurrentSkin.GetImageUrl(Game.PinkLoyalLeader)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
                Popover=@Client.CurrentSkin.Format("{0} is Loyal to {1}", Game.PinkLoyalLeader, Faction.Pink) PopoverAsTooltip="true"/>
            }
                        
            foreach (var skilledLeader in Game.GetSkilledLeaders(p).Where(l => Game.IsInFrontOfShield(l))) {

                positionOnCircle += TwoPi / 90;

                <MapImage Xy=@Pos(positionOnCircle, Client.CurrentSkin.PlayerTokenRadius)
                        Diameter=@(2 * Client.CurrentSkin.PlayerTokenRadius)
                        Src="@Client.CurrentSkin.GetImageUrl(skilledLeader)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" 
                        Popover="@Client.CurrentSkin.GetPopup(skilledLeader, Client.Game.Skill(skilledLeader))" PopoverStyle=""/>

                <MapText ToShow="@Client.CurrentSkin.Describe(Game.Skill(skilledLeader))"
                        Xy=@Pos(positionOnCircle)
                        Font="@Client.CurrentSkin.SKILL_FONT" FontColor="@Client.CurrentSkin.SKILL_FONTCOLOR"
                        BorderWidth="@Client.CurrentSkin.SKILL_FONT_BORDERWIDTH" BorderColor="@Client.CurrentSkin.SKILL_FONT_BORDERCOLOR"
                        Align="@TextAlignment.Center" MaxWidth="3f * Client.CurrentSkin.PlayerTokenRadius"
                        Popover="@Client.CurrentSkin.GetPopup(skilledLeader, Client.Game.Skill(skilledLeader))" PopoverStyle="" />
            }

            if (p.Faction == Faction.Pink && p.Ambassadors.Any())
            {
                positionOnCircle += TwoPi / 90;

                var ambassadorXY = Pos(positionOnCircle, 0.5f * Client.CurrentSkin.PlayerTokenRadius);
                var yOffset = -0.5f * p.Ambassadors.Count() * 0.2f * Client.CurrentSkin.PlayerTokenRadius;
                var xOffset = 0f;
                foreach (var a in p.Ambassadors)
                {
                    <MapImage X=@(ambassadorXY.X + xOffset)
                              Y=@(ambassadorXY.Y + yOffset)
                              Diameter=@(Client.CurrentSkin.PlayerTokenRadius)
                              Src="@Client.CurrentSkin.GetImageUrl(a)" ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
                              Popover=@Client.CurrentSkin.GetAmbassadorDescription(a) PopoverAsTooltip="true"/>

                    yOffset += 0.2f * Client.CurrentSkin.PlayerTokenRadius;
                    xOffset = xOffset == 0 ? 0.5f * Client.CurrentSkin.PlayerTokenRadius : 0;
                }
            }

            if (p.Faction == Faction.White && Game.LatestRevealedNoFieldValue >= 0)
            {
                positionOnCircle += TwoPi / 90;

                <MapImage Xy=@Pos(positionOnCircle, Client.CurrentSkin.FORCETOKEN_RADIUS) Diameter=@(2 * Client.CurrentSkin.FORCETOKEN_RADIUS) Src="@Client.CurrentSkin.FactionSpecialForceImage_URL[Faction.White]"
                       ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1"
                       Popover="@Client.CurrentSkin.Format("Latest revealed No-Field: {0}", Game.LatestRevealedNoFieldValue)" PopoverAsTooltip="true"/>

                <MapText ToShow="@Game.LatestRevealedNoFieldValue.ToString()"
                         Xy=@Pos(positionOnCircle)
                         Font="@Client.CurrentSkin.FORCETOKEN_FONT" FontColor="@Client.CurrentSkin.FORCETOKEN_FONTCOLOR"
                         BorderWidth="@Client.CurrentSkin.FORCETOKEN_FONT_BORDERWIDTH" BorderColor="@Client.CurrentSkin.FORCETOKEN_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Center"/>
            }

            var totalSpiceToReceiveLater = p.Bribes + p.BankedResources + p.Extortion;

            if (totalSpiceToReceiveLater > 0)
            {
                positionOnCircle += TwoPi / 90;
                var tooltip = Client.CurrentSkin.Format("To be collected during {0}", MainPhase.Contemplate);

                <MapImage 
                    Xy=@Pos(positionOnCircle, Client.CurrentSkin.FORCETOKEN_RADIUS) 
                    Diameter=@(2 * Client.CurrentSkin.FORCETOKEN_RADIUS)
                    Src="@Client.CurrentSkin.Harvester_URL"
                    Popover=@tooltip PopoverAsTooltip=true
                    BackgroundCircleColor="#black"
                    BackgroundCircleDiameter=@(1.5f * Client.CurrentSkin.FORCETOKEN_RADIUS)
                    ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText 
                    ToShow=@totalSpiceToReceiveLater.ToString()
                    Xy=@Pos(positionOnCircle)
                    Font="@Client.CurrentSkin.RESOURCETOKEN_FONT" FontColor="@Client.CurrentSkin.RESOURCETOKEN_FONTCOLOR"
                    Popover=@tooltip PopoverAsTooltip=true
                    BorderWidth="@Client.CurrentSkin.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Client.CurrentSkin.RESOURCETOKEN_FONT_BORDERCOLOR"
                    Align="@TextAlignment.Center"/>
            }

            if (p.ResourcesAfterBidding > 0)
            {
                positionOnCircle += TwoPi / 90;
                var tooltip = Client.CurrentSkin.Format("Subbed {0}", Concept.Resource);

                <MapImage 
                    Xy=@Pos(positionOnCircle, Client.CurrentSkin.FORCETOKEN_RADIUS) 
                    Diameter=@(2 * Client.CurrentSkin.FORCETOKEN_RADIUS) 
                    Src="@Client.CurrentSkin.Harvester_URL"
                    Popover=@tooltip PopoverAsTooltip=true
                    BackgroundCircleColor="black"
                    BackgroundCircleDiameter=@(1.5f * Client.CurrentSkin.FORCETOKEN_RADIUS)
                    ShadowColor="@Client.CurrentSkin.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="1" />

                <MapText ToShow=@tooltip
                    Xy=@Pos(positionOnCircle)
                    Font="@Client.CurrentSkin.RESOURCETOKEN_FONT" FontColor="@Client.CurrentSkin.RESOURCETOKEN_FONTCOLOR"
                    Popover=@tooltip PopoverAsTooltip=true
                    BorderWidth="@Client.CurrentSkin.RESOURCETOKEN_FONT_BORDERWIDTH" BorderColor="@Client.CurrentSkin.RESOURCETOKEN_FONT_BORDERCOLOR"
                    Align="@TextAlignment.Center"/>
            }

            foreach (var f in forcesToDraw)
            {
                <MapForce X=@f.X Y=@f.Y Special=@f.Special Amount=@f.Amount Faction=@f.Faction Threatened=@false ShowPopover="true" Font="@Client.CurrentSkin.SKILL_FONT" Diameter="@Client.CurrentSkin.FORCETOKEN_RADIUS" />
            }

            <MapText ToShow="@p.Name"
                     X="@position.X" Y="@y"
                     Font="@Client.CurrentSkin.PLAYERNAME_FONT" FontColor="@Client.CurrentSkin.PLAYERNAME_FONTCOLOR"
                     BorderWidth="@Client.CurrentSkin.PLAYERNAME_FONT_BORDERWIDTH" BorderColor="@Client.CurrentSkin.PLAYERNAME_FONT_BORDERCOLOR"
                     Align="TextAlignment.Center" MaxWidth="6 * Client.CurrentSkin.PlayerTokenRadius"/>
        }
    }

</div>

@code {

    [Parameter]
    public EventCallback<LocationEventArgs> OnLocationClick { get; set; }

    private Situation situation = new();
    protected override bool ShouldRender()
    {
        return Client.InGame && situation.RequiresUpdate(Client);
    }

    private string Intel(Player p)
    {
        var result = Client.CurrentSkin.Format("<p><strong>{0} plays {1}</strong></p>", p.Name, p.Faction);

        foreach (var v in LeaderManager.Leaders.Where(l => l.Faction == p.Faction))
        {
            result += GetLeaderHTML(v);
        }

        result += "<div class=\"row m-0 mt-1 justify-content-center\">";

        result += "</div>";

        result += "<div class=\"mt-1 text-start\">" + Client.CurrentSkin.GetFactionInfo_HTML(Client.Game, p.Faction) + "</div>";
        return result;
    }

    private string GetLeaderHTML(Leader l)
    {
        if (l == null)
        {
            return "";
        }

        return string.Format("<img class='img-fluid' src='{0}' width=80 style='filter:drop-shadow(-3px 3px 2px black);'/>", Client.CurrentSkin.GetImageUrl(l));
    }

    private string DetermineVideoStreamId(Player p)
    {
        return "video" + p.Seat;
    }

    private async Task OnClick(MouseEventArgs e, Location l)
    {
        await OnLocationClick.InvokeAsync(new LocationEventArgs { Location = l, AltKey = e.AltKey, CtrlKey = e.CtrlKey, ShiftKey = e.ShiftKey });
    }

    internal class MapForce
    {
        internal double X;
        internal double Y;
        internal bool Special;
        internal int Amount;
        internal Faction Faction;
    }

    private PointD Pos(float positionOnCircle, float radiusOfToken = 0) {

        var mapradius = 1.06f * Client.CurrentSkin.MapRadius;
        return new PointD(
            X = Client.CurrentSkin.PlanetCenter.X + (float)(Math.Cos(positionOnCircle) * mapradius) - radiusOfToken, 
            Y = Client.CurrentSkin.PlanetCenter.Y + (float)(Math.Sin(positionOnCircle) * mapradius) - radiusOfToken);
    }
    
}