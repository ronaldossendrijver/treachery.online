@*
 * Copyright (C) 2020-2024 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@
@inherits MapComponent

@{
    var x = Skin.Current.MapDimensions.X - 5;

    if (Game.CurrentTurn >= 1)
    {
        <MapText ToShow="@string.Format("Turn {0} of {1}", Client.Game.CurrentTurn, Client.Game.MaximumTurns)"
                 X="x"
                 Y=@(0.3f * TurnFontHeight)
                 Font="@Skin.Current.TURN_FONT"
                 FontColor="@Skin.Current.TURN_FONT_COLOR"
                 BorderWidth="@Skin.Current.TURN_FONT_BORDERWIDTH"
                 BorderColor="@Skin.Current.TURN_FONT_BORDERCOLOR"
                 Popover=@TurnPopover
                 Align="@TextAlignment.Right"/>
    }

    if (Game.NumberOfObservers > 0)
    {
        <MapText ToShow="@string.Format("observers: {0}", Game.NumberOfObservers)"
                 X="@(Skin.Current.PlanetCenter.X)"
                 Y="@(Skin.Current.MapDimensions.Y - TurnFontHeight)"
                 Popover="@ObserverPopover"
                 Font="@Skin.Current.FORCETOKEN_FONT"
                 FontColor="@Skin.Current.FORCETOKEN_FONTCOLOR"
                 BorderWidth="@Skin.Current.FORCETOKEN_FONT_BORDERWIDTH"
                 BorderColor="@Skin.Current.FORCETOKEN_FONT_BORDERCOLOR"
                 Align="@TextAlignment.Center"/>
    }

    if (Game.CurrentMainPhase > MainPhase.Setup)
    {
        var posX = x;
        double posY = 0.7f * TurnFontHeight;

        foreach (var phase in Enumerations.GetValues<MainPhase>().Where(p => p >= MainPhase.Storm && p <= MainPhase.Contemplate))
        {
            if (phase == Game.CurrentMainPhase)
            {
                posY += 0.7f * ActiveFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_ACTIVE_FONT" FontColor="@Skin.Current.PHASE_ACTIVE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_ACTIVE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    var diameter = 2 * Skin.Current.PlayerTokenRadius;

                    <MapImage X="@(posX - diameter)" Y="@(posY - Skin.Current.PlayerTokenRadius)" Diameter=diameter Src="@Skin.Current.GetImageUrl(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.6f * ActiveFontHeight;
            }
            else
            {
                posY += PassiveFontHeight;

                <MapText ToShow="@Skin.Current.Describe(phase)"
                         X="@(posX)" Y="@(posY)"
                         Font="@Skin.Current.PHASE_FONT" FontColor="@Skin.Current.PHASE_FONTCOLOR"
                         BorderWidth="@Skin.Current.PHASE_FONT_BORDERWIDTH" BorderColor="@Skin.Current.PHASE_FONT_BORDERCOLOR"
                         Align="@TextAlignment.Right"/>

                if (Game.EconomicsStatus != BrownEconomicsStatus.None && Game.EconomicsStatus != BrownEconomicsStatus.RemovedFromGame && phase == MainPhase.Charity)
                {
                    <MapImage X="@(posX - Skin.Current.PlayerTokenRadius)" Y="@(posY - 0.5f * Skin.Current.PlayerTokenRadius)" Diameter=Skin.Current.PlayerTokenRadius Src="@Skin.Current.GetImageUrl(Faction.Brown)" ShadowColor="@Skin.Current.SHADOW" ShadowX="1" ShadowY="1" ShadowBlur="0" />

                    <MapText ToShow="@Skin.Current.Describe(Game.EconomicsStatus)"
                             X="@(posX - 0.5f * Skin.Current.PlayerTokenRadius)" Y="@(posY)"
                             Font="@Skin.Current.SKILL_FONT" FontColor="white"
                             BorderWidth="1" BorderColor="black"
                             Align="@TextAlignment.Center"/>
                }

                posY += 0.5f * PassiveFontHeight;
            }
        }
    }
}

@code {

    private const float TurnFontHeight = 16;
    private const float ActiveFontHeight = 16;
    private const float PassiveFontHeight = 8;   

    private string ObserverPopover => string.Join(", ", Game.ObserverNames);

    private string TurnPopover
    {
        get
        {
            var result = "<div>";
            var rulesWithGroups = Game.Rules.Select(r => new { Rule = r, Group = Game.GetRuleGroup(r)}).ToList();
            var groups = rulesWithGroups.Where(rg => rg.Group != RuleGroup.CoreBasic && rg.Group != RuleGroup.Bots && rg.Group != RuleGroup.None).Select(rg => rg.Group).Distinct();

            var ruleInfo = "";
            foreach (var group in groups)
            {
                ruleInfo += Skin.Current.Format("<h5 class='h5'>{0}</h5><p class='mt-0 mb-2'>{1}.</p>", group, rulesWithGroups.Where(rg => rg.Group == group).Select(rg => rg.Rule));
            }

            result += Skin.Current.Format("<h4>{0}</h4><p>Game version: {1}</p>{2}", Game.Ruleset, Game.Version, ruleInfo);

            result += Skin.Current.Format("<h4>Timers</h4>");
            result += $"<p><string>Game started:</strong> {Game.Started:dddd, dd MMMM yyyy H:mm:ss}";
            result += $"<p><string>Last activity:</strong> {Game.History.Last().Time:dddd, dd MMMM yyyy H:mm:ss}";
            result += $"<p><string>Game duration:</strong> {Math.Round(Game.Duration.TotalHours, 1)} hours";
            result += "<table class='table table-sm'>";
            result += "<thead>";
            result += "<tr class='table-dark'><th>Player</th><th>Bidding</th><th>Move</th><th>Battle</th><th>Total</th></tr>";
            result += "</thead>";
            
            result += "<tbody>";

            foreach (var p in Game.Players) {

                var timeBidding = Game.TimeSpent(p, MainPhase.Bidding);
                var timeShipping = Game.TimeSpent(p, MainPhase.ShipmentAndMove);
                var timeBattling = Game.TimeSpent(p, MainPhase.Battle);
                var timeTotal = timeBidding + timeShipping + timeBattling;

                result += Skin.Current.Format("<tr class='table-dark'><td>{0}</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4}</td></tr>",
                Game.GetPlayerName(p), timeBidding.ToString(@"h\:mm\:ss"), timeShipping.ToString(@"h\:mm\:ss"), timeBattling.ToString(@"h\:mm\:ss"), timeTotal.ToString(@"h\:mm\:ss"));
            }

            result += "</tbody>";
            result += "</table>";

            result += "</div>";

            return result;
        }
    }
}