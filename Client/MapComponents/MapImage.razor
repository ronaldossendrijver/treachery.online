@*
 * Copyright (C) 2020-2025 Ronald Ossendrijver (admin@treachery.online)
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have
 * received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
*@

@inherits MapComponent
@implements IDisposable;

@if (BackgroundCircleColor != null)
{
    <Circle X=@(X + 0.5f * Width) Y=@(Y + 0.5f * Height) Radius=@(BackgroundCircleDiameter > 0 ? 0.5f * BackgroundCircleDiameter : 0.5f * Width) FillColor=@BackgroundCircleColor />
}

@if (BackgroundRectangleColor != null)
{
    <Rectangle X=X Y=Y Width="Width" Height="Height" FillColor=@BackgroundRectangleColor />
}

@if (OnClick.HasDelegate || OnMouseOver.HasDelegate || OnMouseExited.HasDelegate) 
{
    <img src="@Src" style="@Style" @attributes="@_attributes" @ref=@Element  @onclick="@OnClick" @onmouseenter="@OnMouseOver" @onmouseout="@OnMouseExited" alt="@Alt"/>
}
else
{
    <img src="@Src" style="@Style" @attributes="@_attributes" @ref=@Element alt="@Alt"/>
}

@code {

    [Parameter]
    public string Src { get; set; }

    [Parameter]
    public float ShadowX { get; set; }

    [Parameter]
    public float ShadowY { get; set; }

    [Parameter]
    public float ShadowBlur { get; set; }

    [Parameter]
    public string ShadowColor { get; set; } = "black";

    [Parameter]
    public string Filter { get; set; } = "";

    [Parameter]
    public string Animation { get; set; }

    [Parameter]
    public string BackgroundCircleColor { get; set; }

    [Parameter]
    public double BackgroundCircleDiameter { get; set; }

    [Parameter]
    public string BackgroundRectangleColor { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseExited { get; set; }

    [Parameter]
    public string Popover { get; set; }
    private string _popover = null;
    private bool _popoverNeedsRefresh = false;

    [Parameter]
    public bool PopoverAsTooltip { get; set; }

    private string Alt => PopoverAsTooltip ? Popover : string.Empty;

    private Dictionary<string, object> _attributes;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_popover != Popover)
        {
            _popover = Popover;
            _popoverNeedsRefresh = true;
        }

        _attributes = new Dictionary<string, object>();

        if (Popover != null && !PopoverAsTooltip)
        {
            _attributes.Add("data-bs-trigger", "hover");
            _attributes.Add("data-bs-toggle", "popover");
            _attributes.Add("data-bs-html", "true");
            _attributes.Add("data-bs-animation", "false");
            _attributes.Add("data-bs-delay", "100");
            _attributes.Add("data-container", "body");
            _attributes.Add("data-bs-content", Popover);
            _attributes.Add("data-bs-template", PopoverTemplate);
        }
        else
        {
            _attributes.Add("title", Popover);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!PopoverAsTooltip)
        {
            if (firstRender && Popover != null)
            {
                await Browser.EnablePopover(Element);
            }
            else if (_popoverNeedsRefresh)
            {
                _popoverNeedsRefresh = false;
                await Browser.RefreshPopover(Element);
            }
        }
    }

    private string BackgroundCircleStyle => $"position:absolute;left:{Px(X + 0.5f * Width)};top:{Px(Y + 0.5f * Height)};";

    private string BackgroundRectangleStyle => $"position:absolute;left:{Px(X)};top:{Px(Y)};";

    private string Style
    {
        get
        {
            var result = $"position:absolute;left:{Px(X)};top:{Px(Y)};width:{Px(Width)};height:{Px(Height)};opacity:{Round(Opacity)};";

            if (OnClick.HasDelegate || OnMouseOver.HasDelegate || Popover != null)
            {
                result += "cursor:pointer;pointer-events:all;";
            }
            else
            {
                result += "pointer-events:none;";
            }

            var shadowFilter = ShadowFilter;
            if (shadowFilter.Length > 0 || Filter.Length > 0)
            {
                result += $"filter:{ShadowFilter} {Filter};";
            }

            if (Animation != null)
            {
                result += $"animation:{Animation};";
            }

            return result;
        }
    }

    private string ShadowFilter => ShadowX > 0 || ShadowY > 0 ? $"drop-shadow({Px(ShadowX)} {Px(ShadowY)} {Px(ShadowBlur)} {ShadowColor})" : "";

    public new void Dispose()
    {
        if (Popover != null && !PopoverAsTooltip)
        {
            _ = Browser.RemovePopover(Element);
        }
        
        base.Dispose();
    }
}
